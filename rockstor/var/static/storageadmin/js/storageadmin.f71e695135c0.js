/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */


;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

var RockStorSocket = {};
RockStorSocket.handlerMap = {}; // initialize handler array

// Connect globally to sysinfo as the information is in the breadcrumb
RockStorSocket.sysinfo = io.connect('/sysinfo', {
    'secure': true,
    'force new connection': true
});

// Add the function and context to be fired when a message comes in
RockStorSocket.addListener = function(fn, fn_this, nsp_event) {
    RockStorSocket.handlerMap[nsp_event] = {
        fn: fn,
        fn_this: fn_this
    };
    var namespace = nsp_event.split(':')[0];
    var namespace_event = nsp_event.split(':')[1];
    RockStorSocket[namespace].on(namespace_event, RockStorSocket.msgHandler);
};

// Disconnect everything.
RockStorSocket.removeAllListeners = function() {
    _.each(_.keys(RockStorSocket.handlerMap), function(key) {
        delete RockStorSocket.handlerMap[key];
    });
};

RockStorSocket.removeOneListener = function(namespace) {
    RockStorSocket[namespace].disconnect();
};

// Fire appropriate callback given message
RockStorSocket.msgHandler = function(data) {
    var obj = RockStorSocket.handlerMap[data.key];
    if (!_.isNull(obj) && !_.isUndefined(obj)) {
        obj.fn.call(obj.fn_this, data.data);
    }
};

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PaginationMixin = {
    events: {
        'click .go-to-page': 'goToPage',
        'click .prev-page': 'prevPage',
        'click .next-page': 'nextPage'
    },
    goToPage: function(event) {
        if (event) event.preventDefault();
        this.collection.goToPage(parseInt($(event.currentTarget).attr('data-page')));
    },
    prevPage: function(event) {
        if (event) event.preventDefault();
        this.collection.prevPage();
    },
    nextPage: function(event) {
        if (event) event.preventDefault();
        this.collection.nextPage();
    }
};

RockstorLayoutView = Backbone.View.extend({
    tagName: 'div',
    className: 'layout',

    initialize: function() {
        this.subviews = {};
        this.dependencies = [];
    },

    fetch: function(callback, context) {
        var allDependencies = [];
        _.each(this.dependencies, function(dep) {
            allDependencies.push(dep.fetch({
                silent: true
            }));
        });
        $.when.apply($, allDependencies).done(function() {
            if (callback) callback.apply(context);
        });
    },

    renderDataTables: function(customs) {
        var DataTable_obj = {
            'iDisplayLength': 15,
            'aLengthMenu': [
                [15, 30, 45, -1],
                [15, 30, 45, 'All']
            ],            
        };
        if (typeof customs == 'object'){
            _.extend(DataTable_obj, customs);
        }
        $('table.data-table').DataTable(DataTable_obj);
    },

});


// RockstorModuleView

RockstorModuleView = Backbone.View.extend({

    tagName: 'div',
    className: 'module',
    requestCount: 0,

    initialize: function() {
        this.subviews = {};
        this.dependencies = [];
    },

    fetch: function(callback, context) {
        var allDependencies = [];
        _.each(this.dependencies, function(dep) {
            allDependencies.push(dep.fetch({
                silent: true
            }));
        });
        $.when.apply($, allDependencies).done(function() {
            if (callback) callback.apply(context);
        });
    },

    render: function() {
        $(this.el).html(this.template({
            module_name: this.module_name,
            model: this.model,
            collection: this.collection
        }));

        return this;
    }
});

RockStorWidgetView = Backbone.View.extend({
    tagName: 'div',
    className: 'widget',

    events: {
        'click .configure-widget': 'configure',
        'click .resize-widget': 'resize',
        'click .close-widget': 'close',
        'click .download-widget': 'download'
    },

    initialize: function() {
        this.maximized = this.options.maximized;
        this.name = this.options.name;
        this.displayName = this.options.displayName;
        this.parentView = this.options.parentView;
        this.dependencies = [];
    },

    render: function() {
        $(this.el).attr('id', this.name + '_widget');
    },

    configure: function(event) {
        if (!_.isUndefined(event) && !_.isNull(event)) {
            event.preventDefault();
        }
    },

    resize: function(event) {
        if (!_.isUndefined(event) && !_.isNull(event)) {
            event.preventDefault();
        }
        var c = $(this.el).closest('div.widgets-container');
        var w = $(this.el).closest('div.widget-ph'); // current widget
        var widgetDef = RockStorWidgets.findByName(this.name);
        if (!this.maximized) {
            // Maximizing
            // Remember current position
            this.originalPosition = w.index();
            // remove list item from current position
            w.detach();
            // insert at first position in the list
            c.prepend(w);
            // resize to max
            w.attr('data-ss-colspan', widgetDef.maxCols);
            w.attr('data-ss-rowspan', widgetDef.maxRows);
            this.maximized = true;
        } else {
            // Restoring
            w.detach();
            w.attr('data-ss-colspan', widgetDef.cols);
            w.attr('data-ss-rowspan', widgetDef.rows);
            // find current list item at original index
            if (_.isNull(this.originalPosition) ||
                _.isUndefined(this.originalPosition)) {
                this.originalPosition = 0;
            }
            curr_w = c.find('div.widget-ph:eq(' + this.originalPosition + ')');
            // insert widget at original position
            if (curr_w.length > 0) {
                // if not last widget
                curr_w.before(w);
            } else {
                c.append(w);
            }
            this.maximized = false;
        }
        // trigger rearrange so shapeshift can do its job
        c.trigger('ss-rearrange');
        this.parentView.saveWidgetConfiguration();
    },

    close: function(event) {
        if (!_.isUndefined(event) && !_.isNull(event)) {
            event.preventDefault();
        }
        this.parentView.removeWidget(this.name, this);
    },

    download: function(event) {
        if (!_.isUndefined(event) && !_.isNull(event)) {
            event.preventDefault();
        }
    },

    cleanup: function() {
        logger.debug('In RockStorWidgetView close');
    },

    fetch: function(callback, context) {
        var allDependencies = [];
        _.each(this.dependencies, function(dep) {
            allDependencies.push(dep.fetch({
                silent: true
            }));
        });
        $.when.apply($, allDependencies).done(function() {
            if (callback) callback.apply(context);
        });
    }

});


function getCookie(name) {
    var cookieValue = null;
    if (document.cookie && document.cookie != '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = jQuery.trim(cookies[i]);
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) == (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

function csrfSafeMethod(method) {
    // these HTTP methods do not require CSRF protection
    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
}

$.ajaxSetup({
    crossDomain: false, // obviates need for sameOrigin test
    beforeSend: function(xhr, settings) {
        if (!csrfSafeMethod(settings.type)) {
            var csrftoken = getCookie('csrftoken');
            xhr.setRequestHeader('X-CSRFToken', csrftoken);
        }
    }
});

function showApplianceList() {
    var applianceSelectPopup = $('#appliance-select-popup').modal({
        show: false
    });
    $('#appliance-select-content').html((new AppliancesView()).render().el);
    $('#appliance-select-popup').modal('show');

}


function showSuccessMessage(msg) {
    $('#messages').html(msg);
    $('#messages').css('visibility', 'visible');

}

function hideMessage() {
    $('#messages').html('&nbsp;');
    $('#messages').css('visibility', 'hidden');

}

/* Loading indicator */

$(document).ajaxStart(function() {
    $('#loading-indicator').css('visibility', 'visible');
});

$(document).ajaxStop(function() {
    $('#loading-indicator').css('visibility', 'hidden');
});


function showLoadingIndicator(elementName, context) {
    var _this = context;
    _this.$('#' + elementName).css('visibility', 'visible');
}

function hideLoadingIndicator(elementName, context) {
    var _this = context;
    _this.$('#' + elementName).css('visibility', 'hidden');
}

function disableButton(button) {
    button.data('executing', true);
    button.attr('disabled', true);
}

function enableButton(button) {
    button.data('executing', false);
    button.attr('disabled', false);
}

function buttonDisabled(button) {
    if (button.data('executing')) {
        return true;
    } else {
        return false;
    }
}


function refreshNavbar() {
    $.ajax({
        url: 'api/commands/current-user',
        type: 'POST',
        dataType: 'json',
        global: false, // dont show global loading indicator
        success: function(data, status, xhr) {
            var currentUser = data;
            $('#user-name').css({
                textTransform: 'none'
            });
            $('#user-name').html(currentUser + ' ');
        },
        error: function(xhr, status, error) {
            //  $('#user-name').html('Hello, <b> Admin! </b>');
        }
    });

    var navbarTemplate = window.JST.common_navbar;
    $('#navbar-links').html(navbarTemplate({
        logged_in: logged_in

    }));

    $('.dropdown-toggle').dropdown();
}

// Parses error message from ajax request
// Returns the value of the detail attribute as json
// or a string if it cannot be parsed as json
function parseXhrError(xhr) {
    var msg = xhr.responseText;
    try {
        msg = JSON.parse(msg).detail;
    } catch (err) {
        console.log(err);
    }
    if (typeof(msg) == 'string') {
        try {
            msg = JSON.parse(msg);
        } catch (err) {
            console.log(err);
        }
    }
    return msg;
}

function getXhrErrorJson(xhr) {
    var json = {};
    try {
        json = JSON.parse(xhr.responseText);
    } catch (err) {
        console.log(err);
    }
    return json;
}

function setApplianceName() {
    var appliances = new ApplianceCollection();
    appliances.fetch({
        success: function(request) {
            if (appliances.length > 0) {
                RockStorGlobals.currentAppliance =
                    appliances.find(function(appliance) {
                        return appliance.get('current_appliance') == true;
                    });
                $('#appliance-name').html('<i class="fa fa-desktop fa-inverse"></i>&nbsp;Hostname: ' + RockStorGlobals.currentAppliance.get('hostname') + '&nbsp;&nbsp;&nbsp;&nbsp;Mgmt IP: ' + RockStorGlobals.currentAppliance.get('ip'));
            }
        },
        error: function(request, response) {}

    });
}

function fetchDependencies(dependencies, callback, context) {
    if (dependencies.length == 0) {
        if (callback) callback.apply(context);
    }
    var requestCount = dependencies.length;
    _.each(dependencies, function(dependency) {
        dependency.fetch({
            success: function(request) {
                requestCount -= 1;
                if (requestCount == 0) {
                    if (callback) callback.apply(context);
                }
            },
            error: function(request, response) {
                requestCount -= 1;
                if (requestCount == 0) {
                    if (callback) callback.apply(context);
                }
            }
        });
    });
}

function checkBrowser() {
    var userAgent = navigator.userAgent;
    if (!/firefox/i.test(userAgent) && !/chrome/i.test(userAgent)) {
        $('#browsermsg').html('<div class="alert alert-error"><button type="button" class="close" data-dismiss="alert">&times;</button>The RockStor WebUI is supported only on Firefox or Chrome. Some features may not work correctly.</div>');
    }
    RockStorGlobals.browserChecked = true;
}

RockStorProbeMap = [];
RockStorGlobals = {
    navbarLoaded: false,
    applianceNameSet: false,
    currentAppliance: null,
    maxPageSize: 9000,
    browserChecked: false,
    kernel: null
};

var RS_DATE_FORMAT = 'MMMM Do YYYY, h:mm:ss a';

// Constants
probeStates = {
    STOPPED: 'stopped',
    CREATED: 'created',
    RUNNING: 'running',
    ERROR: 'error'
};

var RockstorUtil = function() {
    var util = {
        // maintain selected object list
        // list is an array of contains models

        // does the list contain a model with attr 'name' with value 'value'
        listContains: function(list, name, value) {
            return _.find(list, function(obj) {
                return obj.get(name) == value;
            });
        },

        // add obj from collection with attr 'name' and value 'value' to list
        addToList: function(list, collection, name, value) {
            list.push(collection.find(function(obj) {
                return obj.get(name) == value;
            }));
        },

        // remove obj with attr 'name' and value 'value'
        removeFromList: function(list, name, value) {
            var i = _.indexOf(_.map(list, function(obj) {
                return obj.get(name);
            }), value);
            if (i != -1) {
                list.splice(i, 1);
            }
        }
    };
    return util;
}();

RockstorWizardPage = Backbone.View.extend({

    initialize: function() {
        this.evAgg = this.options.evAgg;
        this.parent = this.options.parent;
    },

    render: function() {
        $(this.el).html(this.template({
            model: this.model
        }));
        return this;
    },

    save: function() {
        return $.Deferred().resolve();
    }
});

WizardView = Backbone.View.extend({
    tagName: 'div',

    events: {
        'click #next-page': 'nextPage',
        'click #prev-page': 'prevPage'
    },

    initialize: function() {
        this.template = window.JST.wizard_wizard;
        this.pages = null;
        this.currentPage = null;
        this.currentPageNum = -1;
        this.contentEl = '#ph-wizard-contents';
        this.evAgg = _.extend({}, Backbone.Events);
        this.evAgg.bind('nextPage', this.nextPage, this);
        this.evAgg.bind('prevPage', this.prevPage, this);
        this.parent = this.options.parent;
        this.title = this.options.title;
    },

    setPages: function(pages) {
        this.pages = pages;
    },

    render: function() {
        $(this.el).html(this.template({
            title: this.title,
            model: this.model
        }));
        this.nextPage();
        return this;
    },

    nextPage: function() {
        var _this = this;
        var promise = !_.isNull(this.currentPage) ?
            this.currentPage.save() :
            $.Deferred().resolve();
        promise.done(function(result, status, jqXHR) {
            _this.incrementPage();
        });
        promise.fail(function(jqXHR, status, error) {
            console.log(error);
        });
    },

    incrementPageNum: function() {
        this.currentPageNum = this.currentPageNum + 1;
    },

    decrementPageNum: function() {
        this.currentPageNum = this.currentPageNum - 1;
    },

    incrementPage: function() {
        if (!this.lastPage()) {
            this.incrementPageNum();
            this.setCurrentPage();
            this.renderCurrentPage();
        } else {
            this.finish();
        }
    },

    decrementPage: function() {
        if (!this.firstPage()) {
            this.decrementPageNum();
            this.setCurrentPage();
            this.renderCurrentPage();
        }
    },

    setCurrentPage: function() {
        this.currentPage = new this.pages[this.currentPageNum]({
            model: this.model,
            evAgg: this.evAgg
        });
    },

    renderCurrentPage: function() {
        this.$(this.contentEl).html(this.currentPage.render().el);
        this.modifyButtonText();
    },

    prevPage: function() {
        this.decrementPage();
    },

    modifyButtonText: function() {
        if (this.lastPage()) {
            this.$('#next-page').html('Finish');
        } else {
            this.$('#next-page').html('Next');
        }
    },

    firstPage: function() {
        return (this.currentPageNum == 0);
    },

    lastPage: function() {
        return (this.currentPageNum == (this.pages.length - 1));
    },

    finish: function() {
        console.log('finish');
    }
});
;RockStorWidgets = {};
RockStorWidgets.max_width = 10;
RockStorWidgets.max_height = 2;

RockStorWidgets.findByName = function(name) {
    return _.find(RockStorWidgets.widgetDefs, function(widget) {
        return widget.name == name;
    });
};

RockStorWidgets.findByCategory = function(category) {
    return _.filter(RockStorWidgets.widgetDefs, function(widget) {
        return widget.category == category;
    });
};

RockStorWidgets.defaultWidgets = function() {
    var tmp = _.filter(RockStorWidgets.widgetDefs, function(widget) {
        return widget.defaultWidget;
    });
    return _.sortBy(tmp, function(w) {
        if (!_.isUndefined(w.position) && !_.isNull(w.position)) {
            return w.position;
        } else {
            return Number.MAX_VALUE;
        }
    });
};

RockStorWidgets.defaultWidgetNames = function(name) {
    return _.map(RockStorWidgets.defaultWidgets(), function(widget) {
        return widget.name;
    });
};

RockStorWidgets.widgetDefs = [];
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ROCKSTOR_LOG_LEVEL = 'debug';
LOG_LEVELS = ['debug', 'info', 'warning', 'error'];

logger = function() {
    var obj = {};
    
    obj.log = function(msg, log_level) {
    };
    
    _.each(LOG_LEVELS, function(level) {
        obj[level] = function(msg) {
            this.log(msg, level);
        };
    });
    return obj;

}();

;var RockStorPaginatedCollection = Backbone.Collection.extend({

    initialize: function() {
        _.bindAll(this, 'parse', 'url', 'pageInfo', 'nextPage', 'prevPage');
        typeof(options) != 'undefined' || (options = {});
        this.page = 1;
        this.pageSize = RockStorGlobals.maxPageSize;
        this.fetched = false;
    },

    parse: function(resp) {
        this.count = resp.count;
        // fetched is only false if it has never been fetched.
        this.fetched = true;
        return resp.results;
    },

    setPageSize: function(pageSize) {
        this.pageSize = pageSize;
    },

    url: function() {
        if (_.isFunction(this.baseUrl)) {
            return this.baseUrl() + '?' + $.param(this.extraParams());
        }
        return this.baseUrl + '?' + $.param(this.extraParams());
    },

    pageInfo: function() {
        var info = {
            entry_count: this.count, //total number of entries in all pages combined.
            page_number: this.page, //page number of current page
            pageSize: this.pageSize, //maximum number of entries that could be in this page
            num_pages: Math.ceil(this.count / this.pageSize), //total number of pages
            prev: false,
            next: false
        };

        var max = Math.min(this.count, this.page * this.pageSize);

        if (this.total == this.pages * this.pageSize) {
            max = this.total;
        }

        info.range = [(this.page - 1) * this.pageSize + 1, max];

        if (this.page > 1) {
            info.prev = this.page - 1;
        }

        if (this.page < info.pages) {
            info.next = this.page + 1;
        }

        return info;
    },

    nextPage: function() {
        if (!this.pageInfo().next) {
            return false;
        }
        return this.goToPage(this.page + 1);
    },

    prevPage: function() {
        if (!this.pageInfo().prev) {
            return false;
        }
        return this.goToPage(this.page - 1);
    },

    goToPage: function(newPage) {
        this.page = newPage;
        return this.fetch({
            reset: true
        });
    },

    extraParams: function() {
        return {
            page: this.page,
            format: 'json',
            page_size: this.pageSize,
            count: this.count
        };
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

//routes
var AppRouter = Backbone.Router.extend({
    initialize: function() {
        this.currentLayout = null;
    },

    routes: {
        'login': 'loginPage',
        'setup': 'doSetup',
        'home': 'showHome',
        'disks': 'showDisks',
        'disks/blink/:diskId': 'blinkDrive',
        'disks/smartcustom/:diskId': 'smartcustomDrive',
        'disks/spindown/:diskId': 'spindownDrive',
        'disks/role/:diskId': 'roleDrive',
        'disks/luks/:diskId': 'luksDrive',
        'disks/:diskId': 'showDisk',
        'pools': 'showPools',
        'pools/:pid': 'showPool',
        'pools/:pid/?cView=:cView': 'showPool',
        'pools/:pid/:scrubId': 'showScrub',
        'add_pool': 'addPool',
        'shares': 'showShares',
        'add_share?poolName=:poolName': 'addShare',
        'add_share': 'addShare',
        'shares/:shareId': 'showShare',
        'shares/:shareId/create-clone': 'createCloneFromShare',
        'shares/:shareId/snapshots/:snapName/create-clone': 'createCloneFromSnapshot',
        'shares/:shareId/rollback': 'rollbackShare',
        'shares/:shareId/?cView=:cView': 'showShare',
        'snapshots': 'showSnapshots',
        'services': 'showServices',
        'services/:serviceName/edit': 'configureService',
        'services/:serviceName/edit/?adStatus=:adStatus': 'configureService',
        'users': 'showUsers',
        'users/:username/edit': 'editUser',
        'add-user': 'addUser',
        'groups': 'showGroups',
        'groups/:groupname/edit': 'editGroup',
        'add-group': 'addGroup',
        'analytics': 'showProbeRunList',
        'run_probe': 'runProbe',
        'probeDetail/:probeName/:probeId': 'showProbeDetail',
        'replication': 'showReplication',
        'edit-replication-task/:replicaId': 'editReplicationTask',
        'replication/:replicaId/trails': 'showReplicaTrails',
        'replication-receive': 'showReplicationReceives',
        'replication-receive/:replicaShareId/trails': 'showReceiveTrails',
        'add_replication_task': 'addReplicationTask',
        'nfs-exports': 'showNFSExports',
        'nfs-advanced-edit': 'nfsAdvancedEdit',
        'samba-exports': 'showSambaExports',
        'add-samba-export': 'addSambaExport',
        'samba/edit/:sambaShareId': 'editSambaExport',
        'nfs-exports/edit/:nfsExportGroupId': 'editNFSExport',
        'network/add': 'addNetworkConnection',
        'network/edit/:connectionId': 'editNetwork',
        'network': 'showNetworks',
        'scheduled-tasks': 'showScheduledTasks',
        'scheduled-tasks/:taskId/log': 'showTasks',
        'add-scheduled-task': 'addScheduledTask',
        'edit-scheduled-task/:taskDefId': 'editScheduledTask',
        'update-certificate': 'updateCertificate',
        'email': 'showEmail',
        'email/:emailID/edit': 'editEmail',
        'config-backup': 'configBackup',
        'logsmanager': 'showLogs',
        'shutdown': 'showShutdownView',
        'reboot': 'showReboot',
        'version': 'showVersion',
        'sftp': 'showSFTP',
        'add-sftp-share': 'addSFTPShare',
        'afp': 'showAFP',
        'add-afp-share': 'addAFPShare',
        'afp/edit/:afpShareId': 'editAFPShare',
        'rockons': 'showRockons',
        'shell': 'showShell',
        'images': 'showImages',
        'containers': 'showContainers',
        'appliances': 'showAppliances',
        'add-appliance': 'addAppliance',
        'access-keys': 'showAccessKeys',
        'add-access-key': 'addAccessKey',
        '404': 'handle404',
        '500': 'handle500',
        '*path': 'showHome'
    },

    before: function(route, param) {
        if (!logged_in) {
            if (route != 'login') {
                app_router.navigate('login', {
                    trigger: true
                });
                return false;
            }
        } else {
            if (route != 'setup' && !setup_done) {
                app_router.navigate('setup', {
                    trigger: true
                });
                return false;
            } else if (route == 'setup' && setup_done) {
                app_router.navigate('home', {
                    trigger: true
                });
                return false;
            }
        }

        if (RockStorGlobals.currentAppliance == null) {
            setApplianceName();
        }
        if (!RockStorGlobals.browserChecked) {
            checkBrowser();
        }
    },

    loginPage: function() {
        this.renderSidebar('setup', 'user');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new LoginView();
        $('#maincontent').append(this.currentLayout.render().el);

    },
    doSetup: function() {
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new SetupView();
        $('#maincontent').append(this.currentLayout.render().el);

    },

    showHome: function() {
        this.renderSidebar('dashboard', 'dashboard');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new HomeLayoutView();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showDisks: function() {
        this.renderSidebar('storage', 'disks');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new DisksView();
        $('#maincontent').append(this.currentLayout.render().el);

    },

    blinkDrive: function(diskId) {
        this.renderSidebar('storage', 'disks');
        this.cleanup();
        this.currentLayout = new BlinkDiskView({
            diskId: diskId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    smartcustomDrive: function(diskId) {
        this.renderSidebar('storage', 'disks');
        this.cleanup();
        this.currentLayout = new SmartcustomDiskView({
            diskId: diskId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    spindownDrive: function(diskId) {
        this.renderSidebar('storage', 'disks');
        this.cleanup();
        this.currentLayout = new SpindownDiskView({
            diskId: diskId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    roleDrive: function(diskId) {
        this.renderSidebar('storage', 'disks');
        this.cleanup();
        this.currentLayout = new SetroleDiskView({diskId: diskId});
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    luksDrive: function(diskId) {
        this.renderSidebar('storage', 'disks');
        this.cleanup();
        this.currentLayout = new LuksDiskView({diskId: diskId});
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showDisk: function(diskId) {
        this.renderSidebar('storage', 'disks');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new DiskDetailsLayoutView({
            diskId: diskId
        });
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showPools: function() {
        this.renderSidebar('storage', 'pools');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new PoolsView();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addPool: function() {
        this.renderSidebar('storage', 'pools');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new AddPoolView();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showPool: function(pid, cView) {
        this.renderSidebar('storage', 'pools');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new PoolDetailsLayoutView({
            pid: pid,
            cView: cView
        });
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showScrub: function(pid, scrubId) {
        this.renderSidebar('storage', 'pools');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new ScrubDetailsView({
            pid: pid,
            scrubId: scrubId
        });
        $('#maincontent').append(this.currentLayout.render().el);
    },

    //shares

    showShares: function() {
        this.renderSidebar('storage', 'shares');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new SharesView();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showSnaps: function(shareName) {
        var snapshotsTableView = new SnapshotsTableView({
            model: new Share({
                shareName: shareName
            })
        });
    },

    showSnap: function(shareName, snapName) {
        var snapshotsTableView = new SnapshotsTableView({
            model: new Share({
                shareName: shareName
            })
        });
    },

    addShare: function(poolName) {
        this.renderSidebar('storage', 'shares');
        $('#maincontent').empty();
        this.cleanup();
        if (_.isUndefined(poolName)) {
            this.currentLayout = new AddShareView();
        } else {
            this.currentLayout = new AddShareView({
                poolName: poolName
            });
        }
        $('#maincontent').append(this.currentLayout.render().el);

    },

    showShare: function(shareId, cView) {
        this.renderSidebar('storage', 'shares');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new ShareDetailsLayoutView({
            shareId: shareId,
            cView: cView
        });
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showSnapshots: function() {
        this.renderSidebar('storage', 'snapshots');
        $('#maincontent').empty();
        this.cleanup();
        this.currentLayout = new SnapshotsView();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showServices: function() {
        this.renderSidebar('system', 'services');
        this.cleanup();
        this.currentLayout = new ServicesView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);

    },

    configureService: function(serviceName, adStatus) {
        this.renderSidebar('system', 'services');
        //Left here like a comment for documentation purpose
        //Having configurations in modal windows we're leaving service page navigating
        //to service config page, but we don't cleanup up to avoid closing socketio
        //Add: this let us have also a nice view of services real state updating while saving/changing configs
        //this.cleanup();
        var service_options = _.isUndefined(adStatus) ? {
            serviceName: serviceName
        } : {
            serviceName: serviceName,
            adStatus: adStatus
        };
        this.currentLayout = new ConfigureServiceView(service_options);
        $('#services_modal .modal-body').empty();
        $('#services_modal .modal-body').append(this.currentLayout.render().el);
        $('#services_modal').modal('show');
    },

    showUsers: function() {
        this.renderSidebar('system', 'users');
        this.cleanup();
        this.currentLayout = new UsersView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addUser: function() {
        this.renderSidebar('system', 'users');
        this.cleanup();
        this.currentLayout = new AddUserView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editUser: function(username) {
        this.renderSidebar('system', 'users');
        this.cleanup();
        this.currentLayout = new AddUserView({
            username: username
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showGroups: function() {
        this.renderSidebar('system', 'groups');
        this.cleanup();
        this.currentLayout = new GroupsView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addGroup: function() {
        this.renderSidebar('system', 'groups');
        this.cleanup();
        this.currentLayout = new AddGroupView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editGroup: function() {
        this.renderSidebar('system', 'groups');
        this.cleanup();
        this.currentLayout = new AddGroupView({
            groupname: groupname
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showProbeRunList: function() {
        this.renderSidebar('analytics', 'probe_runs');
        this.cleanup();
        this.currentLayout = new ProbeRunListView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    runProbe: function() {
        this.renderSidebar('analytics', 'run_probe');
        this.cleanup();
        this.currentLayout = new RunProbeView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showProbeDetail: function(probeName, probeId) {
        this.cleanup();
        this.currentLayout = new ProbeDetailView({
            probeId: probeId,
            probeName: probeName
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    renderSidebar: function(name, selected) {
        var sidenavTemplate = window.JST['common_sidenav_' + name];
        $('#sidebar-inner').html(sidenavTemplate({
            selected: selected,
        }));
    },

    showReplication: function() {
        this.renderSidebar('storage', 'replication');
        this.cleanup();
        this.currentLayout = new ReplicationView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editReplicationTask: function(replicaId) {
        this.renderSidebar('storage', 'replication');
        this.cleanup();
        this.currentLayout = new AddReplicationTaskView({
            replicaId: replicaId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showReplicaTrails: function(replicaId) {
        this.renderSidebar('storage', 'replication');
        this.cleanup();
        this.currentLayout = new ReplicaTrailsView({
            replicaId: replicaId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addReplicationTask: function() {
        this.renderSidebar('storage', 'replication');
        this.cleanup();
        this.currentLayout = new AddReplicationTaskView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showReplicationReceives: function() {
        this.renderSidebar('storage', 'replication-receive');
        this.cleanup();
        this.currentLayout = new ReplicationReceiveView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showReceiveTrails: function(replicaShareId) {
        this.renderSidebar('storage', 'replication-receive');
        this.cleanup();
        this.currentLayout = new ReplicaReceiveTrailsView({
            replicaShareId: replicaShareId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showNFSExports: function() {
        this.renderSidebar('storage', 'nfs-exports');
        this.cleanup();
        this.currentLayout = new NFSExportsView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    nfsAdvancedEdit: function() {
        this.renderSidebar('storage', 'nfs-exports');
        this.cleanup();
        this.currentLayout = new NFSAdvancedEditView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editNFSExport: function(nfsExportGroupId) {
        this.renderSidebar('storage', 'nfs-exports');
        this.cleanup();
        this.currentLayout = new EditNFSExportView({
            nfsExportGroupId: nfsExportGroupId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showNetworks: function() {
        this.renderSidebar('system', 'network');
        this.cleanup();
        this.currentLayout = new NetworkView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editNetwork: function(connectionId) {
        this.renderSidebar('system', 'network');
        this.cleanup();
        this.currentLayout = new NetworkConnectionView({
            connectionId: connectionId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addNetworkConnection: function() {
        this.renderSidebar('system', 'network');
        this.cleanup();
        this.currentLayout = new NetworkConnectionView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    createCloneFromShare: function(shareId) {
        this.renderSidebar('storage', 'shares');
        this.cleanup();
        this.currentLayout = new CreateCloneView({
            sourceType: 'share',
            shareId: shareId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    createCloneFromSnapshot: function(shareId, snapName) {
        this.renderSidebar('storage', 'shares');
        this.cleanup();
        this.currentLayout = new CreateCloneView({
            sourceType: 'snapshot',
            shareId: shareId,
            snapName: snapName
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    rollbackShare: function(shareId) {
        this.renderSidebar('storage', 'shares');
        this.cleanup();
        this.currentLayout = new RollbackView({
            shareId: shareId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showScheduledTasks: function() {
        this.renderSidebar('system', 'scheduled-tasks');
        this.cleanup();
        this.currentLayout = new ScheduledTasksView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addScheduledTask: function() {
        this.renderSidebar('system', 'scheduled-tasks');
        this.cleanup();
        this.currentLayout = new AddScheduledTaskView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editScheduledTask: function(taskDefId) {
        this.renderSidebar('system', 'scheduled-tasks');
        this.cleanup();
        this.currentLayout = new AddScheduledTaskView({
            taskDefId: taskDefId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    updateCertificate: function() {
        this.renderSidebar('system', 'update-certificate');
        this.cleanup();
        this.currentLayout = new UpdateCertificateView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    configBackup: function() {
        this.renderSidebar('system', 'config-backup');
        this.cleanup();
        this.currentLayout = new ConfigBackupView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showTasks: function(taskDefId) {
        this.renderSidebar('system', 'scheduled-tasks');
        this.cleanup();
        this.currentLayout = new TasksView({
            taskDefId: taskDefId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showSambaExports: function() {
        this.renderSidebar('storage', 'samba');
        this.cleanup();
        this.currentLayout = new SambaView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addSambaExport: function() {
        this.renderSidebar('storage', 'samba');
        this.cleanup();
        this.currentLayout = new AddSambaExportView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editSambaExport: function(sambaShareId) {
        this.renderSidebar('storage', 'samba');
        this.cleanup();
        this.currentLayout = new AddSambaExportView({
            sambaShareId: sambaShareId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },


    showSFTP: function() {
        this.renderSidebar('storage', 'sftp');
        this.cleanup();
        this.currentLayout = new SFTPView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addSFTPShare: function() {
        this.renderSidebar('storage', 'sftp');
        this.cleanup();
        this.currentLayout = new AddSFTPShareView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showAFP: function() {
        this.renderSidebar('storage', 'afp');
        this.cleanup();
        this.currentLayout = new AFPView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addAFPShare: function() {
        this.renderSidebar('storage', 'afp');
        this.cleanup();
        this.currentLayout = new AddAFPShareView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editAFPShare: function(afpShareId) {
        this.renderSidebar('storage', 'afp');
        this.cleanup();
        this.currentLayout = new AddAFPShareView({
            afpShareId: afpShareId
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showVersion: function() {
        this.renderSidebar('system', 'version');
        this.cleanup();
        this.currentLayout = new VersionView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showShutdownView: function() {
        this.cleanup();
        this.currentLayout = new ShutdownView();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showReboot: function() {
        this.cleanup();
        this.currentLayout = new RebootView();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showRockons: function() {
        this.renderSidebar('rockons', 'rockons');
        this.cleanup();
        this.currentLayout = new RockonsView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showImages: function() {
        this.renderSidebar('rockons', 'images');
        this.cleanup();
        this.currentLayout = new ImagesView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showContainers: function() {
        this.renderSidebar('rockons', 'containers');
        this.cleanup();
        this.currentLayout = new ContainersView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showAppliances: function() {
        this.renderSidebar('system', 'appliances');
        this.cleanup();
        this.currentLayout = new AppliancesView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addAppliance: function() {
        this.renderSidebar('system', 'appliances');
        this.cleanup();
        this.currentLayout = new AddApplianceView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showAccessKeys: function() {
        this.renderSidebar('system', 'access-keys');
        this.cleanup();
        this.currentLayout = new AccessKeysView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    addAccessKey: function() {
        this.renderSidebar('system', 'access-keys');
        this.cleanup();
        this.currentLayout = new AddAccessKeyView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    handle404: function() {
        this.cleanup();
        this.currentLayout = new Handle404View();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    handle500: function() {
        this.cleanup();
        this.currentLayout = new Handle500View();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    cleanup: function() {
        hideMessage();
        if (!_.isNull(this.currentLayout)) {
            if (_.isFunction(this.currentLayout.cleanup)) {
                this.currentLayout.cleanup();
            }
        }
    },

    showEmail: function() {
        this.renderSidebar('system', 'email');
        this.cleanup();
        this.currentLayout = new EmailView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    editEmail: function(emailID) {
        this.renderSidebar('system', 'email');
        this.cleanup();
        this.currentLayout = new EmailView({
            emailID: emailID
        });
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showLogs: function() {
        this.renderSidebar('system', 'logs');
        this.cleanup();
        this.currentLayout = new LogsView();
        $('#maincontent').empty();
        $('#maincontent').append(this.currentLayout.render().el);
    },

    showShell: function() {
        //Special router function for shell
        //We fetch shellinaboxd service model and check for detach option
        //If not present or false we go with normal layout to maincontent
        //otherwhise (popup enabled) we open it in a new detached window
        var _this = this;
        _this.shell_service = new Service({
            name: 'shellinaboxd'
        });
        _this.shell_service.fetch({
            success: function(collection) {
                var config = JSON.parse(collection.get('config'));
                if ('detach' in config && config.detach) {
                    window.open('/shell', '', 'width=800, height=600');
                } else {
                    _this.renderSidebar('system', 'shell');
                    _this.cleanup();
                    _this.currentLayout = new ShellView();
                    $('#maincontent').empty();
                    $('#maincontent').append(_this.currentLayout.render().el);
                }
            }
        });

    },


});

Handlebars.registerHelper('sidenav', function(condition) {
    var html = '';
    if (this.selected == condition) {
        html += 'class="selected"';
    }
    return new Handlebars.SafeString(html);
});
//Initiate the router
var app_router = new AppRouter;
//###Render the view###
//On document load, render the view.
$(document).ready(function() {
    // Start Backbone history a neccesary step for bookmarkable URL's

    $('table.data-table').DataTable({
        'iDisplayLength': 10,
        'aLengthMenu': [
            [10, 15, 30, 45, -1],
            [10, 15, 30, 45, 'All']
        ]
    });

    if (!RockStorGlobals.navbarLoaded) {
        refreshNavbar();
    }
    Backbone.history.start();
    $('#appliance-name').click(function(event) {
        event.preventDefault();
        app_router.navigate('appliances', {
            trigger: true
        });
    });

    // Global ajax error handler
    $(document).ajaxError(function(event, jqXhr, ajaxSettings, e) {
        var popuperrTemplate = window.JST.common_popuperr;
        var htmlErr = null;
        var resType = jqXhr.getResponseHeader('Content-Type');
        var detail = jqXhr.responseText;
        var errJson = {};
        var tb = [];
        var userError = false;
        if (jqXhr.status != 403) {
            new Clipboard('#clip');
            // dont show forbidden errors (for setup screen)
            if (jqXhr.getResponseHeader('Content-Type').match(/json/)) {
                errJson = getXhrErrorJson(jqXhr);
                detail = errJson[0];
                if (errJson.length > 1) {
                    tb = errJson.slice(1);
                }
                if(jqXhr.status == 400){
                    tb = [];
                    userError = true;
                }
            } else if (jqXhr.status > 400 && jqXhr.status < 500) {
                detail = 'Unknown client error doing a ' + ajaxSettings.type + ' to ' + ajaxSettings.url;
            } else if (jqXhr.status >= 500 && jqXhr.status < 600) {
                detail = 'Unknown internal error doing a ' + ajaxSettings.type + ' to ' + ajaxSettings.url;
            }
            if (ajaxSettings.type == 'GET') {
                $('#globalerrmsg').html(popuperrTemplate({
                    jqXhr: jqXhr,
                    detail: detail,
                    tb: tb,
                    stable: RockStorGlobals.updateChannel == 'Stable',
                    help: errJson.help,
                    ajaxSettings: ajaxSettings,
                    userError: userError
                }));
            } else {
                $('.overlay-content', '#global-err-overlay').html(popuperrTemplate({
                    detail: detail,
                    tb: tb,
                    stable: RockStorGlobals.updateChannel == 'Stable',
                    userError: userError
                }));
                $('#global-err-overlay').overlay().load();
            }
        }
    });

    $('#global-err-overlay').on('click', '.err-help-toggle', function(event) {
        if (event) event.preventDefault();
        var displayed = $('.err-help', '#global-err-overlay').css('display') == 'block';
        var display = displayed ? 'none' : 'block';
        $('.err-help', '#global-err-overlay').css('display', display);
        var val = displayed ? 'More...' : 'Close';
        $('.err-help-toggle', '#global-err-overlay').html(val);
    });

    $('#globalerrmsg').on('click', '.err-help-toggle', function(event) {
        if (event) event.preventDefault();
        var displayed = $('.err-help').css('display') == 'block';
        var display = displayed ? 'none' : 'block';
        $('.err-help').css('display', display);
        var val = displayed ? 'More...' : 'Close';
        $('.err-help-toggle').html(val);
    });

    $('#globalerrmsg').on('click', '.close', function(event) {
        if (event) event.preventDefault();
        $('#globalerrmsg').empty();
    });

    //Function to handle services configuration modal closing on
    //Grant both on submit or cancel we move back to services page,
    //without trigger so we don't have a page refresh
    $('#services_modal').on('hidden.bs.modal', function(e) {
        app_router.navigate('services');
    });

    // Initialize global error popup
    $('#global-err-overlay').overlay({
        load: false
    });

    // handle btn navbar toggle ourselves since bootstrap collapse
    // seems to conflict with something
    $('body').on('click.collapse.data-api', '[data-toggle=mycollapse]', function(e) {
        var $this = $(this),
            target = $this.attr('data-target');
        var h = $(target).css('height');
        if (!($(target).hasClass('in'))) {
            $(target).addClass('in');
            $(target).css('height', 'auto');
        } else {
            $(target).removeClass('in');
            $(target).css('height', '0');
        }
    });

    // donate button handler
    $('#donate_nav').click(function(event) {
        if (event) {
            event.preventDefault();
        }
        $('#donate-modal').modal('show');
    });

    $('#donate-modal #contrib-custom').click(function(e) {
        $('#donate-modal #custom-amount').css('display', 'inline');
    });
    $('#donate-modal .contrib-other').click(function(e) {
        $('#donate-modal #custom-amount').css('display', 'none');
    });

    $('#donate-modal #donateYes').click(function(event) {
        contrib = $('#donate-modal input[type="radio"][name="contrib"]:checked').val();
        if (contrib == 'custom') {
            contrib = $('#custom-amount').val();
        }
        if (_.isNull(contrib) || _.isEmpty(contrib) || isNaN(contrib)) {
            contrib = 0; // set contrib to 0, let user input the number on paypal
        }
        $('#contrib-form input[name="amount"]').val(contrib);
        $('#contrib-form').submit();
        $('#donate-modal').modal('hide');
    });

    /********** Websockets **************/
    // These are global websocket events

    // Grab the far right of the breadcrumb (under nav)
    var $loadavg = $('#appliance-loadavg');

    var kernelInfo = function(data) {
        $loadavg.text('Linux: ' + data);
    };

    var distroInfo = function(data) {
        $('#distro-info').text(data.distro);
        $('#distro-info').attr('title', data.version);
    };

    var displayLocaleTime = function(data) {

        $('#local-time > span').text(data);

    };

    var displayShutdownStatus = function (data) {
        var html = '';
        if (data.status == 0) {
            html += '<i class="fa fa-warning fa-inverse" style="color: red;"></i> Shutdown scheduled';
            $('#shutdown-status').fadeOut(1500, function(){
                $('#shutdown-status').attr('title', data.message);
                $('#shutdown-status').html(html).fadeIn(1500);
            });
        } else {
            $('#shutdown-status').fadeOut(1500, function() {
                $('#shutdown-status').attr('title', '');
                $('#shutdown-status').empty();
            });
        }
    };

    var displayPoolDegradedStatus = function (data) {
        var html = '';
        if (data.status === 'degraded') {
            html += '<i class="fa fa-warning fa-inverse" style="color: red;"> Pool Degraded Alert </i>';
            $('#pool-degraded-status').fadeOut(1500, function(){
                $('#pool-degraded-status').attr('title', data.message);
                $('#pool-degraded-status').html(html).fadeIn(1500);
            });
        } else {
            $('#pool-degraded-status').fadeOut(1500, function() {
                $('#pool-degraded-status').attr('title', '');
                $('#pool-degraded-status').empty();
            });
        }
    };

    var displayPoolDevStats = function (data) {
        var html = '';
        if (data.status === 'errors') {
            html += '<i class="fa fa-warning fa-inverse" style="color: red;"> Pool Device Errors Alert </i>';
            $('#pool-dev-stats').fadeOut(1500, function(){
                $('#pool-dev-stats').attr('title', data.message);
                $('#pool-dev-stats').html(html).fadeIn(1500);
            });
        } else {
            $('#pool-dev-stats').fadeOut(1500, function() {
                $('#pool-dev-stats').attr('title', '');
                $('#pool-dev-stats').empty();
            });
        }
    };


    var displayLoadAvg = function(data) {
        var n = parseInt(data);
        var mins = Math.floor(n / 60) % 60;
        var hrs = Math.floor(n / (60 * 60)) % 24;
        var days = Math.floor(n / (60 * 60 * 24)) % 365;
        var yrs = Math.floor(n / (60 * 60 * 24 * 365));
        var str = 'Uptime: ';
        if (yrs == 1) {
            str += yrs + ' year, ';
        } else if (yrs > 1) {
            str += yrs + ' years, ';
        }
        if (days == 1) {
            str += days + ' day, ';
        } else if (days > 1) {
            str += days + ' days, ';
        }
        if (hrs < 10) {
            str += '0';
        }
        str += hrs + ':';
        if (mins < 10) {
            str += '0';
        }
        str += mins;
        $('#uptime').text(str);
    };

    var displayUpdate = function(data) {
        var currentVersion = data[0];
        var mostRecentVersion = data[1];
        if (currentVersion != mostRecentVersion) {
            $('#version-msg').html('RockStor ' + currentVersion + ' <i class="glyphicon glyphicon-arrow-up"></i>');
        } else {
            $('#version-msg').html('RockStor ' + currentVersion);
        }
    };

    var yum_updating = false; //global var to check if yum is updating
    var displayYumUpdates = function(data) {
        if (typeof data.yum_updating != 'undefined' && !data.yum_updating) {
            console.log('closing');
            yum_updating = false;
            $('#yum-msg a').html('');
        }
        if (data.yum_updates && !yum_updating) {
            $('#yum-msg').fadeIn(0);
            $('#yum-msg a').html('<i class="fa fa-rss" title="Available Yum Updates"></i>');
            if ($('#yum_panels').is(':empty')) {
                _.each(data.packages, function(pkg) {
                    var html = '';
                    html += '<div class="panel panel-default">';
                    html += '<div class="panel-heading panel-title">';
                    html += '<a data-toggle="collapse" data-parent="#yum_panels" href="#' + pkg['name'] + '">';
                    html += 'Package: <i>' + pkg['name'] + '</i></a></div>'; // closing panel-heading
                    html += '<div id="' + pkg['name'] + '" class="panel-collapse collapse">'; // accordion bodies
                    html += '<div class="panel-body">';
                    html += '<p class="text-center">==================== Available Package ====================</p>'; // new package
                    html += _.escape(pkg['available']).replace(/\[line\]/g, '<br/>') + '<br/><br/>';
                    html += '<p class="text-center">==================== Installed Package ====================</p>'; // current package
                    html += _.escape(pkg['installed']).replace(/\[line\]/g, '<br/>');
                    html += '</div>'; // closing panel body
                    html += '<div class="panel-footer text-justify">' + _.escape(pkg['description']) + '</div>';
                    html += '</div></div>'; // closing accordion and panel
                    $('#yum_panels').append(html);
                });
            }
        } else {
            $('#yum-msg').fadeOut(1000, function() {
                $('#yum-msg a').html('');
                $('#yum_panels').empty();
            });
        }
    };

    $('#yum-run').click(function(event) {
        var run_update = confirm('Do you want to procede with yum updates?');
        if (run_update) {
            RockStorSocket.sysinfo.emit('runyum');
            $('#yum_modal').modal('hide');
            yum_updating = true;
            $('#yum_panels').empty();
            $('#yum-msg a').html('<i class="fa fa-rss" title="Yum is updating all packages"></i>');
        }
    });

    $('#yumupdates').click(function(event) {
        if (event) {
            event.preventDefault();
        }
        if (!yum_updating) {
            $('#yum_modal').modal({
                backdrop: 'static',
                keyboard: false
            });
        }
    });

    var kernelError = function(data) {
        // If 'kernel' does not show up in the string, we're ok
        if (data.indexOf('kernel') !== -1) {
            // Put an alert at the top of the page
            $('#browsermsg').html('<div class="alert alert-danger"><button type="button" class="close" data-dismiss="alert">&times;</button>' + data + '</div>');
        }
    };


    RockStorSocket.addListener(kernelInfo, this, 'sysinfo:kernel_info');
    RockStorSocket.addListener(distroInfo, this, 'sysinfo:distro_info');
    RockStorSocket.addListener(displayLoadAvg, this, 'sysinfo:uptime');
    RockStorSocket.addListener(displayLocaleTime, this, 'sysinfo:localtime');
    RockStorSocket.addListener(displayYumUpdates, this, 'sysinfo:yum_updates');
    RockStorSocket.addListener(kernelError, this, 'sysinfo:kernel_error');
    RockStorSocket.addListener(displayUpdate, this, 'sysinfo:software_update');
    RockStorSocket.addListener(displayShutdownStatus, this, 'sysinfo:shutdown_status');
    RockStorSocket.addListener(displayPoolDegradedStatus, this, 'sysinfo:pool_degraded_status');
    RockStorSocket.addListener(displayPoolDevStats, this, 'sysinfo:pool_dev_stats');

    //insert pagination partial helper functions here
    Handlebars.registerHelper('pagination', function() {

        var totalPageCount = this.collection.pageInfo().num_pages,
            currPageNumber = this.collection.pageInfo().page_number,
            maxEntriesPerPage = this.collection.pageSize,
            totalEntryCount = this.collection.count,
            pagePrev = this.collection.pageInfo().prev,
            pageNext = this.collection.pageInfo().next,
            backwardIcon = '<i class="glyphicon glyphicon-backward"></i>',
            fastBackwardIcon = '<i class="glyphicon glyphicon-fast-backward"></i>',
            forwardIcon = '<i class="glyphicon glyphicon-forward"></i>',
            fastForwardIcon = '<i class="glyphicon glyphicon-fast-forward"></i>',
            html = '',
            entries = currPageNumber * maxEntriesPerPage,
            entry_prefix = 0;

        if (totalPageCount > 1) {
            html += '<nav>';
            if (currPageNumber * maxEntriesPerPage > totalEntryCount) {
                entries = totalEntryCount;
            }
            entry_prefix = (currPageNumber - 1) * (maxEntriesPerPage) + 1;

            html += '<p><i>Displaying entries ' + entry_prefix + ' - ' + (entries) + ' of ' + totalEntryCount + '</i></p>';
            html += '<ul class="pagination">';
            html += '<li><a class="go-to-page" href="#" data-page="1">' + fastBackwardIcon + '</a></li>';
            if (pagePrev) {
                html += '<li><a class="prev-page" href="#">' + backwardIcon + '</a></li>';
            } else {
                html += '<li class="disabled"><a class="prev-page" href="#">' + backwardIcon + '</a></li>';
            }

            var start = currPageNumber - 4;
            if (start <= 0) {
                start = 1;
            }
            var end = start + 9;
            if (end > totalPageCount) {
                end = totalPageCount;
            }
            for (var i = start; i <= end; i++) {
                if (i == currPageNumber) {
                    html += '<li class="active"><a class="go-to-page" href="#" data-page="' + i + '">' + i + '</a></li>';
                } else {
                    html += '<li><a class="go-to-page" href="#" data-page="' + i + '">' + i + '</a></li>';
                }
            }
            if (pageNext) {
                html += '<li><a class="next-page" href="#">' + fastForwardIcon + '</a></li>';
            } else {
                html += '<li class="disabled"><a class="next-page" href="#">' + forwardIcon + '</a></li>';
            }
            html += '<li><a class="go-to-page" href="#" data-page="' + totalPageCount + '">' + fastForwardIcon + '</a></li>';
            html += '</ul>';
            html += '</nav>';
        }

        return new Handlebars.SafeString(html);
    });

});

;function displayUsagePieChart(svg, outerRadius, innerRadius, w, h, dataset, dataLabels, total) {

    var arc = d3.svg.arc()
        .innerRadius(innerRadius)
        .outerRadius(outerRadius);

    var pie = d3.layout.pie();

    //var colors = {
    //free: {fill: 'rgb(21,130,61)', stroke: 'rgb(255,255,255)'}, 
    //used: {fill: 'rgb(122,122,122)', stroke: 'rgb(255,255,255)'}
    //};
    var colors = {
        used: {
            fill: 'rgb(128,128,128)',
            stroke: 'rgb(221,221,221)'
        },
        free: {
            fill: 'rgb(168,247,171)',
            stroke: 'rgb(221,221,221)'
        },
    };

    total = _.reduce(dataset, function(t, s) {
        return t + s;
    }, 0);

    //Set up groups
    var arcs = svg.selectAll('g.arc')
        .data(pie(dataset))
        .enter()
        .append('g')
        .attr('class', 'arc')
        .attr('transform', 'translate(' + (outerRadius + 5) + ', ' + (outerRadius + 5) + ')');

    //Draw arc paths
    arcs.append('path')
        .attr('fill', function(d, i) {
            return colors[dataLabels[i]].fill;
        })
        .attr('stroke', function(d, i) {
            return colors[dataLabels[i]].stroke;
        })
        .attr('stroke-width', 1)
        .attr('class', 'pie')
        .attr('d', arc);

    //Labels
    //arcs.append('text')
    //.attr('transform', function(d) {
    //return 'translate(' + arc.centroid(d) + ')';
    //})
    //.attr('text-anchor', 'middle')
    //.attr('class', 'pie')
    //.text(function(d, i) {
    //return d.value; 
    //});

    var labels = svg.selectAll('g.labels')
        .data(dataLabels)
        .enter()
        .append('g')
        .attr('transform', function(d, i) {
            return 'translate(' + (5 + (outerRadius * 2) + 50) + ',' + (5 + i * 25) + ')';
        });

    labels.append('rect')
        .attr('width', 13)
        .attr('height', 13)
        .attr('fill', function(d, i) {
            return colors[d].fill;
        })
        .attr('stroke', function(d, i) {
            return colors[d].stroke;
        });


    labels.append('text')
        .attr('text-anchor', 'left')
        .attr('class', 'legend')
        .attr('transform', function(d, i) {
            return 'translate(16,13)';
        })
        .text(function(d, i) {
            percent = Math.round((dataset[i] / total) * 100);
            return 'Space ' + d + ' - ' + humanize.filesize(dataset[i]);
        });

    var sizeLabel = svg.selectAll('g.sizeLabel')
        .data([total])
        .enter()
        .append('g')
        .attr('transform', function(d, i) {
            return 'translate(5,' + (5 + outerRadius * 2 + 20) + ')';
        });

    sizeLabel.append('text')
        .attr('text-anchor', 'left')
        .text(function(d) {
            return 'Size ' + humanize.filesize(d);
        });

}
;d3.slider2 = function module() {
    'use strict';

    var div, min = 0,
        max = 100,
        svg, svgGroup, value, classPrefix, axis,
        height = 40,
        rect,
        rectHeight = 12,
        tickSize = 6,
        margin = {
            top: 25,
            right: 25,
            bottom: 15,
            left: 20
        },
        ticks = 0,
        tickValues, scale, tickFormat, dragger, width,
        range = false,
        reclaimable = -1,
        used = -1,
        callbackFn, stepValues, focus;

    function slider(selection) {
        selection.each(function() {
            div = d3.select(this).classed('d3slider', true);
            width = parseInt(div.style('width'), 10) - (margin.left +
                margin.right);

            value = value || min;
            scale = d3.scale.linear().domain([min, max]).range([0, width]).clamp(true);

            // SVG 
            svg = div.append('svg')
                .attr('class', 'd3slider-axis')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('class', 'd3slider-axis-g')
                .attr('transform', 'translate(' + margin.left +
                    ',' + margin.top + ')');

            // Range rect
            svg.append('rect')
                .attr('class', 'd3slider-rect-range')
                .attr('width', width)
                .attr('height', rectHeight);

            if (reclaimable > -1) {
                svg.append('rect')
                    .attr('class', 'd3slider-rect-reclaimable')
                    .attr('width', scale(reclaimable))
                    .attr('height', rectHeight)
                    .attr('transform', 'translate(' + scale(max - used - reclaimable) + ',0)');

                svg.append('text')
                    .attr('x', 0)
                    .attr('y', -15)
                    .attr('text-anchor', 'middle')
                    .attr('transform', 'translate(' + scale(max - used - reclaimable) + ',0)')
                    .attr('class', 'draggertext')
                    .text(tickFormat(max - used - reclaimable));

            }

            if (used > -1) {
                svg.append('rect')
                    .attr('class', 'd3slider-rect-used')
                    .attr('width', scale(used))
                    .attr('height', rectHeight)
                    .attr('transform', 'translate(' + scale(max - used) + ',0)');

                svg.append('text')
                    .attr('x', 0)
                    .attr('y', -15)
                    .attr('text-anchor', 'middle')
                    .attr('transform', 'translate(' + scale(max - used) + ',0)')
                    .attr('class', 'draggertext')
                    .text(tickFormat(max - used));
            }

            if (range) {
                svg.append('rect')
                    .attr('class', 'd3slider-rect-value')
                    .attr('width', scale(value))
                    .attr('height', rectHeight);

            }

            // Axis      
            var axis = d3.svg.axis()
                .scale(scale)
                .orient('bottom');

            if (ticks != 0) {
                axis.ticks(ticks);
                axis.tickSize(tickSize);
            } else if (tickValues) {
                axis.tickValues(tickValues);
                axis.tickSize(tickSize);
            } else {
                axis.ticks(0);
                axis.tickSize(0);
            }
            if (tickFormat) {
                axis.tickFormat(tickFormat);
            }

            svg.append('g')
                .attr('transform', 'translate(0,' + rectHeight + ')')
                .call(axis);
            //.selectAll('.tick')
            //.data(tickValues, function(d) { return d; })
            //.exit()
            //.classed('minor', true);

            var values = [value];
            dragger = svg.selectAll('.dragger')
                .data(values)
                .enter()
                .append('g')
                .attr('class', 'dragger')
                .attr('transform', function(d) {
                    return 'translate(' + scale(d) + ')';
                });

            var displayValue = null;
            if (tickFormat) {
                displayValue = tickFormat(value);
            } else {
                displayValue = d3.format(',.0f')(value);
            }

            dragger.append('text')
                .attr('x', 0)
                .attr('y', -15)
                .attr('text-anchor', 'middle')
                .attr('class', 'draggertext')
                .text(displayValue);

            dragger.append('circle')
                .attr('class', 'dragger-outer')
                .attr('r', 10)
                .attr('transform', function(d) {
                    return 'translate(0,6)';
                });

            dragger.append('circle')
                .attr('class', 'dragger-inner')
                .attr('r', 8)
                .attr('transform', function(d) {
                    return 'translate(0,6)';
                });

            // Enable dragger drag 
            var dragBehaviour = d3.behavior.drag();
            dragBehaviour.on('drag', slider.drag);
            dragger.call(dragBehaviour);

            // Move dragger on click 
            svg.on('click', slider.click);

        });
    }

    slider.draggerTranslateFn = function() {
        return function(d) {
            return 'translate(' + scale(d) + ')';
        };
    };

    slider.click = function() {
        var pos = d3.event.offsetX || d3.event.layerX;
        slider.move(pos);
    };

    slider.drag = function() {
        var pos = d3.event.x;
        slider.move(pos + margin.left);
    };

    slider.move = function(pos) {
        var l, u;
        var minVal = 0;
        var maxVal = max - used;
        var newValue = scale.invert(pos - margin.left);
        if (newValue > maxVal) {
            newValue = maxVal;
        }
        if (newValue < minVal) {
            newValue = minVal;
        }

        // find tick values that are closest to newValue
        // lower bound
        if (stepValues != undefined) {
            l = stepValues.reduce(function(p, c, i, arr) {
                if (c < newValue) {
                    return c;
                } else {
                    return p;
                }
            });

            // upper bound
            if (stepValues.indexOf(l) < stepValues.length - 1) {
                u = stepValues[stepValues.indexOf(l) + 1];
            } else {
                u = l;
            }
            // set values
            value = ((newValue - l) <= (u - newValue)) ? l : u;
        } else {
            value = newValue;
        }
        var values = [value];

        // Move dragger
        svg.selectAll('.dragger').data(values)
            .attr('transform', function(d) {
                return 'translate(' + scale(d) + ')';
            });

        var displayValue = null;
        if (tickFormat) {
            displayValue = tickFormat(value);
        } else {
            displayValue = d3.format(',.0f')(value);
        }
        svg.selectAll('.dragger').select('text')
            .text(displayValue);

        if (range) {
            svg.selectAll('.d3slider-rect-value')
                .attr('width', scale(value));
        }

        if (callbackFn) {
            callbackFn(slider);
        }
    };

    // Getter/setter functions
    slider.min = function(_) {
        if (!arguments.length) return min;
        min = _;
        return slider;
    };

    slider.max = function(_) {
        if (!arguments.length) return max;
        max = _;
        return slider;
    };

    slider.classPrefix = function(_) {
        if (!arguments.length) return classPrefix;
        classPrefix = _;
        return slider;
    };

    slider.tickValues = function(_) {
        if (!arguments.length) return tickValues;
        tickValues = _;
        return slider;
    };

    slider.ticks = function(_) {
        if (!arguments.length) return ticks;
        ticks = _;
        return slider;
    };

    slider.stepValues = function(_) {
        if (!arguments.length) return stepValues;
        stepValues = _;
        return slider;
    };

    slider.tickFormat = function(_) {
        if (!arguments.length) return tickFormat;
        tickFormat = _;
        return slider;
    };

    slider.value = function(_) {
        if (!arguments.length) return value;
        value = _;
        return slider;
    };

    slider.showRange = function(_) {
        if (!arguments.length) return range;
        range = _;
        return slider;
    };

    slider.reclaimable = function(_) {
        if (!arguments.length) return reclaimable;
        reclaimable = _;
        return slider;
    };

    slider.used = function(_) {
        if (!arguments.length) return used;
        used = _;
        return slider;
    };

    slider.callback = function(_) {
        if (!arguments.length) return callbackFn;
        callbackFn = _;
        return slider;
    };

    slider.setValue = function(newValue) {
        var pos = scale(newValue) + margin.left;
        slider.move(pos);
    };

    slider.mousemove = function() {
        var pos = d3.mouse(this)[0];
        var val = slider.getNearest(scale.invert(pos), stepValues);
        focus.attr('transform', 'translate(' + scale(val) + ',0)');
        focus.selectAll('text').text(val);
    };

    slider.getNearest = function(val, arr) {
        var l = arr.reduce(function(p, c, i, a) {
            if (c < val) {
                return c;
            } else {
                return p;
            }
        });
        var u = arr[arr.indexOf(l) + 1];
        var nearest = ((value - l) <= (u - value)) ? l : u;
        return nearest;
    };

    slider.destroy = function() {
        div.selectAll('svg').remove();
        return slider;
    };

    return slider;

};
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

// Models and Collections
var Setup = Backbone.Model.extend({});

var Disk = Backbone.Model.extend({
    url: function() {
        return '/api/disks/' + this.get('diskId');
    },
    available: function () {
        return _.isNull(this.get('pool')) && !this.get('offline') &&
            _.isNull(this.get('btrfs_uuid'));
    },
    isSerialUsable: function() {
        // Simple disk serial validator to return true unless the given disk
        // serial number looks fake or untrustworthy.
        // In the case of a repeat or missing serial scan_disks() will use a
        // placeholder of fake-serial-<uuid4> so look for this signature text.
        var diskSerial = this.get('serial');
        if (diskSerial.substring(0, 12) == 'fake-serial-') {
            return false;
        }
        // Observed in a 4 bay ORICO USB 3.0 enclosure that obfuscated all it's
        // disk serial numbers and replaced them with '000000000000'.
        if (diskSerial == '000000000000') {
            return false;
        }
        return true;
    },
    // Using the disk.role system we can filter drives on their usability.
    // Roles for inclusion: openLUKS containers
    // Roles to dismiss: LUKS containers, mdraid members, the 'root' role,
    // and partitioned (if not accompanied by a redirect role).
    // Defaults to reject (return false)
    isRoleUsable: function () {
        // check if our role is null = db default
        // A drive with no role shouldn't present a problem for use.
        var role = this.get('role');
        if (role == null) {
            return true;
        }
        // try json conversion and return false if it fails
        // @todo not sure if this is redundant?
        try {
            var roleAsJson = JSON.parse(role);
        } catch (e) {
            // as we can't read this drives role we play save and exclude
            // it's isRoleUsable status by false
            return false;
        }
        // We have a json object, look for acceptable roles in the keys
        //
        // Accept use of 'openLUKS' device
        if (roleAsJson.hasOwnProperty('openLUKS')) {
            return true;
        }
        // Accept use of 'partitions' device but only if it is accompanied
        // by a 'redirect' role, ie so there is info to 'redirect' to the
        // by-id name held as the value to the 'redirect' role key.
        if (roleAsJson.hasOwnProperty('partitions') && roleAsJson.hasOwnProperty('redirect')) {
            // then we need to confirm if the fstype of the redirected
            // partition is "" else we can't use it
            if (roleAsJson.partitions.hasOwnProperty(roleAsJson.redirect)) {
                if (roleAsJson.partitions[roleAsJson.redirect] == '') {
                    return true;
                }
            }
        }
        // In all other cases return false, ie:
        // reject roles of for example root, mdraid, LUKS,
        // partitioned (when not accompanied by a valid redirect role) etc
        return false;
    }
});

var DiskCollection = RockStorPaginatedCollection.extend({
    model: Disk,
    baseUrl: '/api/disks'
});

var Pool = Backbone.Model.extend({
    url: function() {
        return '/api/pools/' + this.get('pid') + '/';
    },
    sizeGB: function() {
        return this.get('size') / (1024 * 1024);
    },
    freeGB: function() {
        return this.get('free') / (1024 * 1024);
    },
    usedGB: function() {
        return (this.get('size') - this.get('free')) / (1024 * 1024);
    }
});

var SmartInfo = Backbone.Model.extend({
    url: function() {
        return '/api/disks/smart/info/' + this.get('diskId');
    }
});

var PoolCollection = RockStorPaginatedCollection.extend({
    model: Pool,
    baseUrl: '/api/pools'
});

var Share = Backbone.Model.extend({
    url: function() {
        return '/api/shares/' + this.get('sid');
    }
});


var PoolShare = Backbone.Model.extend({
    url: function() {
        return '/api/pools/' + this.get('pid');
    }
});

var PoolShareCollection = Backbone.Collection.extend({
    model: PoolShare,
    initialize: function(model, options) {
        this.options = options;
    },
    url: function() {
        return '/api/pools/' + this.options.pid + '/shares';
    }
});

var ShareCollection = RockStorPaginatedCollection.extend({
    model: Share,
    baseUrl: '/api/shares',
    extraParams: function() {
        var p = this.constructor.__super__.extraParams.apply(this, arguments);
        p['sortby'] = 'name';
        return p;
    }
});

var Image = Backbone.Model.extend({
    url: function() {
        return '/api/rockons/';
    }
});

var ImageCollection = RockStorPaginatedCollection.extend({
    model: Image,
    baseUrl: '/api/rockons/docker/images'
});

var Container = Backbone.Model.extend({
    urlRoot: '/api/rockons/docker/containers/' + this.rid
});

var ContainerCollection = RockStorPaginatedCollection.extend({
    model: Container,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.rid = options.rid;
        }
    },
    baseUrl: function() {
        if (this.rid) {
            return '/api/rockons/docker/containers/' + this.rid;
        }
        return '/api/rockons/docker/containers';
    }
});

var Snapshot = Backbone.Model.extend({
    url: function() {
        return '/api/shares/' + this.get('shareId') + '/' + this.get('snapName');
    }
});

var SnapshotCollection = RockStorPaginatedCollection.extend({
    model: Snapshot,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.snapType = options.snapType;
        }
    },
    setUrl: function(shareId) {
        this.baseUrl = '/api/shares/' + shareId + '/snapshots';
    },
    extraParams: function() {
        var p = this.constructor.__super__.extraParams.apply(this, arguments);
        p['snap_type'] = this.snapType;
        return p;
    }
});

var Snapshots = Backbone.Model.extend({
    urlRoot: '/api/snapshots'
});

var SnapshotsCollection = RockStorPaginatedCollection.extend({
    model: Snapshots,
    baseUrl: '/api/snapshots'
});


var PoolScrub = Backbone.Model.extend({
    url: function() {
        // retrieve pool specific scrubs by pool id.
        return '/api/pools/' + this.get('pid') + '/scrub';
    }
});

var PoolScrubCollection = RockStorPaginatedCollection.extend({
    model: PoolScrub,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.snapType = options.snapType;
        }
    },
    // pid = Pool database id
    setUrl: function(pid) {
        this.baseUrl = '/api/pools/' + pid + '/scrub';
    },
    extraParams: function() {
        var p = this.constructor.__super__.extraParams.apply(this, arguments);
        p['snap_type'] = this.snapType;
        return p;
    }
});

var PoolRebalance = Backbone.Model.extend({
    url: function() {
        return '/api/pools/' + this.get('pid') + '/balance';
    }
});

var PoolRebalanceCollection = RockStorPaginatedCollection.extend({
    model: PoolRebalance,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.snapType = options.snapType;
        }
    },
    setUrl: function(pid) {
        this.baseUrl = '/api/pools/' + pid + '/balance';
    },
    extraParams: function() {
        var p = this.constructor.__super__.extraParams.apply(this, arguments);
        p['snap_type'] = this.snapType;
        return p;
    }
});

var SysInfo = Backbone.Model.extend({
    url: '/api/tools/sysinfo'
});

var NFSExport = Backbone.Model.extend();

var NFSExportCollection = RockStorPaginatedCollection.extend({
    model: NFSExport,
    setUrl: function(shareName) {
        this.baseUrl = '/api/shares/' + shareName + '/nfs';
    }
});

var NFSExportGroup = Backbone.Model.extend({
    urlRoot: '/api/nfs-exports'
});

var NFSExportGroupCollection = RockStorPaginatedCollection.extend({
    model: NFSExportGroup,
    baseUrl: '/api/nfs-exports'
});

var SMBShare = Backbone.Model.extend({
    url: function() {
        return '/api/shares/' + this.get('shareName') + '/samba';
    }
});

var SMBShareCollection = Backbone.Collection.extend({
    model: SMBShare
});

var SambaCollection = RockStorPaginatedCollection.extend({
    model: SMBShare,
    baseUrl: '/api/samba',
    idAttribute: 'sambaShareId'
});

var Service = Backbone.Model.extend({
    idAttribute: 'name',
    urlRoot: '/api/sm/services'
});

var ServiceCollection = RockStorPaginatedCollection.extend({
    model: Service,
    baseUrl: '/api/sm/services/'
});

var Appliance = Backbone.Model.extend({
    urlRoot: '/api/appliances'
});
var ApplianceCollection = RockStorPaginatedCollection.extend({
    model: Appliance,
    baseUrl: '/api/appliances'
});

var User = Backbone.Model.extend({
    urlRoot: '/api/users',
    idAttribute: 'username'
});

var UserCollection = RockStorPaginatedCollection.extend({
    model: User,
    baseUrl: '/api/users'
});

var Group = Backbone.Model.extend({
    urlRoot: '/api/groups',
    idAttribute: 'groupname'
});

var GroupCollection = RockStorPaginatedCollection.extend({
    model: Group,
    baseUrl: '/api/groups'
});

var ISCSITarget = Backbone.Model.extend({
    url: function() {
        return '/api/shares/' + this.get('shareName') + '/iscsi/';
    }
});

var DashboardConfig = Backbone.Model.extend({
    url: '/api/dashboardconfig',
    setConfig: function(wConfigs) {
        var tmp = [];
        _.each(wConfigs, function(wConfig) {
            tmp.push({
                name: wConfig.name,
                position: wConfig.position,
                maximized: wConfig.maximized
            });
        });
        this.set({
            widgets: JSON.stringify(tmp)
        });
    },

    getConfig: function() {
        if (!_.isUndefined(this.get('widgets')) && !_.isNull(this.get('widgets'))) {
            return JSON.parse(this.get('widgets'));
        }
        this.setConfig(RockStorWidgets.defaultWidgets());
        return JSON.parse(this.get('widgets'));
    }

});

var Probe = Backbone.Model.extend({
    urlRoot: function() {
        return '/api/sm/sprobes/' + this.get('name') + '/';
    },
    dataUrl: function() {
        return '/api/sm/sprobes/' + this.get('name') + '/' + this.id + '/data';
    },
    parse: function(response) {
        if (response.results && response.results.length > 0) {
            return response.results[0];
        }
        return {};
    }
});

var ProbeCollection = Backbone.Collection.extend({
    model: Probe,
    initialize: function(models, options) {
        if (!_.isUndefined(options) && !_.isNull(options)) {
            this.name = options.name;
        }
    },
    url: function() {
        return '/api/sm/sprobes/' + this.name + '/';
    },
    parse: function(response) {
        return response.results;
    }
});


var NetworkDevice = Backbone.Model.extend({
    urlRoot: '/api/network/devices'
});

var NetworkDeviceCollection = RockStorPaginatedCollection.extend({
    model: NetworkDevice,
    baseUrl: '/api/network/devices'
});

var NetworkConnection = Backbone.Model.extend({
    urlRoot: '/api/network/connections'
});

var NetworkConnectionCollection = RockStorPaginatedCollection.extend({
    model: NetworkConnection,
    baseUrl: '/api/network/connections'
});

var ProbeRun = Backbone.Model.extend({
    dataUrl: function() {
        return '/api/sm/sprobes/' + this.get('name') + '/' + this.id + '/data?format=json';
    },
    downloadUrl: function() {
        return '/api/sm/sprobes/' + this.get('name') + '/' + this.id +
            '/data' + '?' +
            't1=' + this.get('start') + '&t2=' + this.get('end') +
            '&download=true';
    }
});

var ProbeRunCollection = RockStorPaginatedCollection.extend({
    model: ProbeRun,
    baseUrl: '/api/sm/sprobes/metadata'
});

var ProbeTemplate = Backbone.Model.extend({
    idAttribute: 'uuid'
});
var ProbeTemplateCollection = Backbone.Collection.extend({
    model: ProbeTemplate,
    url: '/api/sm/sprobes/?format=json'
});

var Replica = Backbone.Model.extend({
    urlRoot: '/api/sm/replicas'
});
var ReplicaCollection = RockStorPaginatedCollection.extend({
    model: Replica,
    baseUrl: '/api/sm/replicas/'
});

var ReplicaTrail = Backbone.Model.extend({
    urlRoot: '/api/sm/replicas/trail/replica/' + this.replicaId
});

var ReplicaTrailCollection = RockStorPaginatedCollection.extend({
    model: ReplicaTrail,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.replicaId = options.replicaId;
        }
    },
    baseUrl: function() {
        if (this.replicaId) {
            return '/api/sm/replicas/trail/replica/' + this.replicaId;
        }
        return '/api/sm/replicas/trail';
    }
});

var ReplicaShare = Backbone.Model.extend({
    urlRoot: '/api/sm/replicas/rshare'
});

var ReplicaShareCollection = RockStorPaginatedCollection.extend({
    model: ReplicaShare,
    baseUrl: '/api/sm/replicas/rshare'
});

var ReceiveTrail = Backbone.Model.extend({
    urlRoot: '/api/sm/replicas/rtrail/' + this.replicaShareId
});

var ReceiveTrailCollection = RockStorPaginatedCollection.extend({
    model: ReceiveTrail,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.replicaShareId = options.replicaShareId;
        }
    },
    baseUrl: function() {
        if (this.replicaShareId) {
            return '/api/sm/replicas/rtrail/rshare/' + this.replicaShareId;
        }
        return '/api/sm/replicas/rtrail';
    }
});

var TaskDef = Backbone.Model.extend({
    urlRoot: '/api/sm/tasks/',
    max_count: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).max_count;
        }
        return 0;
    },
    share: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).share;
        }
        return '';
    },
    share_name: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).share_name;
        }
        return '';
    },
    prefix: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).prefix;
        }
        return '';
    },
    pool: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).pool;
        }
        return '';
    },
    pool_name: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).pool_name;
        }
        return '';
    },
    visible: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).visible;
        }
        return false;
    },
    writable: function() {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).writable;
        }
        return false;
    },
    wakeup: function () {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).wakeup;
        }
        return false;
    },
    rtc_hour: function () {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).rtc_hour;
        }
        return 0;
    },
    rtc_minute: function () {
        if (this.get('json_meta') != null) {
            return JSON.parse(this.get('json_meta')).rtc_minute;
        }
        return 0;
    }

});

var TaskDefCollection = RockStorPaginatedCollection.extend({
    model: TaskDef,
    baseUrl: '/api/sm/tasks/'
});

var Task = Backbone.Model.extend({
    urlRoot: '/api/sm/tasks/log'
});

var TaskCollection = RockStorPaginatedCollection.extend({
    model: Task,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.taskDefId = options.taskDefId;
        }
    },
    baseUrl: function() {
        if (this.taskDefId) {
            return '/api/sm/tasks/log/taskdef/' + this.taskDefId;
        }
        return '/api/sm/tasks/log';
    }
});

var SFTP = Backbone.Model.extend({
    urlRoot: '/api/sftp'
});

var SFTPCollection = RockStorPaginatedCollection.extend({
    model: SFTP,
    baseUrl: '/api/sftp'
});


var AFP = Backbone.Model.extend({
    urlRoot: '/api/netatalk'
});

var AFPCollection = RockStorPaginatedCollection.extend({
    model: AFP,
    baseUrl: '/api/netatalk'
});


var ReplicaReceive = Backbone.Model.extend({
    urlRoot: '/api/sm/replicareceives'
});

var ReplicaReceiveCollection = RockStorPaginatedCollection.extend({
    model: ReplicaReceive,
    baseUrl: '/api/sm/replicareceives'
});

var ReplicaReceiveTrail = Backbone.Model.extend({
    urlRoot: '/api/sm/replicareceivetrail'
});

var ReplicaReceiveTrailCollection = RockStorPaginatedCollection.extend({
    model: ReplicaReceiveTrail,
    baseUrl: '/api/sm/replicareceivetrai'
});

var AdvancedNFSExport = Backbone.Model.extend();

var AdvancedNFSExportCollection = RockStorPaginatedCollection.extend({
    model: AdvancedNFSExport,
    baseUrl: '/api/adv-nfs-exports'
});


var AccessKey = Backbone.Model.extend({
    url: function() {
        return '/api/oauth_app';
    }
});

var AccessKeyCollection = RockStorPaginatedCollection.extend({
    model: AccessKey,
    baseUrl: '/api/oauth_app'
});

var Certificate = Backbone.Model.extend({
    urlRoot: '/api/certificate'
});

var ConfigBackup = Backbone.Model.extend({
    urlRoot: '/api/config-backup'
});

var ConfigBackupCollection = RockStorPaginatedCollection.extend({
    model: ConfigBackup,
    baseUrl: '/api/config-backup'
});

var RockOn = Backbone.Model.extend({
    urlRoot: '/api/rockons'
});

var RockOnCollection = RockStorPaginatedCollection.extend({
    model: RockOn,
    baseUrl: '/api/rockons'
});

var RockOnVolume = Backbone.Model.extend({
    urlRoot: '/api/rockons/volumes/' + this.rid
});

var RockOnVolumeCollection = RockStorPaginatedCollection.extend({
    model: RockOnVolume,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.rid = options.rid;
        }
    },
    baseUrl: function() {
        if (this.rid) {
            return '/api/rockons/volumes/' + this.rid;
        }
        return '/api/rockons/volumes';
    }
});

var RockOnPort = Backbone.Model.extend({
    urlRoot: '/api/rockon/ports/' + this.rid
});

var RockOnPortCollection = RockStorPaginatedCollection.extend({
    model: RockOnPort,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.rid = options.rid;
        }
    },
    baseUrl: function() {
        if (this.rid) {
            return '/api/rockons/ports/' + this.rid;
        }
        return '/api/rockons/ports';
    }
});

var RockOnDevice = Backbone.Model.extend({
    urlRoot: '/api/rockon/devices/' + this.rid
});

var RockOnDeviceCollection = RockStorPaginatedCollection.extend({
    model: RockOnDevice,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.rid = options.rid;
        }
    },
    baseUrl: function() {
        if (this.rid) {
            return '/api/rockons/devices/' + this.rid;
        }
        return '/api/rockons/devices';
    }
});

var RockOnLabel = Backbone.Model.extend({
    urlRoot: '/api/rockon/labels/' + this.rid
});

var RockOnLabelCollection = RockStorPaginatedCollection.extend({
    model: RockOnLabel,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.rid = options.rid;
        }
    },
    baseUrl: function() {
        if (this.rid) {
            return '/api/rockons/labels/' + this.rid;
        }
        return '/api/rockons/labels';
    }
});

var RockOnCustomConfig = Backbone.Model.extend({
    urlRoot: '/api/rockon/customconfig/' + this.rid
});

var RockOnCustomConfigCollection = RockStorPaginatedCollection.extend({
    model: RockOnCustomConfig,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.rid = options.rid;
        }
    },
    baseUrl: function() {
        if (this.rid) {
            return '/api/rockons/customconfig/' + this.rid;
        }
        return '/api/rockons/customconfig';
    }
});

var RockOnEnvironment = Backbone.Model.extend({
    urlRoot: '/api/rockon/environment/' + this.rid
});

var RockOnEnvironmentCollection = RockStorPaginatedCollection.extend({
    model: RockOnEnvironment,
    initialize: function(models, options) {
        this.constructor.__super__.initialize.apply(this, arguments);
        if (options) {
            this.rid = options.rid;
        }
    },
    baseUrl: function() {
        if (this.rid) {
            return '/api/rockons/environment/' + this.rid;
        }
        return '/api/rockons/environment';
    }
});

var EmailAccount = Backbone.Model.extend({
    urlRoot: '/api/email'
});

var EmailAccountCollection = RockStorPaginatedCollection.extend({
    model: EmailAccount,
    baseUrl: '/api/email'
});

var UpdateSubscription = Backbone.Model.extend({
    urlRoot: '/api/update-subscriptions'
});

var UpdateSubscriptionCollection = RockStorPaginatedCollection.extend({
    model: UpdateSubscription,
    baseUrl: '/api/update-subscriptions'
});

;SnapshotsCommonView = RockstorLayoutView.extend({
    selectSnapshot: function(event) {
        var _this = this;
        var name = $(event.currentTarget).attr('data-name');
        var checked = $(event.currentTarget).prop('checked');
        this.selectSnapshotWithName(name, checked);
        this.toggleDeleteButton();
    },

    selectSnapshotWithName: function(name, checked) {
        if (checked) {
            if (!RockstorUtil.listContains(this.selectedSnapshots, 'name', name)) {
                RockstorUtil.addToList(
                    this.selectedSnapshots, this.collection, 'name', name);
            }
        } else {
            if (RockstorUtil.listContains(this.selectedSnapshots, 'name', name)) {
                RockstorUtil.removeFromList(this.selectedSnapshots, 'name', name);
            }
        }
    },

    toggleDeleteButton: function() {
        if (this.selectedSnapshots.length == 0) {
            $('#js-snapshot-delete-multiple').css('visibility', 'hidden');
        } else {
            $('#js-snapshot-delete-multiple').css('visibility', 'visible');
        }
    },

    selectAllSnapshots: function(event) {
        var _this = this;
        var checked = $(event.currentTarget).prop('checked');
        this.$('.js-snapshot-select').prop('checked', checked);
        this.$('.js-snapshot-select').each(function() {
            _this.selectSnapshotWithName($(this).attr('data-name'), checked);
        });
        this.toggleDeleteButton();
    },
});
;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

AccessKeysView = RockstorLayoutView.extend({
    events: {
        'click a[data-action=delete]': 'deleteAccessKey'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.access_keys_access_keys;
        this.collection = new AccessKeyCollection();
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderAccessKeys, this);
    },

    render: function() {
        this.fetch(this.renderAccessKeys, this);
        return this;
    },

    renderAccessKeys: function() {
        $(this.el).html(this.template({
            accessKeys: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
        }));

        this.renderDataTables();
    },

    deleteAccessKey: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        var name = button.attr('data-name');
        var id = button.attr('data-id');
        if (confirm('Delete access key:  ' + name + ' ...Are you sure?')) {
            disableButton(button);
            $.ajax({
                url: '/api/oauth_app/' + id,
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    _this.collection.fetch({
                        reset: true
                    });
                    enableButton(button);
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }

    },
});
;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2014 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */


AddAccessKeyView = RockstorLayoutView.extend({
    events: {
        'click #js-cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.access_keys_add_access_key;
    },

    render: function() {
        var _this = this;
        $(this.el).html(this.template());
        this.$('#add-access-key-form :input').tooltip({
            placement: 'right'
        });
        this.$('#add-access-key-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                access_key_name: 'required',
            },
            submitHandler: function() {
                var button = _this.$('#create-access-key');
                if (buttonDisabled(button)) return false;
                var name = _this.$('#name').val();
                disableButton(button);
                $.ajax({
                    url: '/api/oauth_app',
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        name: name
                    },
                    success: function() {
                        enableButton(button);
                        _this.$('#add-access-key-form :input').tooltip('hide');
                        app_router.navigate('access-keys', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    },
                });
            }
        });
        return this;
    },

    cancel: function(event) {
        event.preventDefault();
        this.$('#add-access-key-form :input').tooltip('hide');
        app_router.navigate('access-keys', {
            trigger: true
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AddAFPShareView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.afp_add_afp_share;
        this.shares = new ShareCollection();
        // dont paginate shares for now
        this.shares.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.shares);
        this.afpShareId = this.options.afpShareId || null;
        this.afpShares = new AFPCollection({
            afpShareId: this.afpShareId
        });
        this.dependencies.push(this.afpShares);
        this.yes_no_choices = [{
            name: 'yes',
            value: 'yes'
        },
        {
            name: 'no',
            value: 'no'
        },
        ];
        this.time_machine_choices = this.yes_no_choices;
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderAFPForm, this);
        return this;
    },

    renderAFPForm: function() {
        var _this = this;
        var afpShareIdNotNull = false; //afpShareId is Null by default.
        this.freeShares = this.shares.reject(function(share) {
            s = this.afpShares.find(function(afpShare) {
                return (afpShare.get('share') == share.get('name'));
            });
            return !_.isUndefined(s);
        }, this);

        if (this.afpShareId != null) {
            this.aShares = this.afpShares.get(this.afpShareId);
            afpShareIdNotNull = true;
        } else {
            this.aShares = null;
        }

        $(this.el).html(this.template({
            freeShares: this.freeShares,
            afpShare: this.aShares,
            afpShareId: this.afpShareId,
            afpShareIdNotNull: afpShareIdNotNull,
            time_machine_choices: this.time_machine_choices,
        }));

        $('#add-afp-share-form :input').tooltip({
            html: true,
            placement: 'right'
        });

        this.$('#shares').select2();


        $.validator.setDefaults({
            ignore: ':hidden:not(select)'
        });

        $('#add-afp-share-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {

                shares: 'required',

            },

            submitHandler: function() {
                var button = $('#create-afp-export');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/netatalk';
                if (_this.afpShareId != null) {
                    submitmethod = 'PUT';
                    posturl += '/' + _this.afpShareId;
                }
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#add-afp-share-form').getJSON()),
                    success: function() {
                        enableButton(button);
                        _this.$('#add-afp-share-form :input').tooltip('hide');
                        app_router.navigate('afp', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });
                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        this.$('#add-afp-share-form :input').tooltip('hide');
        app_router.navigate('afp', {
            trigger: true
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_shares_dropdown', function() {
            var html = '';
            if (this.afpShareIdNotNull) {
                var afpShare = this.afpShare.get('share');
                html += '<option value="' + afpShare + '" selected="selected">' + afpShare + '</option>';
            } else {
                _.each(this.freeShares, function(share, index) {
                    var shareName = share.get('name');
                    html += '<option value="' + shareName + '">' + shareName + '</option>';
                });
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('display_timeMachine_choices', function() {
            var html = '';
            _.each(this.time_machine_choices, function(c) {
                var choiceName = c.name,
                    choiceValue = c.value;
                html += '<label class="radio-inline">';
                if (this.afpShareIdNotNull) {
                    if (choiceValue == afpShare.get('time_machine')) {
                        html += '<input type="radio" name="time_machine" value="' + choiceValue + '" title="Enable Time Machine support for this Share to backup Macs." checked> ' + choiceName;
                    } else {
                        html += '<input type="radio" name="time_machine" value="' + choiceValue + '" title="Don\'t enable Time Machine support for this Share." > ' + choiceName;
                    }
                } else {
                    if (choiceValue == 'yes') {
                        html += '<input type="radio" name="time_machine" value="' + choiceValue + '" title="Enable Time Machine support for this Share to backup Macs" checked> ' + choiceName;
                    } else {
                        html += '<input type="radio" name="time_machine" value="' + choiceValue + '" title="Don\'t enable Time Machine support for this Share." > ' + choiceName;
                    }
                }
                html += '</label>';
            });
            return new Handlebars.SafeString(html);
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AddApplianceView = RockstorLayoutView.extend({

    events: {
        'click #js-cancel': 'cancel'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.appliances_add_appliance;
    },

    render: function() {
        var _this = this;
        $(this.el).html(this.template());
        this.$('#add-appliance-form :input').tooltip({
            html: true,
            placement: 'right'
        });
        this.$('#add-appliance-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                ip: 'required',
                mgmt_port: {
                    required: true,
                    number: true,
                },
                client_id: 'required',
                client_secret: 'required'
            },
            submitHandler: function() {
                var button = _this.$('#add-appliance');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var data = _this.$('#add-appliance-form').getJSON();
                data.current_appliance = false;
                $.ajax({
                    url: '/api/appliances',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        _this.$('#add-appliance-form :input').tooltip('hide');
                        enableButton(button);
                        app_router.navigate('appliances', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        _this.$('#add-appliance-form :input').tooltip('hide');
                        enableButton(button);
                    }
                });
            }
        });
        return this;
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('appliances', {
            trigger: true
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AddGroupView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.users_add_group;
        this.groupname = this.options.groupname;
        this.group = new Group({
            groupname: this.groupname
        });
        this.dependencies.push(this.group);
    },

    render: function() {
        this.fetch(this.renderExportForm, this);
        return this;
    },

    renderExportForm: function() { //#start renderExportForm
        var _this = this;
        $(this.el).html(this.template({
            groupname: this.groupname,
            group: this.group.toJSON()

        }));

        this.$('#group-create-form :input').tooltip({
            placement: 'right'
        });

        this.validator = this.$('#group-create-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                groupname: 'required',
                gid: {
                    number: true

                }
            },

            submitHandler: function() {
                var groupname = _this.$('#groupname').val();
                var gid = _this.$('#gid').val() || null;
                var group;
                if (_this.groupname != null && _this.group != null) {
                    group = new Group({
                        groupname: _this.groupname
                    });
                    group.save(null, {
                        success: function(model, response, options) {
                            app_router.navigate('groups', {
                                trigger: true
                            });
                        },
                        error: function(model, xhr, options) {}
                    });
                } else {
                    var tmpGroupModel = Backbone.Model.extend({
                        urlRoot: '/api/groups'
                    });
                    group = new tmpGroupModel();
                    group.save({
                        groupname: groupname,
                        gid: gid
                    }, {
                        success: function(model, response, options) {
                            _this.$('#group-create-form :input').tooltip('hide');
                            app_router.navigate('groups', {
                                trigger: true
                            });
                        },
                        error: function(model, xhr, options) {
                            _this.$('#group-create-form :input').tooltip('hide');
                        }
                    });
                }
                return false;
            },
        });
        return this;
    },

    cancel: function() {
        app_router.navigate('groups', {
            trigger: true
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AddPoolView = Backbone.View.extend({
    events: {
        'click #js-cancel': 'cancel',
        'change [class="disk"]': 'updateSelection',
        'change #checkAll': 'selectAllCheckboxes',
        'change #raid_level': 'renderSummary'
    },

    initialize: function () {
        
        this.template = window.JST.pool_add_pool_template;

        // dont paginate disk selection table for now
        //this.pagination_template = window.JST.common_pagination;
        // we do this as a workaround until we fix the add pool form properly.
        // with default page size, only upto 15 drives are shown.
        // @todo: fix this properly.
        this.collection = new DiskCollection();
        this.collection.setPageSize(100);
        this.filteredCollection = new DiskCollection();
        this.collection.on('reset', this.renderDisks, this);
        this.initHandlebarHelpers();
        _.bindAll(this, 'submit');

        // Also respond to selection changes using a collection:
        this.selectedDisks = new DiskCollection();
        this.selectedDisks.on('reset', this.renderSummary, this);

        // Validation
        var err_msg = 'Incorrect number of disks.';
        var raid_err_msg = function() {
            return err_msg;
        };

        $.validator.addMethod('validatePoolName', function (pool_name) {
            if (/^[A-Za-z0-9_.-]+$/.test(pool_name) == false) {
                err_msg = 'Invalid characters in Pool name.';
                return false;
            }
            return true;
        }, raid_err_msg);

        $.validator.addMethod('validateRaid', function (raid_level) {
            var n = $('input:checked.disk').length;
            var min = 1;
            if (raid_level == 'single') {
                err_msg = 'At least one disk is required.';
            } else {
                if (_.contains(['raid0', 'raid1', 'raid5'], raid_level))
                    min = 2;
                else if (raid_level == 'raid6')
                    min = 3;
                else if (raid_level == 'raid10')
                    min = 4;
                err_msg = $.validator.format(
                    'At least {0} disks are required for {1} mode.',
                    min, raid_level
                );
            }
            return n >= min;
        }, raid_err_msg);
    },

    render: function () {
        this.collection.fetch();
        return this;
    },

    renderDisks: function () {
        $(this.el).empty();
        var _this = this;
        this.filteredCollection = _.reject(this.collection.models, function (disk) {
            return _.isNull(disk.get('pool')) &&
                !disk.get('offline') && _.isNull(disk.get('btrfs_uuid')) &&
                isSerialUsable(disk.get('serial')) &&
                isRoleUsable(disk.get('role'));
        });

        // N.B. isSerialUsable() and isRoleUsable() are duplicated in the
        // Backbone Disk model as the property isSerialUsable() isRoleUsable()
        // storageadmin/static/storageadmin/js/models/models.js
        // It would be better not to have this duplication if possible.
        function isSerialUsable(diskSerialNumber) {
            // Simple disk serial validator to return true unless the given disk
            // serial number looks fake or untrustworthy.
            // In the case of a repeat or missing serial scan_disks() will use a
            // placeholder of fake-serial-<uuid4> so look for this signature text.
            if (diskSerialNumber.substring(0, 12) == 'fake-serial-') {
                return false;
            }
            // Observed in a 4 bay ORICO USB 3.0 enclosure that obfuscated all it's
            // disk serial numbers and replaced them with '000000000000'.
            if (diskSerialNumber == '000000000000') {
                return false;
            }
            return true;
        }

        // Using the disk.role system we can filter drives on their usability.
        // Roles for inclusion: openLUKS containers
        // Roles to dismiss: LUKS containers, mdraid members, the 'root' role,
        // and partitions (if not accompanied by a redirect role).
        // Defaults to reject (return false)
        function isRoleUsable(role) {
            // check if our role is null = db default
            // A drive with no role shouldn't present a problem for use.
            if (role == null) {
                return true;
            }
            // try json conversion and return false if it fails
            // @todo not sure if this is redundant?
            try {
                var roleAsJson = JSON.parse(role);
            } catch (e) {
                // as we can't read this drives role we play save and exclude
                // it's isRoleUsable status by false
                return false;
            }
            // We have a json object, look for acceptable roles in the keys
            //
            // Accept use of 'openLUKS' device
            if (roleAsJson.hasOwnProperty('openLUKS')) {
                return true;
            }
            // Accept use of 'partitions' device but only if it is accompanied
            // by a 'redirect' role, ie so there is info to 'redirect' to the
            // by-id name held as the value to the 'redirect' role key.
            if (roleAsJson.hasOwnProperty('partitions') && roleAsJson.hasOwnProperty('redirect')) {
                // then we need to confirm if the fstype of the redirected
                // partition is "" else we can't use it
                if (roleAsJson.partitions.hasOwnProperty(roleAsJson.redirect)) {
                    if (roleAsJson.partitions[roleAsJson.redirect] == '') {
                        return true;
                    }
                }
            }
            // In all other cases return false, ie:
            // reject roles of for example root, mdraid, LUKS,
            // partitioned (when not accompanied by a valid redirect role) etc
            return false;
        }

        this.collection.remove(this.filteredCollection);
        $(_this.el).append(_this.template({
            disks: this.collection.toJSON(),
        }));
        this.renderSummary();

        this.$('#disks-table').tablesorter({
            headers: {
                // assign the first column (we start counting zero)
                0: {
                    // disable it by setting the property sorter to false
                    sorter: false
                },
                // assign the third column (we start counting zero)
                3: {
                    // disable it by setting the property sorter to false
                    sorter: false
                }
            }
        });

        this.$('#add-pool-form input').tooltip({placement: 'right'});

        this.$('#raid_level').tooltip({
            html: true,
            placement: 'right',
            title: 'Software RAID level<br><strong>Single</strong>: No RAID - one or more devices (-m dup enforced).<br><strong>Raid0</strong>, <strong>Raid1</strong>, <strong>Raid10</strong>, and the parity based <strong>Raid5</strong> & <strong>Raid6</strong> levels are all similar to conventional raid but chunk based, not device based. See docs for more info.<br><strong>WARNING: Raid5 and Raid6 are not production-ready</strong>'
        });

        this.$('#compression').tooltip({
            html: true,
            placement: 'right',
            title: 'Choose a Pool compression algorithm.<br><strong>zlib: </strong>slower than lzo but higher compression ratio.<br><strong>lzo: </strong>faster than zlib but lower compression ratio.<br>Pool level compression applies to all it\'s Shares.<br>Alternatively: consider Share level compression.<br>This setting can be changed at any time.'
        });

        $('#add-pool-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                pool_name: 'validatePoolName',
                raid_level: 'validateRaid'
            },
            submitHandler: this.submit
        });

        return this;
    },

    renderSummary: function() {
        // Extract various data from currently selected disks for display
        var diskSizes = this.selectedDisks.map(function(disk) {
            return disk.get('size') * 1024;
        });
        var total = _.reduce(diskSizes, function(total, element) {
            return total + element;
        });
        var sizeCounts = _.countBy(diskSizes, function(size) {
            return size;
        });
        var data = _.map(sizeCounts, function(count, size) {
            return {
                count: count,
                size: humanize.filesize(size),
                sum: humanize.filesize(count * size)
            };
        });
        // Render
        this.$('#selected-disks-table').html(
            window.JST.pool_selected_disks({
                data: data,
                total: humanize.filesize(total)
            })
        );
        // Request usage bound calculation
        if (diskSizes) {
            $.ajax({
                url: '/api/pools/usage_bound',
                contentType: 'application/json',
                data: {
                    disk_sizes: diskSizes,
                    raid_level: $('#raid_level').val()
                }
            })
            .done(function(result) {
                target = $('#usable > b');
                if (result) {
                    target.text(humanize.filesize(result));
                    target.css('color', 'green');
                } else {
                    target.text('Not enough disks selected.');
                    target.css('color', 'red');
                }
            });
        }
        return this;
    },

    updateSelection: function(event) {
        if (!event.currentTarget.checked)
            $('#checkAll').prop('checked', false);
        var checkboxes = $('input:checkbox.disk');
        checkboxes.each(function() {
            $(this).closest('tr').toggleClass('row-highlight', this.checked);
        });
        var diskIds = checkboxes.filter(':checked').map(function() {
            return this.id;
        }).get();
        var disks = _.map(diskIds, function(id) {
            return this.collection.get(id);
        }, this);

        // Update and trigger re-validation of selected raid level
        this.selectedDisks.reset(disks);
        $('#raid_level').valid();
    },

    submit: function() {
        var button = $('#create_pool');
        if (buttonDisabled(button))
            return false;
        disableButton(button);
        var compression = $('#compression').val();
        if (compression == 'no') {
            compression = null;
        }
        var mnt_options = $('#mnt_options').val();
        if (mnt_options == '') {
            mnt_options = null;
        }
        $.ajax({
            url: '/api/pools',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                disks: this.selectedDisks.pluck('name'),
                raid_level: $('#raid_level').val(),
                pname: $('#pool_name').val(),
                compression: compression,
                mnt_options: mnt_options
            })
        })
        .done(function() {
            enableButton(button);
            $('#add-pool-form input').tooltip('hide');
            app_router.navigate('pools', {trigger: true});
        })
        .fail(function() {
            enableButton(button);
        });
    },

    cancel: function (event) {
        event.preventDefault();
        this.$('#add-pool-form :input').tooltip('hide');
        app_router.navigate('pools', {trigger: true});
    },

    selectAllCheckboxes: function(event) {
        $('input:checkbox').prop('checked', $('#checkAll').prop('checked'));
        this.updateSelection(event);
    },

    initHandlebarHelpers: function () {

        asJSON = function (role) {
            // Simple wrapper to test for not null and JSON compatibility,
            // returns the json object if both tests pass, else returns false.
            if (role == null) { // db default
                return false;
            }
            // try json conversion and return false if it fails
            // @todo not sure if this is redundant?
            try {
                return JSON.parse(role);
            } catch (e) {
                return false;
            }
        };

        // Identify Open LUKS container by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isRootDevice'
        Handlebars.registerHelper('isOpenLuks', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('openLUKS')) {
                // Once a LUKS container is open it has a type of crypt
                // and we attribute it the role of 'openLUKS' as a result.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        Handlebars.registerHelper('mathHelper', function (value, options) {
            return parseInt(value) + 1;
        });

        Handlebars.registerHelper('humanReadableSize', function (diskSize) {
            return humanize.filesize(diskSize * 1024);
        });
    }
});
//Add pagination
Cocktail.mixin(AddPoolView, PaginationMixin);


;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */


AddReplicationTaskView = RockstorLayoutView.extend({
    events: {
        'click #js-cancel': 'cancel',
        'change #appliance': 'fetchRemotePools'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.replication_add_replication_task;
        this.shares = new ShareCollection();
        this.shares.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.shares);
        this.appliances = new ApplianceCollection();
        this.dependencies.push(this.appliances);
        this.replicas = new ReplicaCollection();
        this.replica = null; // for new replica tasks.
        this.dependencies.push(this.replicas);
        this.remote_pools = [];

        this.replicaId = this.options.replicaId;

        if (!_.isUndefined(this.replicaId) && !_.isNull(this.replicaId)) {
            this.replica = new Replica({
                id: this.replicaId
            });
            this.dependencies.push(this.replica);
        }
    },

    render: function() {
        this.fetch(this.renderNewReplicationTask, this);
        return this;
    },

    renderNewReplicationTask: function() {
        var _this = this;
        this.freeShares = this.shares.reject(function(share) {
            return !_.isUndefined(_this.replicas.find(function(replica) {
                return replica.get('share') == share.get('name');
            }));
        });
        this.freeShares2 = this.freeShares.map(function(fs) {
            return fs.toJSON();
        });
        if (this.remote_pools.length == 0) {
            this.fetchRemotePools();
        }
        //ip and port of the remote replication service.
        var listener_ip = null;
        var listener_port = 10002;
        var replicaJSON = null;
        if (this.replica) {
            listener_ip = this.replica.get('replicaion_ip');
            listener_port = this.replica.get('remote_port');
            replicaJSON = this.replica.toJSON();
        }

        $(this.el).html(this.template({
            shares: this.freeShares2,
            appliances: this.appliances.toJSON(),
            replica: replicaJSON,
            listener_ip: listener_ip,
            listener_port: listener_port,
            replicaId: this.replicaId,
            remote_pools: this.remote_pools
        }));
        if (!_.isUndefined(this.replicaId) && !_.isNull(this.replica)) {
            var crontab = this.replica.get('crontab');
            $('#cron').cron('value', crontab);
        }

        $('#replication-task-create-form :input').tooltip({
            placement: 'right'
        });

        $('#replication-task-create-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                task_name: 'required',
                pool: 'required',
                frequency: {
                    required: true,
                    number: true
                }
            },
            submitHandler: function() {
                var button = $('#create_replication_task');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var data = _this.$('#replication-task-create-form').getJSON();
                var url, req_type;
                if (_this.replicaId == null) {
                    url = '/api/sm/replicas/';
                    req_type = 'POST';
                } else {
                    url = '/api/sm/replicas/' + _this.replicaId;
                    req_type = 'PUT';
                }
                data.crontab = $('#cron').cron('value');
                $.ajax({
                    url: url,
                    type: req_type,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        enableButton(button);
                        app_router.navigate('replication', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });
                return false;
            }
        });
    },

    fetchRemotePools: function(event) {
        var _this = this;
        var target_appliance = null;
        var ip = $('#appliance').attr('value');
        if (!ip) {
            target_appliance = this.appliances.find(function(a) {
                return !a.get('current_appliance');
            });
        } else {
            target_appliance = this.appliances.find(function(a) {
                return (a.get(ip) == ip);
            });
        }
        var uuid = target_appliance.get('uuid');
        $.ajax({
            url: '/api/sm/replicas/rpool/' + uuid,
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.remote_pools = data;
                _this.renderNewReplicationTask();
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('replication', {
            trigger: true
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AddSambaExportView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel',
        'click #shadow-copy-info': 'shadowCopyInfo',
        'click #shadow_copy': 'toggleSnapPrefix'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.samba_add_samba_export;
        this.shares = new ShareCollection();
        this.users = new UserCollection();
        // dont paginate shares for now
        this.shares.pageSize = RockStorGlobals.maxPageSize;
        this.users.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.shares);
        this.dependencies.push(this.users);
        this.sambaShareId = this.options.sambaShareId || null;
        this.sambaShares = new SambaCollection({sambaShareId: this.sambaShareId});
        this.dependencies.push(this.sambaShares);

        this.yes_no_choices = [
            {name: 'yes', value: 'yes'},
            {name: 'no', value: 'no'},
        ];
        this.initHandlebarHelpers();
    },


    render: function() {
        this.fetch(this.renderSambaForm, this);
        return this;
    },

    renderSambaForm: function() {
        var _this = this;
        this.freeShares = this.shares.reject(function(share) {
            s = this.sambaShares.find(function(sambaShare) {
                return (sambaShare.get('share') == share.get('name'));
            });
            return !_.isUndefined(s);
        }, this);
        //convert array elements into JSON objects
        for(var i = 0; i < this.freeShares.length; i++){
            this.freeShares[i] = this.freeShares[i].toJSON();
        }

        this.sShares = this.shares.reject(function(share) {
            s = this.sambaShares.find(function(sambaShare) {
                return (sambaShare.get('share') != share.get('name'));
            });
            return !_.isUndefined(s);
        }, this);

        //Edit view gets the sambaShareId from initalize function and Null in Add view.
        var sambaShareIdNotNull = false;
        var sambaShareIdNull = false;

        if(this.sambaShareId == null){
            sambaShareIdNull = true;
        }
        if(this.sambaShareId != null){
            this.sShares = this.sambaShares.get(this.sambaShareId);
            sambaShareIdNotNull = true;
        }else{
            this.sShares = null;
        }

        var configList = '',
            smbShareName,
            smbShadowCopy,
            smbComment,
            smbSnapPrefix = '';
        if (this.sShares != null) {
            var config = this.sShares.get('custom_config');
            smbShareName = this.sShares.get('share');
            smbShadowCopy = this.sShares.get('shadow_copy');
            smbComment = this.sShares.get('comment');
            smbSnapPrefix = this.sShares.get('snapshot_prefix');

            for(i=0; i<config.length; i++){
                configList = configList + config[i].custom_config;
                configList += i<config.length - 1 ? '\n' : '';
            }
        }


        var smbSnapshotPrefixBool = false;
        if(sambaShareIdNotNull && smbShadowCopy){
            smbSnapshotPrefixBool = true;
        }
        $(this.el).html(this.template({
            shares: this.freeShares,
            smbShare: this.sShares,
            smbShareName: smbShareName,
            smbShareShadowCopy: smbShadowCopy,
            smbShareComment: smbComment,
            smbShareSnapPrefix: smbSnapPrefix,
            smbSnapshotPrefixRule: smbSnapshotPrefixBool,
            users: this.users,
            configList: configList,
            sambaShareId: this.sambaShareId,
            sambaShareIdNull: sambaShareIdNull,
            sambaShareIdNotNull: sambaShareIdNotNull,
            yes_no_choices: this.yes_no_choices,

        }));
        if(this.sambaShareId == null) {
            this.$('#shares').select2();
        }
        this.$('#admin_users').select2();
        this.$('#add-samba-export-form :input').tooltip({
            html: true,
            placement: 'right'
        });

        $.validator.setDefaults({ ignore: ':hidden:not(select)' });

        $('#add-samba-export-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                shares: 'required',
                snapshot_prefix: {
                    required: {
                        depends: function(element) {
                            return _this.$('#shadow_copy').prop('checked');
                        }
                    }
                }
            },

            submitHandler: function() {
                var button = $('#create-samba-export');
                var custom_config = _this.$('#custom_config').val();
                var entries = [];
                if (!_.isNull(custom_config) && custom_config.trim() != '') entries = custom_config.trim().split('\n');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/samba';
                if(_this.sambaShareId != null){
                    submitmethod = 'PUT';
                    posturl += '/'+_this.sambaShareId;
                }
                var data = _this.$('#add-samba-export-form').getJSON();
                data.custom_config = entries;
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        enableButton(button);
                        _this.$('#add-samba-export-form :input').tooltip('hide');
                        app_router.navigate('samba-exports', {trigger: true});
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        this.$('#add-samba-export-form :input').tooltip('hide');
        app_router.navigate('samba-exports', {trigger: true});
    },

    shadowCopyInfo: function(event) {
        event.preventDefault();
        $('#shadow-copy-info-modal').modal({
            keyboard: false,
            show: false,
            backdrop: 'static'
        });
        $('#shadow-copy-info-modal').modal('show');
    },

    toggleSnapPrefix: function() {
        var cbox = this.$('#shadow_copy');
        if (cbox.prop('checked')) {
            this.$('#snapprefix-ph').css('visibility', 'visible');
        } else {
            this.$('#snapprefix-ph').css('visibility', 'hidden');
        }
    },

    initHandlebarHelpers: function(){
        Handlebars.registerHelper('display_adminUser_options', function(){
            var html = '';
            var _this = this;
            this.users.each(function(user, index) {
                var userName = user.get('username');
                html += '<option value="' + userName + '"';
                if (_this.sambaShareIdNotNull && _this.smbShare.get('admin_users').length > 0) {
                    for(i=0; i< _this.smbShare.get('admin_users').length; i++){
                        if(_this.smbShare.get('admin_users')[i].username == userName){
                            html += 'selected= "selected"';
                        }
                    }

                }
                html += '>' + userName + '</option>';
            });

            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('display_options', function(inputOption){
            var html = '';
            var _this = this;
            _.each(this.yes_no_choices, function(c) {
                var choiceValue = c.value,
                    choiceName = c.name;

                html += '<label class="radio-inline"><input type="radio" name="'+ inputOption + '" value="' + choiceValue + '"';

                if (_this.sambaShareIdNotNull){ //edit samba export functionality
                    if(choiceValue == _this.smbShare.get(inputOption)){
                        html += 'checked';
                    }
                }else { // add export functionality
                    if(inputOption == 'browsable'){
                        if(choiceValue == 'yes'){
                            html += 'checked';
                        }
                    }else if(choiceValue == 'no'){ // when the inputOptions are 'guest_ok' and 'read_only' default value is 'NO'
                        html += 'checked';
                    }
                }
                html += '>' + choiceName + '</label>';
            });

            return new Handlebars.SafeString(html);
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */


AddScheduledTaskView = RockstorLayoutView.extend({
    events: {
        'click #js-cancel': 'cancel',
        'change #task_type': 'renderOptionalFields',
        'click #wakeup': 'switchRtcFields'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.scheduled_tasks_add_task;
        this.snapshotFieldsTemplate = window.JST.scheduled_tasks_snapshot_fields;
        this.scrubFieldsTemplate = window.JST.scheduled_tasks_scrub_fields;
        this.shutdownFieldsTemplate = window.JST.scheduled_tasks_shutdown_fields;
        this.shares = new ShareCollection();
        this.pools = new PoolCollection();
        this.shares.pageSize = RockStorGlobals.maxPageSize;
        this.pools.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.shares);
        this.dependencies.push(this.pools);
        this.taskDefId = this.options.taskDefId;
        this.taskTypes = [
            {name: 'scrub', description: 'Btrfs Scrub'},
            {name: 'snapshot', description: 'Btrfs Snapshot'},
            {name: 'reboot', description: 'System Reboot'},
            {name: 'shutdown', description: 'System Shutdown'},
            {name: 'suspend', description: 'System Suspend'}
            //{name: 'custom', description: 'User Custom Task'}
        ];
        if (!_.isUndefined(this.taskDefId) && !_.isNull(this.taskDefId)) {
            this.taskDef = new TaskDef({id: this.taskDefId});
            this.dependencies.push(this.taskDef);
        }
        if (this.taskDefId == null) {
            this.taskDefIdNull = true;
        } else {
            this.taskDefIdNull = false;
        }
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderNewScheduledTask, this);
        return this;
    },

    renderNewScheduledTask: function() {
        if (this.taskDef) {
            var taskObj = {
                name: this.taskDef.get('name'),
                type: this.taskDef.get('task_type'),
                share: this.taskDef.share(),
                share_name: this.taskDef.get('share_name'),
                prefix: this.taskDef.prefix(),
                pool: this.taskDef.pool(),
                pool_name: this.taskDef.get('pool_name'),
                maxCount: this.taskDef.max_count(),
                visible: this.taskDef.visible(),
                writable: this.taskDef.writable(),
                enabled: this.taskDef.get('enabled'),
                wakeup: this.taskDef.wakeup(),
                rtcHour: this.taskDef.rtc_hour(),
                rtcMinute: this.taskDef.rtc_minute()
            };
        // Hacking Handlebars registerPartial normal usage
        // Handlebars has registerPartial to help with nested templates
        // inside another template (ex. Person template having sub-templates
        // Job, Hobbies, etc). Handlebars.registerPartial(partial, value) with
        // typeOf(value) == string, while we use value for strings and bools.
        // Previous version of task page had a "master" part plus
        // optional-fields div filled only for new tasks, relaying on a messy
        // general part (if new task -> normal, else render optional-fields)
        // Now we go with full optional-fields use, serving both when adding
        // new tasks and when editing existing tasks

        // Define taskObj fields having booleans (html checked checkboxes)
        // requiring conversion to string value checked
            var bool_fields = ['visible', 'writable', 'enabled', 'wakeup'];

        // Loop over taskObj and build Partials like taskObj.key so
        // we just have to move fro {{taskObj.field_name}} to
        // {{> taskObj.field_name}} <- check Handlebars ref for
        // furgher infos. While on loop if we found a bool we fix it,
        // else we have key val to string or empty string, because
        // registerPartial does not accept undefined vals
            _.each(taskObj, function(val, key) {
                var partial_name = 'taskObj.' + key;
                var partial_value;
                if (_.contains(bool_fields, key)) {
                    partial_value = val ? 'checked' : '';
                } else {
                    partial_value = val != null ? val.toString() : '';
                }
                Handlebars.registerPartial(partial_name, partial_value);
            });
        
        }
        var _this = this;
        $(this.el).html(this.template({
            shares: this.shares,
            pools: this.pools,
            taskTypes: this.taskTypes,
            taskDef: this.taskDef,
            taskDefId: this.taskDefId,
            taskDefIdNull: this.taskDefIdNull
        }));
        if (!_.isUndefined(this.taskDefId) && !_.isNull(this.taskDefId)) {
            var crontab = this.taskDef.get('crontab');
            $('#cron').cron('value', crontab);
            var crontabwindow = _.isNull(this.taskDef.get('crontabwindow')) ? '*-*-*-*-*-*' : this.taskDef.get('crontabwindow'); // render execution window, on null set to *-*-*-*-*-*
            $('#cron-window').cron_window('value', crontabwindow);
        }
        this.renderOptionalFields();
        this.$('#start_date').datepicker();
        this.validator = $('#scheduled-task-create-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                name: 'required',
                start_date: 'required',
                frequency: {
                    required: true,
                    number: true,
                    min: 1
                },
                share: {
                    required: {
                        depends: function(element) {
                            return (_this.$('#task_type').val() == 'snapshot');
                        }
                    }
                },
                'meta.share_name': {
                    required: {
                        depends: function(element) {
                            return (_this.$('#task_type').val() == 'snapshot');
                        }
                    }
                },
                'meta.prefix': {
                    required: {
                        depends: function(element) {
                            return (_this.$('#task_type').val() == 'snapshot');
                        }
                    }
                },
                'meta.max_count': {
                    number: true,
                    min: 1,
                    required: {
                        depends: function(element) {
                            return (_this.$('#task_type').val() == 'snapshot');
                        },

                    }
                },
                pool: {
                    required: {
                        depends: function(element) {
                            return (_this.$('#task_type').val() == 'scrub');
                        }
                    }
                },
                'meta.pool_name': {
                    required: {
                        depends: function(element) {
                            return (_this.$('#task_type').val() == 'scrub');
                        }
                    }
                }
            },
            submitHandler: function() {
                var button = $('#create-scheduled-task');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var data = _this.$('#scheduled-task-create-form').getJSON();
                var url, req_type;
                if (_this.taskDefId == null) {
                    url = '/api/sm/tasks/';
                    req_type = 'POST';
                } else {
                    url = '/api/sm/tasks/' + _this.taskDefId;
                    req_type = 'PUT';
                }
                data.crontab = $('#cron').cron('value');
                data.crontabwindow = $('#cron-window').cron_window('value'); // post execution window value
                $.ajax({
                    url: url,
                    type: req_type,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        enableButton(button);
                        app_router.navigate('scheduled-tasks', {trigger: true});
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });
                return false;
            }
        });
    },

    renderOptionalFields: function() {
        var taskType = null;
        if (this.taskDefId == null) {
            taskType = this.$('#task_type').val();
        } else {
            taskType = this.taskDef.get('task_type');
        }
        if (taskType == 'snapshot') {
            this.$('#optional-fields').html(this.snapshotFieldsTemplate({
                shares: this.shares.toJSON(),
                taskDef: this.taskDef,
                taskDefId: this.taskDefId,
                taskDefIdNull: this.taskDefIdNull,
                taskMaxCount: this.taskMaxCount,
            }));
        } else if (taskType == 'scrub') {
            this.$('#optional-fields').html(this.scrubFieldsTemplate({
                pools: this.pools.toJSON(),
                taskDef: this.taskDef,
                taskDefId: this.taskDefId,
                taskDefIdNull: this.taskDefIdNull,
            }));
        } else if (taskType == 'shutdown' || taskType == 'suspend') {
            this.$('#optional-fields').html(this.shutdownFieldsTemplate({
                taskDef: this.taskDef,
                taskDefId: this.taskDefId,
                taskDefIdNull: this.taskDefIdNull,
            }));
            this.rendergentleSelect('rtc_hour');
            this.rendergentleSelect('rtc_minute');
            if (this.taskDefId == null && taskType == 'suspend') {
                this.$('#wakeup').click()
                                 .prop('disabled', true);
            }
            if (this.taskDefId != null && this.taskDef.wakeup()) {
                this.$('#rtc_hour').val(this.taskDef.rtc_hour()).gentleSelect('update');
                this.$('#rtc_minute').val(this.taskDef.rtc_minute()).gentleSelect('update');
                this.$('#wakeup').click();
            }
        } else {
            this.$('#optional-fields').empty();
        }
        // Render warning about rtc wakeup to be checked
        if (taskType == 'shutdown' || taskType == 'suspend') {
            var html = '';
            html += '<div class="alert alert-warning">';
            html += 'Please check and test your system RTC WAKEUP capabilities before setting a suspend/shutdown task</div>';
            this.$('.messages').html(html);
        } else {
            this.$('.messages').empty();
        }
		// Reattach tooltips
        this.$('#scheduled-task-create-form :input').tooltip({
            placement: 'right'
        });
    },

    // Render rtc wake clock selects adding gentleSelect beautifier
    rendergentleSelect: function(field_name) {
        if (field_name == 'rtc_hour') {
            itemwidth = 20;
            columns = 2;
            title = 'Wake up Time: Hour';
        } else {
            itemwidth = 30;
            columns = 4;
            title = 'Wake up Time: Minute';
        }
        this.$('#' + field_name).gentleSelect({
            itemWidth: itemwidth,
            columns: columns,
            title: title
        });
    },

    switchRtcFields: function () {
        // Adding some animation, on enable rtc wake up
        // checked true/false toggle rtc clock fields
        this.$('#rtc_container').fadeToggle(500);
    },

    initHandlebarHelpers: function(){

        // Handlebars helper creating rtc clock hours and mins options
        Handlebars.registerHelper('time_select', function(field_name) {
            var html = '';
            var time_iterator;
            if (field_name == 'rtc_hour') {
                time_iterator = 24;
            } else if (field_name == 'rtc_minute') {
                time_iterator = 60;
            }
            for (var i = 0; i < time_iterator; i++) {
                html += '<option value="' + i + '">';
                html += i < 10 ? '0' + i : i;
                html += '</option>';
            }
            return new Handlebars.SafeString(html);
        });
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('scheduled-tasks', {trigger: true});
    },
});

;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

AddSFTPShareView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.sftp_add_sftp_share;
        this.shares = new ShareCollection();
        // dont paginate shares for now
        this.shares.pageSize = 1000;
        this.dependencies.push(this.shares);
        this.sftpShares = new SFTPCollection();
        this.dependencies.push(this.sftpShares);
        this.modify_choices = [{
            name: 'ro',
            value: 'ro'
        },
        {
            name: 'rw',
            value: 'rw'
        },
        ];
    },

    render: function() {
        this.fetch(this.renderSFTPForm, this);
        return this;
    },

    renderSFTPForm: function() {
        var _this = this;
        this.freeShares = this.shares.reject(function(share) {
            s = this.sftpShares.find(function(sftpShare) {
                return (sftpShare.get('share') == share.get('name'));
            });
            return !_.isUndefined(s);
        }, this);
        //convert each freeshare into a JSON object
        for (var i = 0; i < this.freeShares.length; i++) {
            this.freeShares[i] = this.freeShares[i].toJSON();
        }
        $(this.el).html(this.template({
            shares: this.freeShares,
        }));
        this.$('#shares').select2();

        $('#add-sftp-share-form :input').tooltip();
        $.validator.setDefaults({
            ignore: ':hidden:not(select)'
        });

        $('#add-sftp-share-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                shares: 'required',
            },

            submitHandler: function() {
                var button = $('#create-sftp-share');
                if (buttonDisabled(button)) return false;
                var data = _this.$('#add-sftp-share-form').getJSON();
                if (data['read_only'] == 'false') {
                    delete data['read_only'];
                } else {
                    data['read_only'] = true;
                }
                disableButton(button);
                $.ajax({
                    url: '/api/sftp',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        enableButton(button);
                        app_router.navigate('sftp', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('sftp', {
            trigger: true
        });
    },
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

/*
 * Add Share View
 */

AddShareView = Backbone.View.extend({
    events: {
        'click #js-cancel': 'cancel'
    },

    initialize: function() {
        var _this = this;
        this.pools = new PoolCollection();
        this.pools.pageSize = RockStorGlobals.maxPageSize;
        this.preSelectedPoolName = this.options.poolName || null;
        this.tickFormatter = function(d) {
            var formatter = d3.format(',.1f');
            if (d > 1024) {
                return formatter(d / (1024)) + ' TB';
            } else {
                return formatter(d) + ' GB';
            }
        };
        this.slider = null;
        this.sliderCallback = function(slider) {
            var value = slider.value();
            _this.$('#share_size').val(_this.tickFormatter(value));
        };
        this.initHandlebarHelpers();
    },

    render: function() {
        $(this.el).empty();
        this.template = window.JST.share_add_share_template;
        var _this = this;
        this.pools.fetch({
            success: function(collection, response) {
                $(_this.el).append(_this.template({
                    pools: _this.pools,
                    poolName: _this.poolName
                }));

                var err_msg = '';
                var name_err_msg = function() {
                    return err_msg;
                };

                $.validator.addMethod('validateShareName', function(value) {
                    var share_name = $('#share_name').val();
                    if (/^[A-Za-z0-9_.-]+$/.test(share_name) == false) {
                        err_msg = 'Please enter a valid share name ';
                        return false;
                    }
                    return true;
                }, name_err_msg);

                _this.renderSlider();
                _this.$('#pool_name').change(function() {
                    _this.renderSlider();
                    _this.$('#share_size').val(_this.tickFormatter(1));
                });


                _this.$('#share_size').val(_this.tickFormatter(1));
                _this.$('#share_size').change(function() {
                    var size = this.value;
                    var size_value = size;

                    var sizeFormat = size.replace(/[^a-z]/gi, '');
                    if (sizeFormat != '') {
                        var size_array = size.split(sizeFormat);
                        size_value = size_array[0];
                    }

                    if (sizeFormat == 'TB' || sizeFormat == 'tb' || sizeFormat == 'Tb') {
                        size_value = size_value * 1024;
                        _this.slider.setValue((size_value) * 1024);
                    } else if (sizeFormat == 'GB' || sizeFormat == 'gb' || sizeFormat == 'Gb') {
                        _this.slider.setValue((size_value));
                    } else {
                        _this.slider.setValue((size_value));
                    }
                });



                $('#add-share-form input').tooltip({
                    placement: 'right'
                });

                _this.$('#compression').tooltip({
                    html: true,
                    placement: 'right',
                    title: 'Choose a compression algorithm for this Share. By default, parent pool\'s compression algorithm is applied.<br> If you like to set pool wide compression, don\'t choose anything here. If you want finer control of this particular Share\'s compression algorithm, you can set it here.<br><strong>zlib: </strong>slower than lzo but higher compression ratio.<br><strong>lzo: </strong>faster than zlib but lower compression ratio.'
                });

                $('#add-share-form').validate({
                    onfocusout: false,
                    onkeyup: false,
                    rules: {
                        share_name: 'validateShareName',
                        share_size: {
                            required: true
                        },
                    },

                    submitHandler: function() {
                        var button = _this.$('#create_share');
                        if (buttonDisabled(button)) return false;
                        disableButton(button);
                        var share_name = $('#share_name').val();
                        var pool_name = $('#pool_name').val();
                        var compression = $('#compression').val();
                        if (compression == 'no') {
                            compression = null;
                        }
                        var size = $('#share_size').val();
                        var sizeFormat = size.replace(/[^a-z]/gi, '');
                        var size_array = size.split(sizeFormat);
                        //New size_value replace commas granting avoid NaN
                        //and use *1 to number conversion instead of Math.Round
                        //to preserve user defined decimals
                        var size_value = size_array[0].replace(/,/, '') * 1;

                        if (sizeFormat == 'TB' || sizeFormat == 'tb' || sizeFormat == 'Tb') {
                            size_value = size_value * 1024 * 1024 * 1024;
                        } else if (sizeFormat == 'GB' || sizeFormat == 'gb' || sizeFormat == 'Gb') {
                            size_value = size_value * 1024 * 1024;
                        } else {
                            size_value = size_value * 1024 * 1024;
                        }
                        $.ajax({
                            url: '/api/shares',
                            type: 'POST',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                sname: share_name,
                                'pool': pool_name,
                                'size': size_value,
                                'compression': compression,
                            }),
                            success: function() {
                                enableButton(button);
                                _this.$('#add-share-form :input').tooltip('hide');
                                app_router.navigate('shares', {
                                    trigger: true
                                });
                            },
                            error: function(xhr, status, error) {
                                enableButton(button);
                                console.log(error);
                            },
                        });
                    }
                });
            }
        });
        return this;
    },

    renderSlider: function() {
        var pool_name = this.$('#pool_name').val();
        var selectedPool = this.pools.find(function(p) {
            return p.get('name') == pool_name;
        });
        //var max = (selectedPool.get('free') + selectedPool.get('reclaimable')) / (1024*1024);
        var min = 0;
        var ticks = 3;
        var value = 1;
        var gb = 1024 * 1024;
        var max = Math.round(selectedPool.get('size') / gb);
        var reclaimable = (selectedPool.get('reclaimable') / gb).toFixed(1);
        var free = (selectedPool.get('free') / gb).toFixed(1);
        var used = ((selectedPool.get('size') -
            selectedPool.get('reclaimable') -
            selectedPool.get('free')) / gb).toFixed(1);

        this.$('#slider').empty();
        this.slider = d3.slider2().min(min).max(max).ticks(ticks).tickFormat(this.tickFormatter).value(value).reclaimable(reclaimable).used(used).callback(this.sliderCallback);
        d3.select('#slider').call(this.slider);
        this.$('#legend-free-num').html('(' + free + ' GB)');
        this.$('#legend-reclaimable-num').html('(' + reclaimable + ' GB)');
        this.$('#legend-used-num').html('(' + used + ' GB)');
    },

    cancel: function(event) {
        event.preventDefault();
        this.$('#add-share-form :input').tooltip('hide');
        app_router.navigate('shares', {
            trigger: true
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('print_pool_names', function() {
            var html = '';
            if (this.preSelectedPoolName) {
                this.pools.each(function(pool, index) {
                    var poolName = pool.get('name');
                    if (preSelectedPoolName != pool.get('name')) {
                        html += '<option value="' + poolName + '">' + poolName + '</option>';
                    } else {
                        html += '<option value="' + preSelectedPoolName + '" selected="selected">' + preSelectedPoolName + '</option>';
                    }
                });
            } else {
                this.pools.each(function(pool, index) {
                    var poolName = pool.get('name');
                    //the pool with index zero is selected by default
                    if (index == 0) {
                        html += '<option value="' + poolName + '" selected="selected">' + poolName + '</option>';
                    } else {
                        html += '<option value="' + poolName + '">' + poolName + '</option>';
                    }
                });
            }
            return new Handlebars.SafeString(html);
        });

    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AddUserView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.users_add_user;
        this.username = this.options.username;
        if (!_.isUndefined(this.username)) {
            this.user = new User({
                username: this.username
            });
            this.dependencies.push(this.user);
        } else {
            this.user = new User();
        }
        this.groups = new GroupCollection();
        this.groups.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.groups);
    },

    render: function() {
        this.fetch(this.renderUserForm, this);
        return this;
    },

    renderUserForm: function() {
        var _this = this;
        $(this.el).html(this.template({
            username: this.username,
            user: this.user.toJSON(),
            groups: this.groups.toJSON(),
            shells: ['/bin/bash', '/sbin/nologin']

        }));

        this.$('#user-create-form :input').tooltip({
            placement: 'right'
        });
        this.$('#group').select2();

        this.validator = this.$('#user-create-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                username: 'required',
                password: {
                    required: {
                        depends: function(element) {
                            return _this.username == null || _this.username == undefined;
                        }
                    }
                },
                password_confirmation: {
                    required: {
                        depends: function(element) {
                            return _this.username == null || _this.username == undefined;
                        }
                    },
                    equalTo: '#password'
                }
            },
            messages: {
                password_confirmation: {
                    equalTo: 'The passwords do not match'
                }
            },

            submitHandler: function() {
                var username = _this.$('#username').val();
                var password = _this.$('#password').val();
                var admin = _this.$('#admin').prop('checked');
                var shell = _this.$('#shell').val();

                var public_key = _this.$('#public_key').val();
                if (_.isEmpty(public_key)) {
                    public_key = null;
                }
                var uid = _this.$('#uid').val();
                if (_.isEmpty(uid)) {
                    uid = null;
                }
                var group = _this.$('#group').val();
                if (group == 'Autogenerate') {
                    group = null;
                }
                var email = _this.$('#email').val();
                if (_.isEmpty(email)) {
                    email = null;
                }
                if (_this.username != null && _this.username != undefined) {
                    if (!_.isEmpty(password)) {
                        _this.user.set({
                            password: password
                        });
                    } else {
                        _this.user.unset('password');
                    }
                    if (!_.isEmpty(public_key)) {
                        _this.user.set({
                            public_key: public_key
                        });
                    } else {
                        _this.user.unset('public_key');
                    }

                    _this.user.set({
                        admin: admin
                    });
                    _this.user.set({
                        group: group
                    });
                    _this.user.set({
                        shell: shell
                    });
                    _this.user.set({
                        email: email
                    });
                    _this.user.save(null, {
                        success: function(model, response, options) {
                            app_router.navigate('users', {
                                trigger: true
                            });
                        },
                        error: function(model, xhr, options) {}
                    });
                } else {
                    // create a dummy user model class that does not have idAttribute
                    // = username, so backbone will treat is as a new object,
                    // ie isNew will return true
                    var tmpUserModel = Backbone.Model.extend({
                        urlRoot: '/api/users'
                    });
                    var user = new tmpUserModel();
                    user.save({
                        username: username,
                        password: password,
                        admin: admin,
                        group: group,
                        shell: shell,
                        uid: uid,
                        public_key: public_key,
                        email: email
                    }, {
                        success: function(model, response, options) {
                            _this.$('#user-create-form :input').tooltip('hide');
                            app_router.navigate('users', {
                                trigger: true
                            });
                        },
                        error: function(model, xhr, options) {
                            _this.$('#user-create-form :input').tooltip('hide');
                        }
                    });
                }
                return false;
            }
        });
        return this;
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('users', {
            trigger: true
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AFPView = RockstorLayoutView.extend({
    events: {
        'switchChange.bootstrapSwitch': 'switchStatus',
        'click .delete-afp-share': 'deleteAFP'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.afp_afp;
        this.module_name = 'afp';
        this.collection = new AFPCollection();
        this.dependencies.push(this.collection);
        this.serviceName = 'netatalk';
        this.service = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.service);
        this.shares = new ShareCollection();
        this.dependencies.push(this.shares);
        this.updateFreq = 5000;
    },

    render: function() {
        var _this = this;
        this.fetch(this.renderAFP, this);
        return this;
    },

    renderAFP: function() {
        this.freeShares = this.shares.reject(function(share) {
            s = this.collection.find(function(afpShare) {
                return (afpShare.get('share') == share.get('name'));
            });
            return !_.isUndefined(s);
        }, this);

        //check if there are shares in the system
        var sharesExistBool = false;
        if (this.shares.length > 0) {
            sharesExistBool = true;
        }
        //check if there are free shares not associated with afp.
        var freeSharesBool = false;
        if (this.freeShares) {
            freeSharesBool = true;
        }
        //set a variable to true if both conditions are satisfied
        var verifySharesBool = false;
        if (freeSharesBool && sharesExistBool) {
            verifySharesBool = true;
        }

        $(this.el).html(this.template({
            afpShare: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            freeShares: this.freeShares,
            sharesNotEmpty: verifySharesBool,
            service: this.service
        }));

        this.renderDataTables();

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('input[name="afp-service-checkbox"]').bootstrapSwitch('state', this.service.get('status'), true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        // Display NFS Export Service Warning
        if (!this.service.get('status')) {
            this.$('#afp-warning').show();
        } else {
            this.$('#afp-warning').hide();
        }
    },

    switchStatus: function(event, state) {
        if (state) {
            this.startService();
        } else {
            this.stopService();
        }
    },

    deleteAFP: function(event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Are you sure you want to stop exporting this share via AFP?')) {
            disableButton(button);
            var id = $(event.currentTarget).data('id');

            $.ajax({
                url: '/api/netatalk/' + id,
                type: 'DELETE',
                dataType: 'json',
                contentType: 'application/json',
                success: function() {
                    _this.render();
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });

        }
    },

    startService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/netatalk/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#afp-warning').hide();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(serviceName, xhr);
                _this.$('#afp-warning').show();
            }
        });
    },

    stopService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/netatalk/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#afp-warning').show();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('#afp-warning').hide();
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

AppliancesView = RockstorLayoutView.extend({

    events: {
        'click .delete-appliance': 'deleteAppliance'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.collection = new ApplianceCollection();
        this.template = window.JST.appliances_appliances;
        this.new_appliance_template = window.JST.common_new_appliance;
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderApplianceList, this);
    },

    render: function() {
        this.fetch(this.renderApplianceList, this);
        return this;
    },

    renderApplianceList: function() {
        $(this.el).html(this.template({
            collection: this.collection,
            appliances: this.collection.toJSON()
        }));
        this.renderDataTables();

        /* Use X-editable js library for editing the Hostname inline. */

        $.fn.editable.defaults.mode = 'inline';
        var dataAppId = $('#hostname').data('id');
        $('#hostname').editable({
            type: 'text',
            title: 'Edit Hostname',
            //handle an empty input
            validate: function(newHostname) {
                if ($.trim(newHostname) == '') {
                    return 'This field is required';
                }
            },
            success: function(response, newHostname) {
                var data = {
                    'hostname': newHostname
                };
                $.ajax({
                    url: '/api/appliances/' + dataAppId,
                    type: 'PUT',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        setApplianceName();
                    },
                });
            }
        });
    },

    newAppliance: function() {
        this.$('#new-appliance-container').html(this.new_appliance_template());
    },

    deleteAppliance: function(event) {
        var _this = this;
        event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        var appliance = new Appliance();
        appliance.set({
            ip: button.attr('id'),
            id: button.attr('data-id')
        });
        if (confirm('Delete appliance:  ' + appliance.get('ip') + ' ...Are you sure?')) {
            disableButton(button);
            appliance.destroy({
                success: function(model, response, options) {
                    enableButton(button);
                    _this.collection.fetch();
                },
                error: function(model, xhr, options) {
                    enableButton(button);
                    var msg = xhr.responseText;
                }
            });
        }
    },
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

BlinkDiskView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.disk_blink_disks;
        this.disks = new DiskCollection();
        this.diskId = this.options.diskId;
        this.dependencies.push(this.disks);
    },

    render: function() {
        this.fetch(this.renderDisksForm, this);
        return this;
    },

    renderDisksForm: function() {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var _this = this;
        var disk_id = this.diskId;
        var diskObj = this.disks.find(function(d) {
            return (d.get('id') == disk_id);
        });
        var diskName = diskObj.get('name');
        var serialNumber = diskObj.get('serial');

        $(this.el).html(this.template({
            diskName: diskName,
            serialNumber: serialNumber
        }));

        this.$('#add-blink-disk-form :input').tooltip({
            html: true,
            placement: 'right'
        });

        var err_msg = '';
        var raid_err_msg = function() {
            return err_msg;
        };

        $.validator.addMethod('validateTotalTime', function(value) {
            var total_time = $('#total_time').val();

            if (total_time == '') {
                err_msg = 'Please enter Total time';
                return false;
            } else
            if (total_time > 90) {
                err_msg = 'Total time must not exceed more than 90 sec';
                return false;
            } else
            if (/^[0-9\b]+$/.test(total_time) == false) {
                err_msg = 'Total time must be an number and must be less than 90';
                return false;
            }

            return true;
        }, raid_err_msg);

        $.validator.addMethod('validateBlinkTime', function(value) {
            var blink_time = $('#blink_time').val();
            var total_time = $('#total_time').val();

            if (blink_time == '') {
                err_msg = 'Please enter Blink time';
                return false;
            } else
            if (blink_time > total_time) {
                err_msg = 'Blink time must not exceed total time';
                return false;
            } else
            if (/^[0-9\b]+$/.test(blink_time) == false) {
                err_msg = 'Blink time must be an number and must be less than total time';
                return false;
            }

            return true;
        }, raid_err_msg);

        $.validator.addMethod('validateSleepTime', function(value) {
            var sleep_time = $('#sleep_time').val();
            var total_time = $('#total_time').val();

            if (sleep_time == '') {
                err_msg = 'Please enter Sleep time';
                return false;
            } else
            if (sleep_time > total_time) {
                err_msg = 'Sleep time must not exceed total time';
                return false;
            } else
            if (/^[0-9\b]+$/.test(sleep_time) == false) {
                err_msg = 'Sleep time must be an number and must be less than 90';
                return false;
            }

            return true;
        }, raid_err_msg);

        this.$('#add-blink-disk-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                total_time: 'validateTotalTime',
                blink_time: 'validateBlinkTime',
                sleep_time: 'validateSleepTime'
            },

            submitHandler: function() {
                var button = $('#blink-disk');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/disks/' + disk_id + '/blink-drive';
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#add-blink-disk-form').getJSON()),
                    success: function() {
                        enableButton(button);
                        _this.$('#add-blink-disk-form :input').tooltip('hide');
                        app_router.navigate('disks', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        this.$('#add-blink-disk-form :input').tooltip('hide');
        app_router.navigate('disks', {
            trigger: true
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2015 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ConfigBackupView = RockstorLayoutView.extend({
    events: {
        'click #new_backup': 'newBackup',
        'click .cb-delete': 'deleteBackup',
        'click .cb-restore': 'restoreBackup',
        'click #upload-button': 'uploadConfig'
    },
    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.cb_cb;
        this.cb_table_template = window.JST.cb_cb_table;
        this.collection = new ConfigBackupCollection();
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderConfigBackups, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.collection.fetch();
        return this;
    },

    renderConfigBackups: function() {
        $(this.el).html(this.template({
            collection: this.collection
        }));
        this.$('#cb-table-ph').html(this.cb_table_template({
            configBackup: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
        }));

        this.renderDataTables();
    },

    newBackup: function() {
        var _this = this;
        var button = _this.$('#new-backup');
        if (buttonDisabled(button)) return false;
        disableButton(button);
        $.ajax({
            url: '/api/config-backup',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            success: function() {
                enableButton(button);
                _this.collection.fetch({
                    reset: true
                });
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
        return this;
    },

    deleteBackup: function(event) {
        event.preventDefault();
        var _this = this;
        var cbid = $(event.currentTarget).attr('data-id');
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Are you sure about deleting this backup?')) {
            disableButton(button);
            $.ajax({
                url: '/api/config-backup/' + cbid,
                type: 'DELETE',
                success: function() {
                    enableButton(button);
                    _this.collection.fetch({
                        reset: true
                    });
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
        return this;
    },

    restoreBackup: function(event) {
        event.preventDefault();
        var _this = this;
        var cbid = $(event.currentTarget).attr('data-id');
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Are you sure about restoring config with this backup?')) {
            disableButton(button);
            $.ajax({
                url: '/api/config-backup/' + cbid,
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({
                    'command': 'restore'
                }),
                success: function() {
                    enableButton(button);
                    _this.collection.fetch({
                        reset: true
                    });
                    alert('Config restoration started. It may take a bit to propagate.');
                },
                error: function(error) {
                    alert('Error with restoring the config backup.');
                    enableButton(button);
                }
            });
        }
        return this;
    },
    getCookie: function(name) {
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    },
    uploadConfig: function(event) {
        /* This hand submits the form. The code should feel straightforward
         * One note...the send() prototype is being proxied as other functions
         * rely on it later in the code.
         */
        event.preventDefault();

        // Grab the file from the input
        var fileSelect = this.$('#file-select')[0];
        var uploadButton = this.$('#upload-button')[0];
        var send = XMLHttpRequest.prototype.send;
        var token = this.getCookie('csrftoken');

        // Save the original function to replace it later
        var originalSend = XMLHttpRequest.prototype.send;

        // Update the prototype of send to include the CSRF token
        XMLHttpRequest.prototype.send = function(data) {
            this.setRequestHeader('X-CSRFToken', token);
            return send.apply(this, arguments);
        };

        var file = fileSelect.files;
        var formData = new FormData();
        // Alert the user that they must attach file
        if (file.length < 1) {
            alert('Please choose a config file');
            // If things go wrong, put the original 'send' function back
            XMLHttpRequest.prototype.send = originalSend;
            return;
        }
        formData.append('file', file[0]);
        formData.append('file-name', file[0].name);
        var xhr = new XMLHttpRequest();

        xhr.open('POST', '/api/config-backup/file-upload', true);
        var _this = this;
        xhr.onload = function() {
            if (xhr.status == 200) {
                // use jquery here to show success to user
                // add to the collection and then rerender
                _this.collection.fetch({
                    reset: true
                });
            } else {
                alert(xhr.response);
            }
        };
        xhr.send(formData);
        // Replace the original function
        XMLHttpRequest.prototype.send = originalSend;
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('humanReadableSize', function(size) {
            return humanize.filesize(size);
        });
    }
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ConfigureServiceView = RockstorLayoutView.extend({

    events: {
        'click #cancel': 'cancel',
        'click #security': 'toggleFormFields',
        'click #enabletls': 'toggleCertUrl',
        'click #mode': 'toggleNutFields'
    },

    initialize: function() {
        // call initialize of base
        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.serviceName = this.options.serviceName;
        this.adStatus = this.options.adStatus;
        // set template
        this.template = window.JST['services_configure_' + this.serviceName];
        this.rules = {
            ntpd: {
                server: 'required'
            },
            smb: {
                workgroup: 'required'
            },
            nis: {
                domain: 'required',
                server: 'required'
            },
            snmpd: {
                syslocation: 'required',
                syscontact: 'required',
                rocommunity: 'required'
            },
            ldap: {
                server: 'required',
                basedn: 'required',
                cert: {
                    required: {
                        depends: function(element) {
                            return _this.$('#enabletls').prop('checked');
                        }
                    }
                }
            },
            docker: {
                rootshare: 'required'
            },
            nut: {
                mode: 'required',
                upsmon: 'required',
                upsname: 'required',
                driver: 'required',
                nutuser: 'required',
                password: 'required',
                nutserver: {
                    required: {
                        depends: function(element) {
                            return (_this.$('#mode').val() == 'netclient');
                        }
                    }
                }
            },
            shellinaboxd: {
                shelltype: 'required',
                css: 'required'
            },
            'active-directory': {
                domain: 'required',
                username: 'required',
                password: 'required'
            },
            replication: {
                listener_port: 'required',
                network_interface: 'required'
            },
            rockstor: {
                listener_port: 'required'
            }
        };

        this.formName = this.serviceName + '-form';
        this.service = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.service);
        this.shares = new ShareCollection();
        this.shares.setPageSize(100);
        this.dependencies.push(this.shares);
        this.network = new NetworkConnectionCollection();
        this.dependencies.push(this.network);
        this.initHandlebarHelpers();
    },

    render: function() {

        this.fetch(this.renderServiceConfig, this);
        return this;
    },

    renderServiceConfig: function() {

        var _this = this;
        var default_port = 443;
        if (this.service.get('name') == 'replication') {
            default_port = 10002;
        }
        var config = this.service.get('config');
        var configObj = {};
        if (config != null) {
            configObj = JSON.parse(config);
        }
        if (configObj.listener_port) {
            default_port = configObj.listener_port;
        }
        var nutShutdownTimes = {
            'When Battery Low': 0,
            'after 30 seconds': 30,
            'after 1 minute': 60,
            'after 2 minutes': 120,
            'after 4 minutes': 240,
            'after 8 minutes': 480,
            'after 16 minutes': 960,
            'after 32 minutes': 1920
        };
        _this.nutShutdownTimes = nutShutdownTimes;
        $(this.el).html(this.template({
            service: this.service,
            serviceName: this.service.get('display_name'),
            config: configObj,
            shares: this.shares,
            network: this.network,
            defaultPort: default_port,
            adStatus: this.adStatus,
            nutShutdownTimes: nutShutdownTimes
        }));

        this.$('#nis-form :input').tooltip({
            html: true,
            placement: 'right'
        });
        this.$('#snmpd-form :input').tooltip({
            html: true,
            placement: 'right'
        });
        this.$('#ldap-form :input').tooltip({
            html: true,
            placement: 'right'
        });
        this.$('#ntpd-form :input').tooltip({
            html: true,
            placement: 'right'
        });
        this.$('#smb-form #global_config').tooltip({
            html: true,
            placement: 'right',
            template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div> \
                    <div class="tooltip-inner size300"></div></div>',
            title: 'These lines will be added to the [global] section of smb.conf<br/><br/> \
                    - <strong>Inline comments with # or ; not allowed, Samba testparm <u>will fail</u></strong><br/><br/> \
                    - <strong>Samba params syntax</strong>:<br/>param = value (1 space both sides of equal sign)<br/><br/> \
                    - <strong>Samba params with equals inside value field (ex. socket options param)</strong>:<br/>socket options = SO_SNDBUF=131072<br/>(spaces on first equal, <u>no spaces</u> around others)<br/><br/> \
                    Please check <a href="https://www.samba.org/samba/docs/man/manpages/smb.conf.5.html" target="_new">Samba official docs</a> for further infos'
        });
        this.$('#docker-form #root_share').tooltip({
            html: true,
            placement: 'right',
            title: 'We strongly recommend that you create a separate Share(at least 5GB size) for this purpose. During the lifetime of Rock-ons, several snapshots will be created and space could fill up quickly. It is best managed in a separate Share to avoid clobbering other data.'
        });
        this.$('#active-directory-form #domain').tooltip({
            html: true,
            placement: 'right',
            title: 'Windows Active Directory or Domain Controller to connect to.'
        });
        this.$('#active-directory-form #username').tooltip({
            html: true,
            placement: 'right',
            title: 'Administrator username to use for authentication while joining the domain. Eg: Administrator'
        });
        this.$('#active-directory-form #password').tooltip({
            html: true,
            placement: 'right',
            title: 'Password for the above username.'
        });
        this.$('#active-directory-form #idmap_range').tooltip({
            html: true,
            placement: 'right',
            title: 'Default should work for most cases. rid idmap backend is the only one supported. The default range is 10000 - 999999.'
        });
        this.$('#smartd-form #smartd_config').tooltip({
            html: true,
            placement: 'right',
            title: 'Following are a few example directives. For complete information, read smartd.conf manpage.<br> \
To monitor all possible errors on all disks: <br> <strong>DEVICESCAN -a</strong> <br> \
To monitor /dev/sdb and /dev/sdc but ignore other devices: <br> <strong>/dev/sdb -a</strong> <br> <strong>/dev/sdc -a</strong> <br> \
To email potential problems: <br> <strong>DEVICESCAN -m user@example.com</strong> <br> \
To alert on temperature changes: <br> <strong>DEVICESCAN -W 4,35,40</strong> <br>'
        });
        this.$('#nut-form #mode').tooltip({
            html: true,
            placement: 'right',
            container: 'body',
            title: '<strong>Nut Mode</strong> — Select the overall mode of Network UPS Tools operation. The drop-down list offers the following options:<br> \
<ul>\
<li><strong>Standalone</strong> — The most common and recommended mode if you have a locally connected UPS and don\'t wish for Rockstor to act as a NUT server to any other LAN connected machines.</li> \
<li><strong>Net server</strong> — Is like Standalone only it also offers NUT services to other machines on the network who are running in Net client mode.</li> \
<li><strong>Net client</strong> — Connect to an existing Nut server.</li> \
</ul>'
        });
        this.$('#nut-form #upsname').tooltip({
            html: true,
            placement: 'right',
            title: 'The internal name for the UPS eg "ups". A single word with no special characters ( " = # space or backslash ) Defaults to "ups".'
        });
        this.$('#nut-form #nutserver').tooltip({
            html: true,
            placement: 'right',
            title: 'The hostname or IP address of the NUT server when in Net Client mode. Otherwise this is usually localhost'
        });
        this.$('#nut-form #nutuser').tooltip({
            html: true,
            placement: 'right',
            title: 'The NUT username (not a Rockstor user). Must be a single word without special characters and is case sensitive. Defaults to "monuser".'
        });
        this.$('#nut-form #password').tooltip({
            html: true,
            placement: 'right',
            title: 'The password for the above nut user.'
        });
        this.$('#nut-form #upsmon').tooltip({
            html: true,
            placement: 'right',
            title: '<strong>Monitor Mode</strong>:<br> \
<ul>\
<li><strong>Master</strong> - Default, this system will shutdown last, allowing slave nut systems time to shutdown first. UPS data port is most likely directly connected to this system.</li> \
<li><strong>Slave</strong> - This system shuts down as soon as power is critical, it does not wait for any other nut systems. Mostly used when in netclient mode and no direct UPS data connection.</li> \
</ul>'
        });
        this.$('#nut-form #driver').tooltip({
            html: true,
            placement: 'right',
            title: 'Driver for you UPS. Please see the NUT <a href="http://www.networkupstools.org/stable-hcl.html" target="_blank">Hardware Compatibility List for guidance.</a>'
        });
        this.$('#nut-form #desc').tooltip({
            html: true,
            placement: 'right',
            title: 'Human Friendly name for this UPS device. Defaults to "Rockstor UPS".'
        });
        this.$('#nut-form #port').tooltip({
            html: true,
            placement: 'right',
            title: 'Device name for how this UPS is connected. E.g for the first serial port use "/dev/ttyS0" or if using a USB to serial port adapter then "/dev/ttyUSB0". Use "auto" if connected direct via USB.'
        });
        this.$('#nut-form #shutdowntimer').tooltip({
            html: true,
            placement: 'right',
            title: 'How long the UPS is "On Battery (OB)" before NUT initiates a "Forced Shutdown" (FSD) event. In netclient mode the netserver setting, if set for a shorter period, takes priority and the netserver will attempt to ensuring all netclients are shutdown first.'
        });
        this.$('#replication-form #network_interface').tooltip({
            html: true,
            placement: 'right',
            title: 'Select one of the available Network interfaces to be used by the listener.'
        });
        this.$('#replication-form #listener_port').tooltip({
            html: true,
            placement: 'right',
            title: 'A valid port number(between 1-65535) for the listener. Default/Suggested port -- 10002'
        });
        this.$('#rockstor-form #network_interface').tooltip({
            html: true,
            placement: 'right',
            title: 'Select the Network connection for Rockstor. If you leave the selection blank, service will listen on all interfaces.<b>WARNING!!!</b> UI may become inaccessible after changing the interface. It should be available on the new interface IP/Hostname after a momentary pause.'
        });
        this.$('#rockstor-form #listener_port').tooltip({
            html: true,
            placement: 'right',
            title: 'While default port(443) is recommended for most users, advanced users can change it to access UI on a different port. <b>Changing the port will make UI inaccessible.</b> After a momentary pause, it should be available on the new port.'
        });
        this.$('#shellinaboxd-form #shelltype').tooltip({
            html: true,
            placement: 'right',
            title: '<strong>LOGIN</strong> is default Shell In a Box connection method, like a login via console (root direct login not allowed, su required)<br/> \
        <strong>SSH</strong> connection with root user allowed. Less secure for system'
        });
        this.$('#shellinaboxd-form #css').tooltip({
            html: true,
            placement: 'right',
            title: 'Choose between Black on White or White on Black layout'
        });
        this.$('#shellinaboxd-form #detach').tooltip({
            html: true,
            placement: 'left',
            title: 'Remember to allow Rockstor server on popup blockers to avoid annoying messages'
        });

        this.validator = this.$('#' + this.formName).validate({
            onfocusout: false,
            onkeyup: false,
            rules: this.rules[this.serviceName],

            submitHandler: function() {
                var button = _this.$('#submit');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var data;
                if (_this.formName == 'snmpd-form') {
                    var optionsText = _this.$('#options').val();
                    var entries = [];
                    if (!_.isNull(optionsText) && optionsText.trim() != '') entries = optionsText.trim().split('\n');
                    var params = (_this.$('#' + _this.formName).getJSON());
                    params.aux = entries;
                    data = JSON.stringify({
                        config: params
                    });
                } else {
                    data = JSON.stringify({
                        config: _this.$('#' + _this.formName).getJSON()
                    });
                }

                var jqxhr = $.ajax({
                    url: '/api/sm/services/' + _this.serviceName + '/config',
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: data
                });

                jqxhr.done(function() {
                    enableButton(button);
                    $('#services_modal').modal('hide');
                    app_router.navigate('/services', {
                        trigger: true
                    });
                });

                jqxhr.fail(function(xhr, status, error) {
                    enableButton(button);
                });

            }
        });

        this.toggleNutFields();
        return this;
    },

    cancel: function(event) {

        event.preventDefault();
        $('#services_modal').modal('hide');
    },

    toggleFormFields: function() {

        if (this.$('#security').val() == 'ads') {
            this.$('#realm').removeAttr('disabled');
        } else {
            this.$('#realm').attr('disabled', 'true');
        }
        if (this.$('#security').val() == 'ads' ||
            this.$('#security').val() == 'domain') {
            this.$('#templateshell').removeAttr('disabled');
        } else {
            this.$('#templateshell').attr('disabled', 'true');
        }
    },

    toggleNutFields: function() {

        if (this.$('#mode').val() == 'standalone') {
            this.$('#monitor-mode').hide();
            this.$('#upsmon').attr('value', 'master');
            this.$('#ups-name').hide();
            this.$('#upsname').attr('value', 'ups');
            this.$('#ups-description').hide();
            this.$('#desc').attr('value', 'Rockstor UPS');
            this.$('#nut-driver').show();
            this.$('#ups-port').show();
            this.$('#nut-server').hide();
            this.$('#nutserver').attr('value', 'localhost');
        } else if (this.$('#mode').val() == 'netserver') {
            this.$('#monitor-mode').show();
            this.$('#ups-name').show();
            this.$('#ups-description').show();
            this.$('#nut-server').hide();
            this.$('#nutserver').attr('value', 'localhost');
            this.$('#nut-driver').show();
            this.$('#ups-port').show();
        } else { // probably has value of netclient or unknown
            this.$('#monitor-mode').hide();
            this.$('#upsmon').attr('value', 'slave');
            this.$('#ups-name').show();
            this.$('#ups-description').show();
            this.$('#nut-driver').hide();
            this.$('#driver').attr('value', 'nutclient');
            this.$('#ups-port').hide();
            this.$('#port').attr('value', 'auto');
            this.$('#nut-server').show();
        }
    },

    toggleCertUrl: function() {

        var cbox = this.$('#enabletls');
        if (cbox.prop('checked')) {
            this.$('#cert-ph').css('visibility', 'visible');
        } else {
            this.$('#cert-ph').css('visibility', 'hidden');
        }
    },

    initHandlebarHelpers: function() {

        //ShellInABox
        Handlebars.registerHelper('display_shelltype_options', function() {

            var html = '',
                _this = this;
            var avail_shells = ['LOGIN', 'SSH'];
            _.each(avail_shells, function(shell, index) {
                if (shell == _this.config.shelltype) {
                    html += '<option value="' + shell + '" selected="selected">';
                    html += shell + '</option>';
                } else {
                    html += '<option value="' + shell + '">' + shell + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('display_shellstyle_options', function() {

            var html = '',
                _this = this;
            var avail_styles = {
                'white-on-black': 'White on Black',
                'black-on-white': 'Black on White'
            };
            _.each(avail_styles, function(key, val) {
                if (val == _this.config.css) {
                    html += '<option value="' + val + '" selected="selected">';
                    html += key + '</option>';
                } else {
                    html += '<option value="' + val + '">' + key + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        //Samba Config page
        Handlebars.registerHelper('display_smb_params', function() {

            var params = [],
                _this = this;
            _.each(_this.config, function(val, key) {
                if (key != 'workgroup') {
                    params.push(key + ' = ' + val);
                }
            });
            return params.join('\n');
        });

        Handlebars.registerHelper('isEnabledAD', function(opts) {

            var _this = this;
            if (_this.adStatus == 0) {
                return opts.fn(this);
            }
            return opts.inverse(this);
        });

        //NUT-UPS
        Handlebars.registerHelper('display_nutMode_options', function() {

            var html = '',
                _this = this;
            var nutModeTypes = ['standalone', 'netserver', 'netclient'];
            _.each(nutModeTypes, function(mode, index) {
                if (mode == _this.config.mode) {
                    html += '<option value="' + mode + '" selected="selected">';
                    html += mode + '</option>';
                } else {
                    html += '<option value="' + mode + '">' + mode + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('display_monitorMode_options', function() {

            var html = '',
                _this = this;
            var nutMonitorTypes = ['master', 'slave'];
            _.each(nutMonitorTypes, function(upsmon, index) {
                if (upsmon == _this.config.upsmon) {
                    html += '<option value="' + upsmon + '" selected="selected">';
                    html += upsmon + '</option>';
                } else {
                    html += '<option value="' + upsmon + '">' + upsmon + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('display_nutDriver_options', function() {

            var html = '',
                _this = this;
            var nutDriverTypes = ['apcsmart', 'apcsmart-old', 'apcupsd-ups', 'bcmxcp', 'bcmxcp_usb', 'belkin', 'belkinunv', 'bestfcom', 'bestfortress', 'bestuferrups', 'bestups', 'blazer_ser', 'blazer_usb', 'dummy-ups', 'etapro', 'everups', 'gamatronic', 'genericups', 'isbmex', 'ivtscd', 'liebert', 'liebert-esp2', 'masterguard', 'metasys', 'mge-shut', 'mge-utalk', 'microdowell', 'nutclient', 'nutdrv_qx', 'oldmge-shut', 'oneac', 'optiups', 'powercom', 'powerpanel', 'rhino', 'richcomm_usb', 'riello_ser', 'riello_usb', 'safenet', 'skel', 'snmp-ups', 'solis', 'tripplite', 'tripplite_usb', 'tripplitesu', 'upscode2', 'usbhid-ups', 'victronups'];
            _.each(nutDriverTypes, function(driver, index) {
                if (driver == _this.config.driver) {
                    html += '<option value="' + driver + '" selected="selected">';
                    html += driver + '</option>';
                } else {
                    html += '<option value="' + driver + '">' + driver + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        // NUT-UPS helper to fill dropdown with shutdown timing values
        // eg by dynamically generating lines of the following form:
        // <option value="60">After 1 minute</option>
        Handlebars.registerHelper('display_nutShutdownTimer_options', function() {

            var html = '',
                _this = this;
            if (_this.config.shutdowntimer == null) {
                // if no previous setting then default to 0 = "when Battery Low"
                _this.config.shutdowntimer = '0';
            }
            for (var timeString in this.nutShutdownTimes) {
                if (this.nutShutdownTimes[timeString] == _this.config.shutdowntimer) {
                    // we have found our current setting so mark it selected
                    html += '<option value="' + this.nutShutdownTimes[timeString] + '" selected="selected">';
                    html += timeString + '</option>';
                } else {
                    html += '<option value="' + this.nutShutdownTimes[timeString] + '">' + timeString + '</option>';
                }
            }
            return new Handlebars.SafeString(html);
        });

        //Replication
        Handlebars.registerHelper('display_networkInterface_options', function() {

            var html = '',
                _this = this;
            this.network.each(function(ni, index) {
                var niName = ni.get('name');
                var niLongName = niName + ' [IP: ' + ni.get('ipv4_addresses') + ']';
                if (!ni.get('master')) {
                    if (niName == _this.config.network_interface) {
                        html += '<option value="' + niName + '" selected="selected"> ' + niLongName + '</option>';
                    } else {
                        html += '<option value="' + niName + '">' + niLongName + '</option>';
                    }
                }
            });
            return new Handlebars.SafeString(html);
        });


        //Rockon template
        Handlebars.registerHelper('display_rockon_shares', function() {

            var html = '',
                _this = this;
            if (this.shares.length === 0) {
                html += '<p>You currently have no Shares. You will need a share to run the Rock-ons service.</p>';
                html += '<a href="#add_share">Add a Share</a>';
            } else {
                html += '<select class="form-control" name="root_share" id="root_share" data-placeholder="Select root share">';
                html += '<option></option>';
                this.shares.each(function(share, index) {
                    var shareName = share.get('name');
                    if (shareName == _this.config.root_share) {
                        html += '<option value="' + shareName + '" selected="selected">  ' + shareName + ' </option>';
                    } else {
                        html += '<option value="' + shareName + '">' + shareName + ' </option>';
                    }
                });
                html += '</select>';
            }
            return new Handlebars.SafeString(html);
        });
    }
});
;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

CpuUsageModule = RockstorModuleView.extend({

    initialize: function() {
        this.template = window.JST.home_cpuusage;
        this.module_name = 'cpuusage';
    },
    render: function() {
        var _this = this;
        $(this.el).html(this.template({
            module_name: this.module_name
        }));

        // display cpu graph 
        var w = 300; // width
        var h = 200; // height
        var padding = 30;
        var id = '#cpuusage';
        /*
        var graph = d3.select(this.el).select(id).append("svg:svg")
        .attr("width", w)
        .attr("height", h);
        */
        var elem = this.$(id)[0];
        var max_y = 100;
        var xscale = d3.scale.linear().domain([0, 120]).range([padding, w]);
        var yscale = d3.scale.linear().domain([0, 100]).range([0, h - padding]);
        var xdiff = xscale(1) - xscale(0);

        var initial = true;
        var cpu_data = null;
        displayGraph(elem, w, h, padding, cpu_data, xscale, yscale, 1000, 1000);

        /*
        RockStorSocket.addListener(function(cpu_data) {
          if (!_.isNull(cpu_data)) {
            if (initial) {
              displayGraph(elem, w, h, padding, cpu_data, 
              xscale, yscale, 1000, 1000);
              initial = false;

            } else {
              redrawWithAnimation(elem, 
              cpu_data, w, h, padding, xscale, yscale, xdiff);

            }
          }
        }, this, 'cpu_util');
        */
        return this;
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

CreateCloneView = RockstorLayoutView.extend({
    events: {
        'click #js-cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.share_create_clone;
        this.sourceType = this.options.sourceType;
        this.shareId = this.options.shareId;
        this.snapName = this.options.snapName;

        this.share = new Share({
            sid: this.shareId
        });
        this.dependencies.push(this.share);
    },

    render: function() {
        this.fetch(this.renderSubViews, this);
        return this;
    },

    renderSubViews: function() {
        var _this = this,
            sourceTypeIsShare = false;
        if (this.sourceType == 'share') {
            sourceTypeIsShare = true;
        }
        $(this.el).html(this.template({
            sourceType: this.sourceType,
            shareName: this.share.get('name'),
            snapName: this.snapName,
            sourceTypeIsShare: sourceTypeIsShare
        }));
        this.$('#create-clone-form :input').tooltip();
        this.$('#create-clone-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                name: 'required'
            },
            submitHandler: function() {
                var button = _this.$('#create-clone');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var url;
                if (_this.sourceType == 'share') {
                    url = '/api/shares/' + _this.shareId + '/clone';
                } else if (_this.sourceType == 'snapshot') {
                    url = '/api/shares/' + _this.shareId + '/snapshots/' +
                        _this.snapName + '/clone';
                }
                $.ajax({
                    url: url,
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#create-clone-form').getJSON()),
                    success: function() {
                        enableButton(button);
                        app_router.navigate('shares', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });
                return false;
            }
        });
        return this;
    },

    cancel: function(event) {
        event.preventDefault();
        if (this.sourceType == 'share') {
            app_router.navigate('#shares/' + this.shareId, {
                trigger: true
            });
        } else if (this.sourceType == 'snapshot') {
            app_router.navigate('#shares/' + this.shareId, {
                trigger: true
            });
        }
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

DashboardConfigView = Backbone.View.extend({
    events: {
        'click .widget-name': 'widgetClicked'
    },

    initialize: function() {
        this.dashboardconfig = this.options.dashboardconfig;
        this.template = window.JST.dashboard_dashboard_config;
        this.parentView = this.options.parentView;
        this.initHandlebarHelpers();
    },

    render: function() {
        this.renderPage();
        return this;
    },

    renderPage: function() {
        $(this.el).html(this.template({
            wSelected: this.dashboardconfig.getConfig()
        }));
        return this;
    },

    widgetClicked: function(event) {
        var cbox = $(event.currentTarget);
        this.parentView.trigger('widgetClicked', cbox.val(), cbox.is(':checked'));
    },

    setCheckbox: function(name, checked) {
        var cbox = this.$('input[type="checkbox"][value="' + name + '"]');
        if (checked) {
            cbox.attr('checked', 'true');
        } else {
            cbox.removeAttr('checked');
        }
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_widgets', function() {
            var _this = this;
            var html = '';
            var widget_categories = ['Storage', 'Compute', 'Network'];
            _.each(widget_categories, function(category) {
                html += '<span class="widget-heading">' + category + '</span><br>';
                _.each(RockStorWidgets.findByCategory(category), function(widget) {
                    if (_.some(_this.wSelected, function(w) {
                        return w.name == widget.name;
                    })) {
                        html += '<input class="widget-name inline" type="checkbox" name="selections" value="' + widget.name + '" checked="checked"></input>';
                    } else {
                        html += '<input class="widget-name inline" type="checkbox" name="selections" value="' + widget.name + '"></input>';
                    }
                    html += ' ' + widget.displayName + '<br>';
                });
                html += '<br>';
            });
            return new Handlebars.SafeString(html);
        });
    },

    cleanup: function() {}

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

DiskDetailsLayoutView = RockstorLayoutView.extend({

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.diskId = this.options.diskId;
        this.template = window.JST.disk_disk_details_layout;
        this.disk = new Disk({
            diskId: this.diskId
        });
        this.smartinfo = new SmartInfo({
            diskId: this.diskId
        });
        this.dependencies.push(this.disk);
        this.dependencies.push(this.smartinfo);
        this.active_tab = 0;
        this.initHandlebarHelpers();
    },

    events: {
        'click #smartinfo': 'refreshInfo',
        'click #test-start': 'startTest'
    },

    render: function() {
        this.fetch(this.renderSubViews, this);
        return this;
    },

    renderSubViews: function() {
        var capabilities = this.smartinfo.get('capabilities') || [];
        var test_capabilities = {};
        var running_test = null;
        capabilities.forEach(function(c) {
            if ((c.name == 'Short self-test routine recommended polling time') ||
                (c.name == 'Extended self-test routine recommended polling time') ||
                (c.name == 'Conveyance self-test routine recommended polling time')) {
                var p = c.name.indexOf('routine');
                var short_name = c.name.substring(0, p);
                test_capabilities[short_name] = c.capabilities;
            } else if (c.name == 'Self-test execution status' &&
                c.flag > 240 && c.flag < 250) {
                running_test = c.capabilities;
            }
        });
        var attributes = this.smartinfo.get('attributes') || [];
        var errorlogsummary = this.smartinfo.get('errorlogsummary') || [];
        var errorlog = this.smartinfo.get('errorlog') || [];
        var errorlogZero, errorlogOne = null;
        if (errorlog.length != 0) {
            errorlogZero = errorlog[0].line;
            errorlogOne = errorlog[1].line;
        }
        var testlog = this.smartinfo.get('testlog') || [];
        var testlogLength = testlog.length;
        var testlogdetail = this.smartinfo.get('testlogdetail') || [];
        var identity = this.smartinfo.get('identity') || [];
        var diskSmartNotAvailable = !this.disk.get('smart_available');
        var diskSmartNotEnabled = !this.disk.get('smart_enabled');
        var diskName = this.disk.get('name');
        var errorLogSummaryNull,
            testLogNull,
            notRunningTest,
            smartNotAvailableEnabled = false;
        if (errorlogsummary.length == 0) {
            errorLogSummaryNull = true;
        }
        if (testlogLength == 0) {
            testLogNull = true;
        }
        if (diskSmartNotAvailable || diskSmartNotEnabled) {
            smartNotAvailableEnabled = true;
        }
        if (!running_test) {
            notRunningTest = true;
        }

        $(this.el).html(this.template({
            disk: this.disk,
            diskSmartNotAvailable: diskSmartNotAvailable,
            diskSmartNotEnabled: diskSmartNotEnabled,
            smartNotAvailableEnabled: smartNotAvailableEnabled,
            diskName: diskName,
            attributes: attributes,
            capabilities: capabilities,
            errorlogsummary: errorlogsummary,
            errorLogSummaryNull: errorLogSummaryNull,
            errorlog: errorlog,
            errorlogZero: errorlogZero,
            errorlogOne: errorlogOne,
            testlog: testlog,
            testLogNull: testLogNull,
            testlogdetail: testlogdetail,
            smartinfo: this.smartinfo,
            tests: test_capabilities,
            running_test: running_test,
            notRunningTest: notRunningTest,
            identity: identity
        }));
        this.$('input.smart-status').simpleSlider({
            'theme': 'volume',
            allowedValues: [0, 1],
            snap: true
        });
        this.$('ul.nav.nav-tabs').tabs('div.css-panes > div');
        this.$('ul.nav.nav-tabs').data('tabs').click(this.active_tab);
        this.active_tab = 0;
    },

    refreshInfo: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        $.ajax({
            url: '/api/disks/smart/info/' + _this.diskId,
            type: 'POST',
            success: function(data, status, xhr) {
                _this.render();
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    startTest: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var test_type = $('#test_name').val();
        $.ajax({
            url: '/api/disks/smart/test/' + _this.diskId,
            type: 'POST',
            dataType: 'json',
            data: {
                'test_type': test_type
            },
            success: function(data, status, xhr) {
                _this.render();
                _this.active_tab = 5;
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    initHandlebarHelpers: function() {

        Handlebars.registerHelper('isAboveMinLength', function(minValue, target, options) {
            // check we have all the arguments we expect
            if (arguments.length != 3) {
                throw new Error('Handlerbars Helper ' +
                    '\'isAboveMinLength\' expects exactly 2 parameter.');
            }
            // do our logic and return options functions appropriately.
            if (target.length > minValue) {
                return options.fn(this);
            } else {
                return options.inverse(this);
            }
        });

        Handlebars.registerHelper('lastScannedOn', function () {
            var html = '';
            if (this.identity.scanned_on != null){
                html += 'Information presented was manually scanned on: ' +
                    this.identity.scanned_on + ' ';
            } else {
                html += 'No prior manual scan initiated: ';
            }
            return new Handlebars.SafeString(html);
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

DisksView = RockstorLayoutView.extend({
    events: {
        'click #setup': 'setupDisks',
        'click .wipe': 'wipeDisk',
        'click .delete': 'deleteDisk',
        'click .btrfs_wipe': 'btrfsWipeDisk',
        'click .btrfs_import': 'btrfsImportDisk',
        'click .pause': 'pauseDisk',
        'switchChange.bootstrapSwitch': 'smartToggle'
    },

    initialize: function () {
        this.template = window.JST.disk_disks;
        this.disks_table_template = window.JST.disk_disks_table;
        this.collection = new DiskCollection;
        this.collection.on('reset', this.renderDisks, this);
        this.initHandlebarHelpers();
    },

    render: function () {
        this.collection.fetch();
        return this;
    },

    renderDisks: function () {
        // remove existing tooltips
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        $(this.el).html(this.template({collection: this.collection}));
        this.$('#disks-table-ph').html(this.disks_table_template({
            diskCollection: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty()
        }));

        this.$('[rel=tooltip]').tooltip({
            placement: 'right',
            container: '#disks-table'
        });
        this.$('[rel=tooltip-top]').tooltip({
            placement: 'top',
            container: '#disks-table'
        });
        //initialize bootstrap switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color


      //added ext func to sort over SMART input checkboxes
        $.fn.dataTable.ext.order['dom-checkbox'] = function ( settings, col ) {
            return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
                return $('input', td).prop('checked') ? '1' : '0';
            });
        };
        //Added columns definition for sorting purpose
        var customs = {
            columnDefs: [
                { type: 'file-size', targets: 2 }
            ],
            columns: [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                { 'orderDataType': 'dom-checkbox' }
            ]
        };

        this.renderDataTables(customs);
    },

    setupDisks: function () {
        var _this = this;
        $.ajax({
            url: '/api/disks/scan',
            type: 'POST'
        }).done(function () {
            // reset the current page
            _this.collection.page = 1;
            _this.collection.fetch();
        });
    },

    pauseDisk: function (event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var diskId = button.data('disk-id');
        if (confirm('Are you sure you want to force the device into Standby mode ?')) {
            $.ajax({
                url: '/api/disks/' + diskId + '/pause',
                type: 'POST',
                success: function (data, status, xhr) {
                    _this.render();
                },
                error: function (xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    wipeDisk: function (event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var diskId = button.data('disk-id');
        if (confirm('Are you sure you want to completely delete all data on the disk ?')) {
            $.ajax({
                url: '/api/disks/' + diskId + '/wipe',
                type: 'POST',
                success: function (data, status, xhr) {
                    _this.render();
                },
                error: function (xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    btrfsWipeDisk: function (event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var diskId = button.data('disk-id');
        if (confirm('Are you sure you want to erase BTRFS filesystem(s) on the disk ?')) {
            $.ajax({
                url: '/api/disks/' + diskId + '/btrfs-wipe',
                type: 'POST',
                success: function (data, status, xhr) {
                    _this.render();
                },
                error: function (xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    btrfsImportDisk: function (event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var diskId = button.data('disk-id');
        if (confirm('Are you sure you want to automatically import pools, shares and snapshots that may be on the disk ?')) {
            $.ajax({
                url: '/api/disks/' + diskId + '/btrfs-disk-import',
                type: 'POST',
                success: function (data, status, xhr) {
                    _this.render();
                },
                error: function (xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    deleteDisk: function (event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var diskId = button.data('disk-id');
        if (confirm('Are you sure you want to delete the disk ?')) {
            $.ajax({
                url: '/api/disks/' + diskId,
                type: 'DELETE',
                success: function (data, status, xhr) {
                    _this.render();
                },
                error: function (xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    cleanup: function () {
        this.$('[rel=\'tooltip\']').tooltip('hide');
    },

    initHandlebarHelpers: function () {

        asJSON = function (role) {
            // Simple wrapper to test for not null and JSON compatibility,
            // returns the json object if both tests pass, else returns false.
            if (role == null) { // db default
                return false;
            }
            // try json conversion and return false if it fails
            // @todo not sure if this is redundant?
            try {
                return JSON.parse(role);
            } catch (e) {
                return false;
            }
        };

        // Helper to display APM value
        Handlebars.registerHelper('humanReadableAPM', function (apm) {
            var apmhtml = '';
            if (apm == 0 || apm == null) {
                apmhtml = '???';
            } else {
                if (apm == 255) {
                    apmhtml = 'off';
                } else {
                    apmhtml = apm;
                }
            }
            return new Handlebars.SafeString(apmhtml);
        });

        // Simple helper to return true / false on powerState = null or unknown
        // Untested. Presumably we do:
        // {{#if (powerstateNullorUnknown this.power_state)}}
        // in upstream disks_table.jst
        Handlebars.registerHelper('powerStateNullorUnknown', function (pstate) {
            if (pstate == 'unknown' || pstate == null ) {
                return true;
            }
            return false;
        });

        // Simple helper to return true / false on powerState = active/idle
        // Untested. Presumably we do:
        // {{#if (powerStateActiveIdle this.power_state)}}
        // in upstream disks_table.jst
        Handlebars.registerHelper('powerStateActiveIdle', function (pstate) {
            if (pstate == 'active/idle') {
                return true;
            }
            return false;
        });

        Handlebars.registerHelper('isMdraidMember', function (role) {
            // check for the legacy / pre json formatted role field contents.
            if (role == 'isw_raid_member' || role == 'linux_raid_member') {
                return true;
            }
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('mdraid')) {
                // in the case of an mdraid property we are assured it is an
                // mdraid member, the specific type is not important here.
                // Non mdraid members will have no mdraid property.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        // Identify root device by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isMdraidMember'.
        // true = device hosts the / partition
        // false = root not found on this device
        Handlebars.registerHelper('isRootDevice', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('root')) {
                // Only the system device will have a 'root' role entry, we
                // are not interested in the associated value, only the key.
                // Non root members will have no 'root' property.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        // Identify LUKS container by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isRootDevice'
        Handlebars.registerHelper('isLuksContainer', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('LUKS')) {
                // Once a container is created it has an fstype of crypto_LUKS
                // and we attribute it the role of 'LUKS' as a result.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        // Works by examining the Disk.role field and if a LUKS role is found
        // we examine the roles value to see if it reports having an open
        // counterpart ie is this container mapped to an OpenLuks volume
        // which is expressed as unlocked having a true value.
        Handlebars.registerHelper('isLuksContainerUnlocked', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('LUKS')) {
                // here we deviate from isLuksContainer by unpacking
                // our LUKS role's value:
                if (roleAsJson['LUKS'].hasOwnProperty('unlocked') == true) {
                    return roleAsJson['LUKS']['unlocked'];
                }
            }
            // In all other cases return false.
            return false;
        });

        // Identify Open LUKS container by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isRootDevice'
        Handlebars.registerHelper('isOpenLuks', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('openLUKS')) {
                // Once a LUKS container is open it has a type of crypt
                // and we attribute it the role of 'openLUKS' as a result.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        // Identify bcache backing devices by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isRootDevice'
        Handlebars.registerHelper('isBcache', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('bcache')) {
                // We have a bcache backing device which must now be accessed
                // indirectly via a virtual device, hence we tag it to avoid
                // accidental re-use / delete.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        // Identify bcache caching devices by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isBcache'
        Handlebars.registerHelper('isBcacheCdev', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('bcachecdev')) {
                // We have a bcache caching device which we tag to avoid
                // it's accidental re-use / delete.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        // Identify LVM2_member devices by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isBcache'
        Handlebars.registerHelper('isLVM2member', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('LVM2member')) {
                // We have an LVM2 member (Physical Volume) which we tag to
                // avoid it's accidental re-use / delete.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        // Identify User assigned role disks by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isBcache'
        // Initially only the redirect role was considered a User assigned
        // role but this was expanded to include LUKS container and bcache
        // backing and caching devices.
        Handlebars.registerHelper('hasUserRole', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            // Test for each type of User role, essential a user requested
            // purpose, ie use this partition, or make this a LUKS container.
            // If found we can tag via this helper to avoid it's accidental
            // re-use / deletion.
            // Test for redirection (partition selection) role:
            if (roleAsJson.hasOwnProperty('redirect')) {
                return true;
            }
            // Test for LUKS container role:
            if (roleAsJson.hasOwnProperty('LUKS')) {
                return true;
            }
            // Test for bcache backing or caching roles:
            if (roleAsJson.hasOwnProperty('bcache') ||
                roleAsJson.hasOwnProperty('bcachecdev')) {
                return true;
            }
            // In all other cases return false.
            return false;
        });

        Handlebars.registerHelper('isNullPoolBtrfs', function (btrfsUid, poolName) {
            if (btrfsUid && _.isNull(poolName)) {
                return true;
            }
            return false;
        });

        Handlebars.registerHelper('checkSerialStatus', function (serial, diskName, opts) {
            // We need to warn the user if any of the following exist as they
            // are all unreliable. The fake-serial- is generated by scan_disks
            // and should have overwritten any null, empty or diskName serial.
            // @todo should be possible to remove null, '' and diskName soon.
            if (serial == null || serial == '' || serial == diskName ||
                serial.substring(0, 12) == 'fake-serial-' ||
                serial == '000000000000') {
                return opts.fn(this);
            }
            return opts.inverse(this);
        });

        Handlebars.registerHelper('humanReadableSize', function (size) {
            return humanize.filesize(size * 1024);
        });
    },

    smartToggle: function (event, state) {
        var disk_id = $(event.target).attr('data-disk-id');
        if (state) {
            this.smartOn(disk_id);
        } else {
            this.smartOff(disk_id);
        }
    },

    smartOff: function (disk_id) {
        var _this = this;
        $.ajax({
            url: '/api/disks/' + disk_id + '/disable-smart',
            type: 'POST',
            success: function (data, status, xhr) {
                _this.render();
            }
        });
    },

    smartOn: function (disk_id) {
        var _this = this;
        $.ajax({
            url: '/api/disks/' + disk_id + '/enable-smart',
            type: 'POST',
            success: function (data, status, xhr) {
                _this.render();
            }
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

DockerServiceView = Backbone.View.extend({
    events: {
        'switchChange.bootstrapSwitch': 'switchStatus',
    },

    initialize: function() {
        this.template = window.JST.rockons_docker_service;
        this.serviceName = 'docker';
        this.service = new Service({
            name: this.serviceName
        });
        this.parentView = this.options.parentView;
        this.updateFreq = 30000;
    },

    render: function() {
        var _this = this;
        this.service.fetch({
            success: function(collection, response, options) {
                _this.renderPage();
            }
        });
        return this;
    },

    renderPage: function() {
        $(this.el).html(this.template({
            service: this.service
        }));

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        if (typeof this.current_status == 'undefined') {
            this.current_status = this.service.get('status');
        }
        this.$('input[name="rockon-service-checkbox"]').bootstrapSwitch('state', this.current_status, true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        return this;
    },

    switchStatus: function(event, state) {
        if (!this.service.get('config')) {
            app_router.navigate('services/docker/edit', {
                trigger: true
            });
        } else {
            if (state) {
                this.startService();
            } else {
                this.stopService();
            }
        }
    },

    startService: function() {
        var _this = this;
        var serviceName = this.serviceName;
        this.setStatusLoading(serviceName, true);
        $.ajax({
            url: '/api/sm/services/docker/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                location.reload(true);
                _this.setStatusLoading(serviceName, false);
            },
            error: function(xhr, status, error) {
                _this.setStatusError(serviceName, xhr);
            }
        });
    },

    stopService: function() {
        var _this = this;
        var serviceName = this.serviceName;
        this.setStatusLoading(serviceName, true);
        $.ajax({
            url: '/api/sm/services/docker/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                location.reload(true);
                _this.setStatusLoading(serviceName, false);
            },
            error: function(xhr, status, error) {
                _this.setStatusError(serviceName, xhr);
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */


NetworkConnectionView = RockstorLayoutView.extend({

    events: {
        'click #cancel': 'cancel',
        'change #method': 'renderMethodOptionalFields',
        'change #ctype': 'renderCTypeOptionalFields'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.connectionId = this.options.connectionId || null;
        this.connection = null;
        this.template = window.JST.network_new_connection;
        this.devices = new NetworkDeviceCollection();
        this.devices.on('reset', this.renderDevices, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.devices.fetch();
        if (this.connectionId != null) {
            this.connection = new NetworkConnection({
                id: this.connectionId
            });
            this.connection.fetch();
        }
        return this;
    },

    renderDevices: function() {
        var _this = this;
        $(this.el).empty();
        var connection;
        if (this.connection) {
            connection = this.connection.toJSON();
        }
        $(this.el).append(this.template({
            connection: connection,
            devices: this.devices.toJSON(),
            ctypes: ['ethernet', 'team', 'bond'],
            teamProfiles: ['broadcast', 'roundrobin', 'activebackup', 'loadbalance', 'lacp'],
            bondProfiles: ['balance-rr', 'active-backup', 'balance-xor', 'broadcast',
                '802.3ad', 'balance-tlb', 'balance-alb'
            ]
        }));

        if (this.connection) {
            this.renderCTypeOptionalFields();
        }

        this.validator = this.$('#new-connection-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                name: 'required',
                ipaddr: {
                    required: {
                        depends: function(element) {
                            return (_this.$('#method').val() == 'manual');
                        }
                    }
                },
                team_profile: {
                    required: {
                        depends: function(element) {
                            return (_this.$('#ctype').val() == 'team');
                        }

                    }
                },
                bond_profile: {
                    required: {
                        depends: function(element) {
                            return (_this.$('#ctype').val() == 'bond');
                        }

                    }
                },
                devices: {
                    required: {
                        depends: function(element) {
                            return (_this.$('#ctype').val() == 'team');
                        }

                    }
                }
            },
            submitHandler: function() {
                var button = _this.$('#submit');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var cancelButton = _this.$('#cancel');
                disableButton(cancelButton);
                var data = _this.$('#new-connection-form').getJSON();
                var conn = _this.connection;
                if (!_this.connection) {
                    conn = new NetworkConnection();
                }
                conn.save(data, {
                    success: function(model, response, options) {
                        app_router.navigate('network', {
                            trigger: true
                        });
                    },
                    error: function(model, response, options) {
                        enableButton(button);
                        enableButton(cancelButton);
                    }
                });
            }
        });

        this.$('#devices').select2();

        this.$('#name').tooltip({
            html: true,
            placement: 'right',
            title: 'Choose a unique name for this network connection. Eg: Connection1, Team0, Bond0 etc..'
        });
        this.$('#team_profile').tooltip({
            html: true,
            placement: 'right',
            title: '<strong>broadcast</strong> - Simple runner which directs the team device to transmit packets via all ports.<br>' +
                '<strong>roundrobin</strong> - Simple runner which directs the team device to transmits packets in a round-robin fashion.<br>' +
                '<strong>activebackup</strong> - Watches for link changes and selects active port to be used for data transfers.<br>' +
                '<strong>loadbalance</strong> -  To do passive load balancing, runner only sets up BPF hash function which will determine port for packet transmit.' +
                'To do active load balancing, runner moves hashes among available ports trying to reach perfect balance.<br>' +
                '<strong>lacp</strong> - Implements 802.3ad LACP protocol. Can use same Tx port selection possibilities as loadbalance runner.'
        });
        this.$('#device').tooltip({
            html: true,
            placement: 'right',
            title: 'Choose a device to add to the connection. <b>WARNING!!!</b> you are NOT prevented from choosing a device that belongs to another connection. If you do so, the connection that is last activated claims the device.'
        });
        this.$('#ipaddr').tooltip({
            html: true,
            placement: 'right',
            title: 'A usable static IP address(in CIDR notation) for your network. Eg: 192.168.1.10/24. If IP is provided without netmask bit count, eg: 192.168.1.10, then it defaults to 192.168.1.10/32'
        });
        this.$('#gateway').tooltip({
            html: true,
            placement: 'right',
            title: 'IP address of your Gateway.'
        });
        this.$('#dns_servers').tooltip({
            html: true,
            placement: 'right',
            title: 'A comma separated list of DNS server addresses.'
        });
        this.$('#search_domains').tooltip({
            html: true,
            placement: 'right',
            title: 'A comma separated list of DNS search domains.'
        });
        this.$('#mtu').tooltip({
            html: true,
            placement: 'right',
            title: 'Enter a value in [1500-9000] range. Defaults to 1500.'
        });
    },

    // hide fields when selected method is auto
    renderMethodOptionalFields: function() {
        var selection = this.$('#method').val();
        if (selection == 'auto') {
            $('#methodOptionalFields').hide();
        } else {
            $('#methodOptionalFields').show();
        }
    },

    // show/hide respective dropdowns based on selected connection type
    renderCTypeOptionalFields: function() {
        var selection = this.$('#ctype').val();
        if (this.connection) {
            selection = this.connection.get('ctype');
        }
        if (selection == 'team') {
            $('#teamProfiles, #multiDevice').show();
            $('#bondProfiles, #singleDevice').hide();
        } else if (selection == 'ethernet') {
            $('#teamProfiles, #multiDevice #bondProfiles').hide();
            $('#singleDevice').show();
        } else {
            //bond
            $('#teamProfiles, #singleDevice').hide();
            $('#bondProfiles, #multiDevice').show();
        }
    },

    initHandlebarHelpers: function() {
        var _this = this;
        Handlebars.registerHelper('selectedCtype', function(ctype) {
            var html = '';
            if (ctype == _this.connection.get('ctype')) {
                html = 'selected="selected"';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('selectedTeamProfile', function(profile) {
            var html = '';
            if (profile == _this.connection.get('team_profile')) {
                html = 'selected="selected"';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('selectedBondProfile', function(profile) {
            var html = '';
            if (profile == _this.connection.get('bond_profile')) {
                html = 'selected="selected"';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('selectedDevice', function(device) {
            var html = '';
            if (device.cname == _this.connection.get('name')) {
                html = 'selected="selected"';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('isAuto', function(connection, opts) {
            if (connection.ipv4_method == 'auto') {
                return opts.fn(this);
            }
            return opts.inverse(this);
        });
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('network', {
            trigger: true
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

EditNFSExportView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.nfs_edit_nfs_export;
        this.shares = new ShareCollection();
        this.nfsExportGroupId = this.options.nfsExportGroupId;
        if (this.nfsExportGroupId > 0) {
            this.nfsExportGroup = new NFSExportGroup({
                id: this.nfsExportGroupId
            });
            this.nfsExportNotEmpty = true;
            this.dependencies.push(this.nfsExportGroup);
        } else {
            this.nfsExportGroup = new NFSExportGroup();
        }
        // dont paginate shares for now
        this.shares.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.shares);
        this.modify_choices = [{
            name: 'Writable',
            value: 'rw'
        },
        {
            name: 'Read only',
            value: 'ro'
        },
        ];
        this.sync_choices = [{
            name: 'async',
            value: 'async'
        },
        {
            name: 'sync',
            value: 'sync'
        },
        ];
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderExportForm, this);
        return this;
    },

    renderExportForm: function() {
        var _this = this;
        $(this.el).html(this.template({
            shares: this.shares.toJSON(),
            nfsExportGrp: this.nfsExportGroup.toJSON(),
            nfsExportNotEmpty: this.nfsExportNotEmpty,
            modify_choices: this.modify_choices,
            sync_choices: this.sync_choices
        }));
        this.$('#shares').select2();
        this.$('#edit-nfs-export-form :input').tooltip({
            placement: 'right'
        });

        $.validator.setDefaults({
            ignore: ':hidden:not(select)'
        });

        this.$('#edit-nfs-export-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                shares: 'required',
                host_str: 'required'
            },
            submitHandler: function() {
                var button = $('#update-nfs-export');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/nfs-exports';
                if (_this.nfsExportGroupId > 0) {
                    submitmethod = 'PUT';
                    posturl += '/' + _this.nfsExportGroupId;
                }
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#edit-nfs-export-form').getJSON()),
                    success: function() {
                        app_router.navigate('nfs-exports', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });
                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('nfs-exports', {
            trigger: true
        });
    },


    initHandlebarHelpers: function() {
        var _this = this;
        Handlebars.registerHelper('showSelectedShare', function(shareName, nfsExports) {
            var html = '',
                nShares = _.map(nfsExports,
                    function(e) {
                        return e.share;
                    });

            if (_.indexOf(nShares, shareName) != -1) {
                html += 'selected="selected"';
            }

            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('accessType_editView', function(nfsEditable, choiceValue) {
            var html = '';
            if (nfsEditable == choiceValue) {
                html += 'checked="checked"';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('accessType_addView', function(choiceName) {
            var html = '';
            if (choiceName == 'Writable') {
                html += 'checked="checked"';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('responseType_editView', function(nfsSyncable, choiceValue) {
            var html = '';
            if (nfsSyncable == choiceValue) {
                html += 'checked="checked"';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('responseType_addView', function(choiceName) {
            var html = '';
            if (choiceName == 'async') {
                html += 'checked="checked"';
            }
            return new Handlebars.SafeString(html);
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

EmailView = RockstorLayoutView.extend({
    events: {
        'click #Add-email-address': 'renderEmailForm',
        'click #cancel': 'cancel',
        'click .email-delete': 'deleteEmail',
        'click .send-test-message': 'sendTestEmail',
        'click #test-smtp': 'checkSmtpAuth'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.email_email_setup;
        this.updatetemplate = window.JST.email_email;
        this.emails = new EmailAccountCollection();
        this.dependencies.push(this.emails);
        this.emails.on('reset', this.renderEmail, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.emails.fetch();
        var _this = this;
        this.fetch(_this.renderEmail, _this);
        return this;
    },

    renderEmail: function() {
        var email = {};
        if (this.emails.length > 0) {
            email = this.emails.at(0).toJSON();
        }
        var isEmailNull = true;
        if (Object.keys(email).length > 0) {
            isEmailNull = false;
        }

        $(this.el).html(this.template({
            email: email,
            isEmailNull: isEmailNull
        }));
    },

    renderEmailForm: function() {
        var _this = this;
        var email = {};
        if (this.emails.length > 0) {
            email = this.emails.at(0).toJSON();
        }
        $(this.el).html(this.updatetemplate({
            email: email
        }));

        this.$('#enable_username').closest('.form-group').next().toggle(); //on load hide username div elem
        this.$('#enable_username').click(function() { //on checkbox change switch username hide/show enable/disabled
            $('#username').prop('disabled', !this.checked);
            if (!this.checked) {
                $('#username').val('');
            } // clear username field for erroneous check-uncheck
            $('#enable_username').closest('.form-group').next().toggle(1000);
        });

        this.$('#email-form input').tooltip({
            placement: 'right'
        });

        this.validator = this.$('#email-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                name: 'required',
                sender: 'required',
                password: 'required',
                smtp_server: {
                    required: true,
                    pattern: /^(([a-z\d]|[a-z\d][a-z\d\-]*[a-z\d])\.)*([a-z\d]|[a-z\d][a-z\d\-]*[a-z\d])$/
                },
                receiver: 'required',
                username: {
                    required: '#enable_username:checked' //username field required only if username checkbox checked else empty
                },
                port: {
                    number: true
                }
            },
            messages: {
                smtp_server: {
                    pattern: 'Please provide a correct hostname with only lowercase letters, digits and -'
                }
            },

            submitHandler: function() {
                var button = $('#add-email');
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/email';
                var data = _this.$('#email-form').getJSON();
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        enableButton(button);
                        _this.emails.fetch({
                            reset: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    checkSmtpAuth: function(event) {
        var _this = this;
        var check_auth = true;
        $('.auth-results').hide();
        $('.check-smtp-auth').each(function() {
            if ($(this).is(':visible')) {
                check_auth = check_auth && ($.trim(this.value).length > 0);
            }
        });
        if (check_auth) {
            var data = _this.$('#email-form').getJSON();
            $.ajax({
                url: '/api/email/check-smtp-auth',
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function(response) {
                    var auth_result = JSON.parse(response).smtp_auth ? '#auth_success' : '#auth_failed';
                    $(auth_result).fadeIn(500);
                },
            });
        } else {
            $('#auth_failed').fadeIn(500);
        }
    },

    deleteEmail: function(event) {
        event.preventDefault();
        var _this = this;
        if (confirm('Are you sure about deleting this Email Account?')) {
            $.ajax({
                url: '/api/email',
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    _this.emails.fetch({
                        reset: true
                    });
                },
                error: function(xhr, status, error) {}
            });
        } else {
            return false;
        }
    },

    sendTestEmail: function(event) {
        event.preventDefault();
        $.ajax({
            url: '/api/email/send-test-email',
            type: 'POST',
            dataType: 'json',
            success: function() {
                $('#test-message-confirm').modal({
                    keyboard: false,
                    show: false,
                    backdrop: 'static'
                });
                $('#test-message-confirm').modal('show');
            },
        });
    },

    cancel: function(event) {
        this.renderEmail();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('add_email', function(inputName) {
            var html = '';
            if (inputName == 'name') {
                if ('name' in this.email) {
                    html += 'value="' + this.email.name + '"';
                }
                html += 'title="Name associated with the email, eg: firstname lastname."';
            }
            if (inputName == 'email') {
                if ('sender' in this.email) {
                    html += 'value="' + this.email.sender + '"';
                }
                html += 'title="Rockstor will send email notifications from this address / account. For better security we highly recommend using a separate dedicated email account for this purpose."';
            }
            if (inputName == 'username') { //username value to use for smtp auth
                if ('username' in this.email) {
                    html += 'value="' + this.email.username + '"';
                }
                html += 'title="Enter username required for smtp authentication"';
            }
            if (inputName == 'smtp') {
                if ('smtp_server' in this.email) {
                    html += 'value="' + this.email.smtp_server + '"';
                }
                html += 'title="smtp server url of your email provider. eg: smtp.gmail.com, smtp.zoho.com etc..';
                html += 'If using a Google account please Allow less secure apps to access accounts"';
            }
            if (inputName == 'port') {
                if ('port' in this.email) {
                    html += 'value="' + this.email.port + '"';
                }
                html += 'value=587 title="port number for the smtp server. Defaults to 587"';
            }
            if (inputName == 'recipient') {
                if ('receiver' in this.email) {
                    html += 'value="' + this.email.receiver + '"';
                }
                html += 'title="Rockstor will send email notifications to this address. eg: your personal email."';
            }
            return new Handlebars.SafeString(html);
        });

    }
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

GroupsView = RockstorLayoutView.extend({
    events: {
        'click .delete-group': 'deleteGroup',
        'click .edit-group': 'editGroup'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.users_groups;
        this.collection = new GroupCollection();
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderGroups, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.collection.fetch();
        return this;
    },

    renderGroups: function() {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }

        this.rockstorGroups = this.collection.filter(function(grp) {
            return (grp.get('admin'));
        });
        this.otherSystemGroups = this.collection.filter(function(grp) {
            return (!grp.get('admin'));
        });

        $(this.el).html(this.template({
            collection: this.collection,
            rockstorGroups: this.rockstorGroups,
            otherSystemGroups: this.otherSystemGroups,
        }));
        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });

        this.renderDataTables();
    },

    deleteGroup: function(event) {
        event.preventDefault();
        var _this = this;
        var groupname = $(event.currentTarget).attr('data-groupname');
        if (confirm('Delete group:  ' + groupname + '. Are you sure?')) {
            $.ajax({
                url: '/api/groups/' + groupname,
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    _this.collection.fetch();
                },
                error: function(xhr, status, error) {}
            });
        } else {
            return false;
        }
    },

    editGroup: function(event) {
        if (event) event.preventDefault();
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var groupname = $(event.currentTarget).attr('data-groupname');
        app_router.navigate('groups/' + groupname + '/edit', {
            trigger: true
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_groups_table', function(adminBool) {
            var html = '';
            var filteredCollection = null;
            if (adminBool) {
                filteredCollection = this.rockstorGroups;
            } else {
                filteredCollection = this.otherSystemGroups;
            }

            if (filteredCollection == null) {
                html += 'No groups exist';
            } else {
                for (var i = 0; i < filteredCollection.length; i++) {
                    html += '<tr>';
                    html += '<td><i class="fa fa-group"></i> ' + filteredCollection[i].get('groupname') + '</td>';
                    html += '<td>' + filteredCollection[i].get('gid') + '</td>';
                    html += '<td>';
                    html += '<a href="#" class="delete-group" data-groupname="' + filteredCollection[i].get('groupname') + '" rel="tooltip" title="Delete group"><i class="glyphicon glyphicon-trash"></i></a>';
                    html += '</td>';
                    html += '</tr>';
                }

            }
            return new Handlebars.SafeString(html);
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

/*
 * View for the homepage/dashboard
 */

var HomeLayoutView = RockstorLayoutView.extend({
    events: {},

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.home_home_template;
        // create models and collections
        this.appliances = new ApplianceCollection();
        this.dashboardconfig = new DashboardConfig();
        // add dependencies
        this.dependencies.push(this.appliances);
        this.dependencies.push(this.dashboardconfig);

        this.selectedWidgetNames = [];
        this.widgetViews = []; // widgets add themselves here so that their cleanup routines can be called from this view's cleanup
        this.on('widgetClicked', this.widgetClicked, this);
    },

    render: function() {

        this.fetch(this.renderSubViews, this);
        return this;

    },

    renderSubViews: function() {

        // render template
        $(this.el).empty();
        $(this.el).append(this.template());

        var _this = this;
        $.ajax({
            url: '/setup_user',
            type: 'GET',
            dataType: 'json',
            success: function(data, status, xhr) {
                if (data.new_setup) {
                    $.ajax({
                        url: '/setup_user',
                        type: 'PUT',
                        dataType: 'json',
                        success: function(data, status, xhr) {
                            $('#update-version-modal').modal({
                                keyboard: false,
                                show: false,
                                backdrop: 'static'
                            });
                            $('#update-version-modal').modal('show');

                        },
                        error: function(xhr, status, error) {

                        }
                    });
                } else {
                    var subscriptions = new UpdateSubscriptionCollection();
                    subscriptions.fetch({
                        success: function(collection, response, options) {
                            if (collection.length == 0) {
                                $('#update-channel-modal').modal({
                                    keyboard: false,
                                    show: false,
                                    backdrop: 'static'
                                });
                                $('#update-channel-modal').modal('show');
                            }

                        }
                    });
                }
            },
            error: function(xhr, status, error) {

            }
        });
        $('#update-version-modal #updateYes').click(function(event) {
            $('#update-version-modal').modal('hide');
            app_router.navigate('version', {
                trigger: true
            });

        });
        $('#update-channel-modal #activate').click(function(event) {
            $('#update-channel-modal').modal('hide');
            app_router.navigate('version', {
                trigger: true
            });
        });
        this.widgetsContainer = this.$('.widgets-container');
        // render dashboard widgets
        this.renderWidgets();

        this.dashboardConfigView = new DashboardConfigView({
            parentView: this,
            dashboardconfig: this.dashboardconfig
        });
        $('#dashboard-config-ph').append(this.dashboardConfigView.render().el);
    },

    renderWidgets: function() {
        var _this = this;
        this.widgetsContainer.empty();

        var selectedWidgets = this.dashboardconfig.getConfig();
        this.widgetViews.length = 0;
        // Add widgets to ul (widgetsContainer);
        _.each(selectedWidgets, function(widget, index, list) {
            _this.addWidget(widget, _this.widgetsContainer, _this.widgetViews);
        });
        // call shapeshift to do layout
        this.widgetsContainer.shapeshift({
            align: 'left',
            minColumns: 10,
            gutterX: 5,
            gutterY: 5,
            paddingX: 5,
            paddingY: 5,
            handle: 'div.widget-header'
        });

        // set handler for drop event, when a widget is moved around and
        // the drop completes.
        this.widgetsContainer.on('ss-drop-complete', function(e, selected) {
            _this.saveWidgetConfiguration();
        });
    },

    addWidgetByName: function(widgetName) {
        var widget = RockStorWidgets.findByName(widgetName);
        this.addWidget(widget, this.widgetsContainer, this.widgetViews);
    },

    addWidget: function(widget, container, widgetViews) {
        var div = null;
        var widgetDef = RockStorWidgets.findByName(widget.name);
        var viewName = widgetDef.view;
        if (!_.isUndefined(window[viewName] && !_.isNull(window[viewName]))) {
            // Create widget view
            var view = new window[viewName]({
                displayName: widgetDef.displayName,
                name: widget.name,
                cleanupArray: widgetViews,
                parentView: this,
                maximized: widget.maximized
            });

            // create shapeshift div for widget and render
            div = $('<div>');
            div.attr('class', 'widget-ph');
            if (widget.maximized) {
                div.attr('data-ss-colspan', widgetDef.maxCols);
                div.attr('data-ss-rowspan', widgetDef.maxRows);
            } else {
                div.attr('data-ss-colspan', widgetDef.cols);
                div.attr('data-ss-rowspan', widgetDef.rows);
            }
            div.attr('data-widget-name', widget.name);
            container.append(div);
            var position_div = $('<div class="position"></div>');
            div.append(position_div);
            position_div.append(view.render().el);

            // Add widget view to widget list
            widgetViews.push(view);
        }
    },

    findWidgetView: function(name) {
        var i = 0,
            found = false;
        for (i = 0; i < this.widgetViews.length; i++) {
            if (this.widgetViews[i].name == name) {
                return [this.widgetViews[i], i];
            }
        }
        return [null, null];
    },

    removeWidget: function(name, view) {
        // view cleanup and remove
        view.cleanup();
        view.remove();

        // remove view shapeshift div
        var ssDiv = $(this.el).find('div[data-widget-name="' + name + '"]');
        ssDiv.remove();

        // remove view from widget list
        this.widgetViews = _.reject(this.widgetViews, function(view) {
            return view.name == name;
        });

        // trigger ss rearrange
        this.widgetsContainer.trigger('ss-rearrange');

        // uncheck widget in widget selection list
        this.dashboardConfigView.setCheckbox(name, false);

        // save new widget configuration
        this.saveWidgetConfiguration();
    },

    saveWidgetConfiguration: function() {
        var _this = this;
        var divs = this.widgetsContainer.children('div.widget-ph');
        var tmp = [];
        divs.each(function(index) {
            var div = $(this);
            var name = div.data('widget-name');
            var widget = _.find(_this.widgetViews, function(w) {
                return w.name == name;
            });
            tmp.push({
                name: name,
                position: index,
                maximized: widget.maximized
            });
        });
        this.dashboardconfig.set({
            widgets: JSON.stringify(tmp)
        });
        this.dashboardconfig.save(null, {
            success: function(model, response, options) {},
            error: function(model, xhr, options) {
                logger.debug('error while saving dashboardconfig');
                var msg = xhr.responseText;
                try {
                    msg = JSON.parse(msg).detail;
                } catch (err) {
                    console.log(err);
                }
                logger.debug(msg);
            }
        });
    },

    widgetClicked: function(name, selected) {
        if (selected) {
            this.addWidgetByName(name);
            this.widgetsContainer.trigger('ss-destroy');
            this.widgetsContainer.shapeshift({
                align: 'left',
                minColumns: 10
            });
            this.saveWidgetConfiguration();
        } else {
            var tmp = this.findWidgetView(name);
            var view = tmp[0];
            if (view) {
                this.removeWidget(name, view);
            }
        }
    },

    cleanup: function() {
        _.each(this.widgetViews, function(widget) {
            if (_.isFunction(widget.cleanup)) {
                widget.cleanup();
            }
        });
        this.dashboardConfigView.cleanup();
    },

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

InitView = RockstorLayoutView.extend({

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
    },

    scanNetwork: function() {
        var _this = this;
        $.ajax({
            url: '/api/network/refresh',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.networkInterfaces.fetch();
            }
        });
    },

    saveAppliance: function() {
        var _this = this;
        // create current appliance if not created already
        if (this.appliances.length > 0) {
            var current_appliance = this.appliances.find(function(appliance) {
                return appliance.get('current_appliance') == true;
            });
        }
        if (_.isUndefined(current_appliance)) {
            var new_appliance = new Appliance();
            new_appliance.save({
                hostname: RockStorGlobals.hostname,
                ip: RockStorGlobals.ip,
                current_appliance: true
            }, {
                success: function(model, response, options) {
                    setup_done = true;
                    _this.scanDisks();
                },
                error: function(model, xhr, options) {
                    var msg = xhr.responseText;
                    try {
                        msg = JSON.parse(msg).detail;
                    } catch (err) {
                        console.log(err);
                    }
                }
            });
        } else {
            app_router.navigate('home', {
                trigger: true
            });
        }
    },

    scanDisks: function() {
        var _this = this;
        $.ajax({
            url: '/api/disks/scan',
            type: 'POST'
        }).done(function() {
            _this.goToRoot();
        });
    },

    goToRoot: function() {
        window.location.replace('/');

    },

});


LoginView = InitView.extend({
    tagName: 'div',

    events: {
        'click #sign_in': 'login',
    },

    initialize: function() {
        this.login_template = window.JST.home_login_template;
        this.user_create_template = window.JST.home_user_create_template;
        this.networkInterfaces = new NetworkConnectionCollection();
        this.networkInterfaces.pageSize = RockStorGlobals.maxPageSize;
        this.networkInterfaces.on('reset', this.saveAppliance, this);
        this.appliances = new ApplianceCollection();

    },

    render: function() {
        var _this = this;
        if (!RockStorGlobals.setup_user) {
            $(this.el).append(this.user_create_template());
            this.validator = this.$('#user-create-form').validate({
                onfocusout: false,
                onkeyup: false,
                rules: {
                    username: 'required',
                    password: 'required',
                    hostname: 'required',
                    password_confirmation: {
                        required: 'true',
                        equalTo: '#password'
                    }
                },
                messages: {
                    password_confirmation: {
                        equalTo: 'The passwords do not match'
                    }
                },
                submitHandler: function() {
                    var username = _this.$('#username').val();
                    var password = _this.$('#password').val();
                    RockStorGlobals.hostname = _this.$('#hostname').val();

                    var setupUserModel = Backbone.Model.extend({
                        urlRoot: '/setup_user',
                    });
                    var user = new setupUserModel();
                    user.save({
                        username: username,
                        password: password,
                        is_active: true
                    }, {
                        success: function(model, response, options) {
                            _this.makeLoginRequest(username, password);
                        },
                        error: function(model, xhr, options) {}
                    });

                    return false;
                }
            });
        }
        return this;
    },

    login: function(event) {
        if (!_.isUndefined(event) && !_.isNull(event)) {
            event.preventDefault();
        }
        this.makeLoginRequest(this.$('#username').val(), this.$('#password').val());
    },

    makeLoginRequest: function(username, password) {
        var _this = this;
        $.ajax({
            url: '/api/login',
            type: 'POST',
            dataType: 'json',
            data: {
                username: username,
                password: password
            },
            success: function(data, status, xhr) {
                _this.scanNetwork();

            },
            error: function(xhr, status, error) {
                _this.$('.messages').html('<label class="error">Login incorrect!</label>');
            }
        });
    },

});


SetupView = InitView.extend({
    tagName: 'div',

    events: {
        'click #next-page': 'nextPage',
        'click #prev-page': 'prevPage'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.setup_setup;
        this.pages = [null, SetupDisksView, SetupSystemView];
        this.sidebars = [null, 'disks'];
        this.current_page = 1;
        this.current_view = null;
        this.appliances = new ApplianceCollection();
        this.appliances.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.appliances);

        //next three lines are supposed to refresh connection state?
        this.networkInterfaces = new NetworkConnectionCollection();
        this.networkInterfaces.pageSize = RockStorGlobals.maxPageSize;
        this.networkInterfaces.on('reset', this.saveAppliance, this);

    },

    render: function() {
        $(this.el).html(this.template());
        var _this = this;
        this.fetch(this.renderCurrentPage, this);
        return this;
    },

    renderCurrentPage: function() {
        opts = {
            appliances: this.appliances
        };
        this.renderSidebar('setup', this.sidebars[this.current_page]);
        this.current_view = new this.pages[this.current_page](opts);
        this.$('#current-page-inner').html(this.current_view.render().el);

    },

    nextPage: function() {
        if (this.current_page < this.pages.length - 1) {
            this.current_page = this.current_page + 1;
            this.renderCurrentPage();
            this.modifyButtonText();
            this.setCurrentStepTitle(this.current_page, this.current_page - 1);
        } else {
            this.save();
        }
    },

    prevPage: function() {
        if (this.current_page > 1) {
            this.current_page = this.current_page - 1;
            this.renderCurrentPage();
            this.modifyButtonText();
            this.setCurrentStepTitle(this.current_page, this.current_page + 1);
        }
    },

    modifyButtonText: function() {
        if (this.lastPage()) {
            this.$('#next-page').html('Finish');
        } else {
            this.$('#next-page').html('Next');
        }
    },

    lastPage: function() {
        return (this.current_page == (this.pages.length - 1));
    },

    save: function() {
        // hostname is the last page, so check if the form is filled
        this.current_view.$('#set-hostname-form').submit();
        if (!_.isUndefined(RockStorGlobals.hostname) &&
            !_.isNull(RockStorGlobals.hostname)) {
            var button = this.$('#next-page');
            if (buttonDisabled(button)) return false;
            disableButton(button);
            this.scanNetwork();
        }
    },

    setCurrentStepTitle: function(new_step, old_step) {
        old_step_str = old_step + '';
        old_sel_str = '#setup-titles li[data-step="' + old_step_str + '"]';
        this.$(old_sel_str).removeClass('current-step');
        new_step_str = new_step + '';
        new_sel_str = '#setup-titles li[data-step="' + new_step_str + '"]';
        this.$(new_sel_str).addClass('current-step');
    },

    renderSidebar: function(name, selected) {
        var sidenavTemplate = window.JST['common_sidenav_' + name];
        $('#sidebar-inner').html(sidenavTemplate({
            selected: selected
        }));
    }


});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2015 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */
LogsView = RockstorLayoutView.extend({
    events: {
        'click .logs-item': 'LogBaskets',
        'click #live-log': 'LoadServerLogs',
        'click #download-logs': 'SubmitDownloadQueue',
        'click #reader-logs': 'SubmitReaderLogDownload',
        'click #modal_resize': 'ModalSwitchSize',
        'click #code_increase_size, #code_decrease_size': 'ModalResizeText',
        'change #read_type, #logs_options': 'RequestLogSize',
        'hidden.bs.modal #log_reader': 'ModalClose'
    },

    initialize: function() {
        RockStorSocket.logManager = io.connect('/logmanager', {
            'secure': true,
            'force new connection': true
        });
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.logs_logs;
        this.avail_logs;
        this.initHandlebarHelpers();
        this.download_basket = [];
    },

    render: function() {
        this.$el.html(this.template);
        this.$('[rel=tooltip]').tooltip({
            placement: 'top'
        });
        this.$('#download-logs').hide();
        RockStorSocket.addListener(this.getLogContent, this, 'logManager:logcontent');
        RockStorSocket.addListener(this.getLogSize, this, 'logManager:logsize');
        RockStorSocket.addListener(this.getLogsArchive, this, 'logManager:logsdownload');
        RockStorSocket.addListener(this.getRotatedLogs, this, 'logManager:rotatedlogs');
        return this;
    },

    getRotatedLogs: function(data) {
        //Handles rotated logs list got on connection to data_collector
        var _this = this;
        var reader_options = '<optgroup label="Rotated Logs">';
        var downloader_divs = '';
        $.each(data.rotated_logs_list, function(index, val) {
            //If rotated log is compress we don't add it to logs available for reading
            //example: usually nginx rotated logs
            var rotated_log_descriptor = val.log.replace(val.logfamily, _this.avail_logs[val.logfamily]);
            if (val.log.indexOf('.gz') < 0) reader_options += '<option value="' + val.log + '">' + rotated_log_descriptor + '</option>';
            downloader_divs += '<div class="logs-item" log="' + val.log + '" rotated="true">';
            downloader_divs += '<i class="fa fa-gears" aria-hidden="true"></i> ' + rotated_log_descriptor + '</div>';
        });
        reader_options += '</optgroup>';
        $('#logs_options').append(reader_options);
        $('#avail_logs').append(downloader_divs);
    },

    ModalClose: function(event) {
        //When LogReader modal window close emit to ensure any running tail -f get killed
        RockStorSocket.logManager.emit('livereading', 'kill');
    },

    ModalSwitchSize: function(event) {
        //LogReader modal window func to move small/large and viceversa
        event.preventDefault();
        var modal_container = $('#log_reader').children().first();
        var resize_icon = $(event.currentTarget).children().first();
        if (modal_container.hasClass('modal-lg')) {
            modal_container.removeClass('modal-lg');
            resize_icon.switchClass('glyphicon-resize-small', 'glyphicon-resize-full');
        } else {
            modal_container.addClass('modal-lg');
            resize_icon.switchClass('glyphicon-resize-full', 'glyphicon-resize-small');
        }
    },

    ModalResizeText: function(event) {
        //LogReader modal window func to resize code text size
        event.preventDefault();
        var resize_emitter = event.currentTarget.id;
        var size_delta = resize_emitter == 'code_increase_size' ? 1 : -1;
        var code_font_size = parseInt($('#system_log').css('font-size'));
        $('#system_log').css('font-size', code_font_size + size_delta);
    },

    getLogsArchive: function(data) {
        //Handle Logs tar archive based
        //If request sent from Archive builder show a link for download
        //Otherwise if from LogReader link auto-download archive
        var _this = this;
        if (data.recipient == 'download_response') {
            var response_text = 'Logs Archive ready for download - ';
            response_text += '<a href="' + data.archive_name + '" download>Click to download</a>';
            $('#' + data.recipient).html(response_text);
        } else {
            //On Log Reader we use a fake hidden link and after log download request
            //we trigger a click on it
            $('#reader-log-download').attr('href', data.archive_name);
            $('#reader-log-download')[0].click();
        }
    },

    getLogContent: function(data) {
        //When data is pushed from backend data_collector add it to LogReader and autoscroll to the end
        var _this = this;
        _this.updateLogProgress(data.current_rows, data.total_rows);
        $('#system_log').append(data.chunk_content);
        $('#system_log').closest('pre').scrollTop($('#system_log').closest('pre')[0].scrollHeight + 100);
        if ($('#logsize').text().length == 0) {
            $('#logsize').text((parseInt(data.content_size) / 1024).toFixed(2) + 'kB');
        }
    },

    getLogSize: function(data) {
        //Get log file size while selecting reader (cat,tail, etc) and log
        //If log file size greater than 500kB && reader is cat alerts user about possible long reading time
        log_size = (parseInt(data) / 1024).toFixed(2);
        if (log_size > 500) {
            var size_warning = '<div class="alert alert-warning logsizealert">';
            size_warning += '<strong>Warning!</strong>&nbsp;Log size is greater than 500kB (';
            size_warning += log_size + ' kB) and reading with cat could take a while</div>';
            $(size_warning).appendTo('#reader-block').hide().fadeIn(500);
        }
    },

    RequestLogSize: function(event) {
        //Call backend data_collector and ask for current log size
        $('.logsizealert').fadeOut(100, function() {
            $(this).remove();
        });
        if ($('#read_type').val() == 'cat') {
            current_log = $('#logs_options').val();
            RockStorSocket.logManager.emit('getfilesize', current_log);
        }
    },

    updateLogProgress: function(partial, total) {
        //Nicely update progressbar in LogReader modal
        $('#reader_progress').addClass('progress-bar-striped');
        current_rows = parseInt(partial);
        total_rows = parseInt(total);
        current_percent = (current_rows / total_rows * 100).toFixed(2);
        $('#reader_progress').attr('aria-valuenow', current_percent);
        $('#reader_progress').width(current_percent + '%');
        $('#reader_progress').text(current_percent + '%');
        if (current_rows == total_rows) {
            $('#reader_progress').removeClass('progress-bar-striped');
            $('#live-log').removeClass('disabled'); // Log totally rendered, enable again live log request button
        }
    },

    ShowLogDownload: function() {
        var download_queue = $('#download_logs').children();
        if (download_queue.length > 0) {
            $('#download-logs').show();
        } else {
            $('#download-logs').hide();
        }
    },

    SubmitReaderLogDownload: function(event) {
        _this = this;
        event.preventDefault();
        var log_file = $('#logs_options').val();
        log_file = log_file.split();
        RockStorSocket.logManager.emit('downloadlogs', log_file, 'reader_response');
    },

    SubmitDownloadQueue: function(event) {
        _this = this;
        _this.download_basket = [];
        $('#download_response').empty();
        var download_queue = $('#download_logs').children();
        download_queue.each(function() {
            _this.download_basket.push($(this).attr('log'));
        });
        $('#download-logs').blur();
        RockStorSocket.logManager.emit('downloadlogs', _this.download_basket, 'download_response');
    },

    LogBaskets: function(event) {
        //This function serves divs switching between Available Logs and Logs download queue
        var _this = this;
        event.preventDefault();
        $('#download_response').empty();
        var parent_div = $(event.currentTarget).parent().attr('id');
        var dest_div = parent_div == 'avail_logs' ? '#download_logs' : '#avail_logs';
        var is_rotated = ($(event.currentTarget).attr('rotated') === 'true');
        $(event.currentTarget).fadeTo(500, 0, function() {
            //If selected log is a rotated one append to list bottom
            //otherwise append to top
            if (is_rotated) {
                $(dest_div).append(event.currentTarget);
            } else {
                $(dest_div).prepend(event.currentTarget);
            }
            $(event.currentTarget).fadeTo(500, 1);
            _this.ShowLogDownload();
        });
    },

    LoadServerLogs: function() {
        //On user action for log reading append some info to LogReader modal, open it and ask backend for data
        $('#live-log').addClass('disabled'); // prevent users from submitting multiple reading requests same time
        $('#logsize').empty();
        var _this = this;
        var read_type = $('#read_type').val();
        var logs_options = $('#logs_options').val();
        var log_file = $('#logs_options option:selected').text();
        var read_tool = $('#read_type option:selected').text();
        var modal_title = '<b>Selected log:</b>&nbsp; <span>' + log_file + '</span>';
        modal_title += '<br/><b>Reader type:</b>&nbsp; <span>' + read_tool + '</span>';
        $('#LogReaderLabel').html(modal_title);
        $('#system_log').empty();
        _this.ShowLogReader();
        RockStorSocket.logManager.emit('readlog', read_type, logs_options);
    },

    ShowLogReader: function() {
        $('#log_reader').modal({
            keyboard: false,
            show: false,
            backdrop: 'static'
        });
        $('#log_reader').modal('show');
    },

    cleanup: function() {
        RockStorSocket.removeOneListener('logManager');
    },

    initHandlebarHelpers: function() {
        var _this = this;
        _this.avail_logs = {
            'rockstor': 'Rockstor Logs',
            'supervisord': 'Supervisord (Process monitor)',
            'dmesg': 'Dmesg (Kernel)',
            'nmbd': 'Nmbd (Samba)',
            'smbd': 'Smbd (Samba)',
            'winbindd': 'Winbindd (Samba)',
            'nginx': 'Nginx (WebUI)',
            'nginx_stdout': 'Nginx stdout (WebUI)',
            'nginx_stderr': 'Nginx stderr (WebUI)',
            'gunicorn': 'Gunicorn (WebUI)',
            'gunicorn_stdout': 'Gunicorn stdout (WebUI)',
            'gunicorn_stderr': 'Gunicorn stderr (WebUI)',
            'yum': 'Yum (System updates)'
        };

        Handlebars.registerHelper('print_logs_divs', function() {
            var html = '';
            $.each(_this.avail_logs, function(key, val) {
                html += '<div class="logs-item" log="' + key + '" rotated="false">';
                html += '<i class="fa fa-gear" aria-hidden="true"></i> ' + val + '</div>';
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('print_logs_options', function() {
            var html = '<optgroup label="Current Logs">';
            $.each(_this.avail_logs, function(key, val) {
                html += '<option value="' + key + '">' + val + '</option>';
            });
            html += '</optgroup>';
            return new Handlebars.SafeString(html);
        });

    }
});

Cocktail.mixin(LogsView, PaginationMixin);
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * Rockstor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * Rockstor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

LuksDiskView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel',
        'click #crypttab_selection': 'crypttab_selection_changed',
        'click #create_keyfile_tick': 'create_keyfile_tick_toggle'
    },

    initialize: function () {
        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.disk_luks_disk;
        this.disks = new DiskCollection();
        this.diskId = this.options.diskId;
        this.dependencies.push(this.disks);
        this.initHandlebarHelpers();
    },

    render: function () {
        this.fetch(this.renderDisksForm, this);
        return this;
    },


    renderDisksForm: function () {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var _this = this;
        var disk_id = this.diskId;
        var disk_obj = this.disks.find(function(d) {
            return (d.get('id') == disk_id);
        });
        var serialNumber = disk_obj.get('serial');
        var diskRole = disk_obj.get('role');
        var disk_btrfs_uuid = disk_obj.get('btrfs_uuid');
        var disk_pool = disk_obj.get('pool');
        var disk_name = disk_obj.get('name');
        // parse the diskRole json to a local object
        try {
            var role_obj = JSON.parse(diskRole);
        } catch (e) {
                // as we can't convert this drives role to json we assume
                // it's isRoleUsable status by false
            role_obj = null;
        }
        // extract our partitions obj from the role_obj if there is one.
        // @todo Could be used in the future to add js validation against
        // @todo partitioned LUKS containers, ie we leave them alone.
        var partitions;
        if (role_obj != null && role_obj.hasOwnProperty('partitions')) {
            partitions = role_obj.partitions;
        } else {
            // else we set our partitions to be an empty object
            partitions = {};
        }
        // extract any existing redirect role value.
        var current_redirect;
        if (role_obj != null && role_obj.hasOwnProperty('redirect')) {
            // if there is a redirect role then set our current role to it
            current_redirect = role_obj['redirect'];
        } else {
            current_redirect = '';
        }
        // set local convenience flag if device is a LUKS container.
        // and grab the luks_container_uuid if available
        var is_luks;
        // Default to appearing as if we are unlocked if we fail for
        // some reason to retrieve the obligatory unlocked flag. This
        // way we fail safe as unlocked containers can't be deleted.
        var is_unlocked = true;
        // Establish a unique initial LUKS container uuid placeholder first,
        // just in case we end up some how without a LUKS role uuid key entry.
        // Important as we use this value to name keyfiles so must be clearly
        // identifiable and unique. UUID of actual container obviously better.
        var luks_container_uuid = disk_name;
        // While we are inside the LUKS role we can update current_crypttab
        // Assume we have no crypttab entry until we find otherwise.
        var current_crypttab_status = false;
        // Likewise we can also retrieve keyfile existence
        var keyfile_exists = false;
        if (role_obj !== null && role_obj.hasOwnProperty('LUKS')) {
            is_luks = true;
            if (role_obj['LUKS'].hasOwnProperty('uuid')) {
                luks_container_uuid = role_obj['LUKS']['uuid'];
            }
            // if we have an unlocked entry, extract it.
            if (role_obj['LUKS'].hasOwnProperty('unlocked')) {
                is_unlocked = role_obj['LUKS']['unlocked'];
            }
            // if we have a crypttab entry, extract it.
            if (role_obj['LUKS'].hasOwnProperty('crypttab')) {
                current_crypttab_status = role_obj['LUKS']['crypttab'];
            }
            if (role_obj['LUKS'].hasOwnProperty('keyfileExists')) {
                keyfile_exists = role_obj['LUKS']['keyfileExists'];
            }
        } else {
            is_luks = false;
        }
        // Populate our crypttab_selection text object along with values.
        // A value of false is used to indicate no crypttab entry exists.
        // see display_crypttab_entry handlebar helper below.
        // @todo In the future these options could be extended with a custom
        // @todo keyfile option to allow users to specify a keyfile with path.
        var crypttab_options = {
            'No auto unlock': false,
            'Manual passphrase via local console': 'none',
            'Auto unlock via keyfile': '/root/keyfile-' + luks_container_uuid
        };
        // additional convenience flag if device is an open LUKS volume.
        var is_open_luks;
        if (role_obj !== null && role_obj.hasOwnProperty('openLUKS')) {
            is_open_luks = true;
        } else {
            is_open_luks = false;
        }

        this.current_redirect = current_redirect;
        this.partitions = partitions;
        this.disk_btrfs_uuid = disk_btrfs_uuid;
        this.is_luks = is_luks;
        this.is_unlocked = is_unlocked;
        this.keyfile_exists = keyfile_exists;

        $(this.el).html(this.template({
            diskName: disk_name,
            serialNumber: serialNumber,
            diskRole: diskRole,
            role_obj: role_obj,
            partitions: partitions,
            current_redirect: current_redirect,
            disk_btrfs_uuid: disk_btrfs_uuid,
            is_luks: is_luks,
            is_open_luks: is_open_luks,
            is_unlocked: is_unlocked,
            crypttab_options: crypttab_options,
            current_crypttab_status: current_crypttab_status,
            keyfile_exists: keyfile_exists,
            luks_container_uuid: luks_container_uuid
        }));

        this.$('#luks-disk-form :input').tooltip({
            html: true,
            placement: 'right'
        });

        var err_msg = '';
        var luks_err_msg = function () {
            return err_msg;
        };

        $.validator.addMethod('validateCrypttab_selection', function (value) {
            var crypttab_selection = $('#crypttab_selection').val();
            var create_keyfile_tick = $('#create_keyfile_tick');
            // Check to see if we are attempting to configure an auto unlock
            // via a non existent keyfile and not also requesting the creation
            // of that keyfile: ie ticked "create_keyfile_tick"
            if (!keyfile_exists) {
                if (crypttab_selection !== 'false' && crypttab_selection !== 'none') {
                    // auto unlock via keyfile selected
                    if (!create_keyfile_tick.prop('checked')) {
                        err_msg = '"Auto unlock via keyfile" selected when ' +
                            'the indicated keyfile does not exist. ' +
                            'Tick "Create keyfile" below.';
                        return false;
                    }
                }
            }
            return true;
        }, luks_err_msg);

        $.validator.addMethod('validateLuks_passphrase', function (value) {
            var create_keyfile_tick = $('#create_keyfile_tick');
            var luks_passphrase = $('#luks_passphrase').val();
            if (create_keyfile_tick.prop('checked')) {
                if (luks_passphrase === '') {
                    err_msg = 'Keyfile creation requested but no passphrase ' +
                        'entered';
                    return false;
                }
            }
            return true;
        }, luks_err_msg);


        this.$('#luks-disk-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                crypttab_selection: 'validateCrypttab_selection',
                luks_passphrase: 'validateLuks_passphrase'
            },

            submitHandler: function () {
                var button = $('#role-disk');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/disks/' + disk_id + '/luks-drive';
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#luks-disk-form').getJSON()),
                    success: function () {
                        enableButton(button);
                        _this.$('#luks-disk-form :input').tooltip('hide');
                        app_router.navigate('disks', {trigger: true});
                    },
                    error: function (xhr, status, error) {
                        enableButton(button);
                    }
                });
                return false;
            }
        });
        this.container_or_volume_mode();
        this.show_keyfile_options();
        this.crypttab_selection_changed();
    },

    container_or_volume_mode: function () {
        if (this.is_luks) {
            // LUKS Container mode so show crypttab selection and buttons.
            this.$('#crypttab_selection_group').show();
            this.$('#crypttab_text').show();
            this.$('#open_vol_status_table_group').hide();
            this.$('#cancel_submit_buttons_group').show();
        } else {
            // Open LUKS volume mode assumed so hide crypttab and buttons.
            this.$('#crypttab_selection_group').hide();
            this.$('#crypttab_text').hide();
            this.$('#open_vol_status_table_group').show();
            this.$('#cancel_submit_buttons_group').hide();
        }
    },

    crypttab_selection_changed: function () {
        var crypttab_selected = this.$('#crypttab_selection').val();
        if (crypttab_selected !== 'false' && crypttab_selected !== 'none') {
            // Assuming not false and not none is keyfile entry.
            this.show_keyfile_options(true);
        } else {
            this.show_keyfile_options(false);
        }
    },

    show_keyfile_options: function(show) {
        var keyfile_exists = this.keyfile_exists;
        if (show) {
            this.$('#current_keyfile_group').show();
            if (!keyfile_exists) {
                this.$('#create_keyfile_group').show();
            }
        } else {
            this.$('#current_keyfile_group').hide();
            this.$('#create_keyfile_group').hide();
        }
        this.create_keyfile_tick_toggle();
    },

    create_keyfile_tick_toggle: function () {
        // show or hide our associated UI authentication components according
        // to our own state. Currently authentication is limited to passphrase
        // entry. This could later be extended to keyfile selection, although
        // currently if the native keyfile exists we should not be displayed
        // due to redundancy, ie keyfile exists already.
        var create_keyfile_tick = this.$('#create_keyfile_tick');
        if (create_keyfile_tick.prop('checked')) {
            this.$('#luks_passphrase_group').show();
        } else {
            this.$('#luks_passphrase_group').hide();
        }
    },

    initHandlebarHelpers: function () {
        var _this = this;
        Handlebars.registerHelper('display_luks_container_or_volume', function () {
            var html = '';
            if (this.is_luks) {
                html += 'LUKS container configuration.';
            } else if (this.is_open_luks) {
                html += 'Open LUKS Volume information page.';
            } else {
                html += 'Warning: Non LUKS Device, please report bug on forum.';
            }
            return new Handlebars.SafeString(html);
        });
        Handlebars.registerHelper('display_luks_container_wipe_link', function () {
            // Check to see if we are a locked LUKS container and if so
            // construct an appropriate html link to this devices role/wipe
            // page, ie disks/role/by-id-name
            var html = '';
            if (this.is_luks && this.is_unlocked !== true) {
                // We have an locked LUKS container
                if (this.current_crypttab_status == false){
                    // no current crypttab entry
                    html += '<a href="#disks/role/' + _this.diskId;
                    html += '" class="luks_drive" data-disk-id="' + _this.diskId;
                    html += '" title="Wipe locked LUKS Container" rel="tooltip">';
                    html += 'Wipe locked LUKS container<i class="fa fa-eraser"></i></a>';
                }
            }
            return new Handlebars.SafeString(html);
        });
        Handlebars.registerHelper('display_create_keyfile_text', function () {
            // Customize our "create_keyfile_tick" user facing text.
            // Ie "Create the above keyfile if we don't have a custom keyfile
            // If we have a custom keyfile config that doesn't exist then we
            // must be clear that we create our native /root/keyfile-<uuid>
            // and alter the crypttab to match.
            // This is in lue of a fully configurable custom config option.
            var current_crypttab_status = this.current_crypttab_status;
            var html = '';
            var native_keyfile = '/root/keyfile-' + this.luks_container_uuid;
            if (current_crypttab_status !== native_keyfile) {
                html += 'Create keyfile (native)';
            } else {
                html += 'Create keyfile (as above)';
            }
            return new Handlebars.SafeString(html);
        });
        Handlebars.registerHelper('display_crypttab_entry', function () {
            // Helper to fill dropdown with crypttab relevant entries,
            // generating dynamically lines of the following format:
            // <option value="false">No auto unlock (No crypttab entry)
            // </option>
            var html = '';
            var current_crypttab_status = this.current_crypttab_status;
            for (var entry in this.crypttab_options) {
                // cycle through the available known entries and construct our
                // drop down html; using 'selected' to indicate current value.
                html += '<option value="' + this.crypttab_options[entry];
                if (current_crypttab_status === this.crypttab_options[entry]) {
                    // we have found our current setting so indicate this by
                    // pre-selecting it. N.B. exact matches only ie keyfile
                    // match in this case uses native naming ie:
                    // /root/keyfile-<uuid>.
                    html += '" selected="selected">';
                    html += entry + ' - active</option>';
                } else if ((current_crypttab_status !== false) &&
                    (current_crypttab_status.substring(0, 1) === '/') &&
                    (entry === 'Auto unlock via keyfile')) {
                    // @todo - the above clause is clumsy and could later be
                    // @todo - replaced with a custom cryptab file entry
                    // @todo - option in crypttab_options.
                    // We have a path entry (ie keyfile type) but not one
                    // using the native naming ie a non /root/keyfile-<uuid>.
                    // Indicate the selection type and "custom" nature.
                    html += '" selected="selected">';
                    html += entry + ' (custom) - active</option>';
                } else {
                    // construct non current entry
                    html += '">' + entry + '</option>';
                }
            }
            return new Handlebars.SafeString(html);
        });
        Handlebars.registerHelper('display_luks_volume_status_table', function () {
            // Build a table body <tbody> containing the openLUKS role
            // dict value entries.
            var rows = ['status','type', 'cipher', 'keysize', 'device', 'offset', 'sizemode'];
            var html = '';
            var _this = this;
            if (this.is_open_luks) {
                //so we are assured of an 'openLUKS' role.
                html += '<tbody>';
                rows.forEach(function(item) {
                    if (_this.role_obj['openLUKS'].hasOwnProperty(item)) {
                        html += '<tr>';
                        // fill out index column
                        html += '<td>' + item + '</td>';
                        // fill out value column
                        html += '<td>' + _this.role_obj['openLUKS'][item] + '</td>';
                        html += '</tr>';
                    }
                });
                html += '</tr>';
                html += '</tbody>';
            }
            return new Handlebars.SafeString(html);
        });
        Handlebars.registerHelper('display_keyfile_path', function () {
            var html = '';
            var keyfile_entry = this.current_crypttab_status;
            // first check if we have a keyfile_entry ie non false
            // we shouldn't be called if there isn't one but just in case:
            if (keyfile_entry !== false && keyfile_entry !== 'none') {
                html += 'Configured Keyfile:&nbsp;&nbsp;';
            } else {
                html += 'Proposed Keyfile:&nbsp;&nbsp;';
            }
            // Redefine local keyfile_entry value to represent the native
            // keyfile if false (no cyrpttab entry) or 'none' manual. Slightly
            // unclean but we are done with it otherwise.
            if (keyfile_entry === false || keyfile_entry === 'none') {
                keyfile_entry = '/root/keyfile-' + this.luks_container_uuid;
            }
            if (this.keyfile_exists) {
                // green to denote existing keyfile_entry
                html += '<span style="color:darkgreen">'
                    + keyfile_entry + '</span>';
            } else {
                // red to denote missing keyfile_entry
                html += '<span style="color:darkred">'
                    + keyfile_entry;
                html += '<p><strong>WARNING: THE ABOVE KEY FILE DOES NOT EXIST</strong></span></p>';
            }
            return new Handlebars.SafeString(html);
        });
    },

    cancel: function (event) {
        event.preventDefault();
        this.$('#luks-disk-form :input').tooltip('hide');
        app_router.navigate('disks', {trigger: true});
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

NetworkView = Backbone.View.extend({

    events: {
        'click a[data-action=delete]': 'deleteConnection',
        'switchChange.bootstrapSwitch': 'switchStatus'
    },

    initialize: function() {
        this.template = window.JST.network_network;
        this.collection = new NetworkConnectionCollection();
        this.collection.on('reset', this.renderNetwork, this);
        this.devices = new NetworkDeviceCollection();
        this.devices.on('reset', this.renderNetwork, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        this.collection.fetch();
        this.devices.fetch();
        return this;
    },


    renderNetwork: function() {
        var _this = this;
        this.pc = [];
        this.cc = [];
        for (var i = 0; i < this.collection.length; i++) {
            var c = this.collection.at(i);
            if (c.get('master')) {
                this.cc.push(c.toJSON());
            } else {
                this.pc.push(c.toJSON());
            }
        }

        $(this.el).empty();
        $(this.el).append(this.template({
            collection: this.collection,
            connections: this.collection.toJSON(),
            parent_connections: this.pc,
            child_connections: this.cc,
            devices: this.devices.toJSON()
        }));
        setApplianceName();

        //Initialize bootstrap switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color
    },

    switchStatus: function(event, state) {
        var connectionId = $(event.target).attr('data-connection-id');
        if (state) {
            this.toggleConnection(connectionId, 'up');
        } else {
            this.toggleConnection(connectionId, 'down');
        }
    },

    toggleConnection: function(connectionId, switchState) {
        var _this = this;
        $.ajax({
            url: 'api/network/connections/' + connectionId + '/' + switchState,
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(connectionId, false);
                _this.render();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(connectionId, xhr);
            }
        });
    },

    setStatusLoading: function(connectionId, show) {
        var statusEl = this.$('div.command-status[data-connection-id="' + connectionId + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(connectionId, xhr) {
        var statusEl = this.$('div.command-status[data-connection-id="' + connectionId + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + connectionId + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + connectionId + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + connectionId + '-err-popup');
        var errPopupContent = this.$('#' + connectionId + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

    deleteConnection: function(event) {
        if (confirm('Are you sure to delete the connection?')) {
            var _this = this;
            var button = $(event.currentTarget);
            var connectionId = button.attr('id');
            if (buttonDisabled(button)) return false;
            disableButton(button);
            $.ajax({
                url: '/api/network/connections/' + connectionId,
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    _this.collection.fetch({
                        reset: true
                    });
                    enableButton(button);
                    _this.render();
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    initHandlebarHelpers: function() {
        var _this = this;
        Handlebars.registerHelper('getState', function(state) {
            var html = '';
            if (state == 'activated') {
                html = 'checked';
            }
            return new Handlebars.SafeString(html);
        });
        Handlebars.registerHelper('belongsToConnection', function(connectionId, deviceConnectionId) {
            if (connectionId == deviceConnectionId) {
                return true;
            }
            for (var i = 0; i < _this.cc.length; i++) {
                if (_this.cc[i].master == connectionId &&
                    _this.cc[i].id == deviceConnectionId) {
                    return true;
                }
            }
            return false;
        });
        Handlebars.registerHelper('hasChildren', function(connection, opts) {
            for (var i = 0; i < _this.cc.length; i++) {
                if (_this.cc[i].master == connection.id) {
                    return opts.fn(this);
                }
            }
            return opts.inverse(this);
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

NFSAdvancedEditView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.nfs_advanced_edit;
        this.collection = new AdvancedNFSExportCollection();
        this.dependencies.push(this.collection);
    },

    render: function() {
        this.fetch(this.renderAdvancedEdit, this);
        return this;
    },

    renderAdvancedEdit: function() {
        var _this = this;
        var ro_str = '';
        var rw_str = '';

        this.collection.each(function(nfsExport) {
            var prefix = 'Normally added -- ';
            var n = prefix.length;
            var s = nfsExport.get('export_str');
            if (s.indexOf(prefix) == 0) {
                ro_str = ro_str + s.substring(n, s.length) + '\n';
            } else {
                rw_str = rw_str + s + '\n';
            }
        });
        $(this.el).html(this.template({
            shares: this.shares,
            collection: this.collection,
            ro_str: ro_str,
            rw_str: rw_str
        }));
        $('#advanced-edit-form').validate({
            onfocusout: false,
            onkeyup: false,

            submitHandler: function() {
                var button = $('#submit-advanced-edit');
                var nfsText = _this.$('#nfs-text').val();
                var entries = [];
                if (!_.isNull(nfsText) && nfsText.trim() != '') entries = nfsText.trim().split('\n');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                $.ajax({
                    url: '/api/adv-nfs-exports',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        entries: entries
                    }),
                    success: function() {
                        enableButton(button);
                        app_router.navigate('nfs-exports', {
                            trigger: true
                        });
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        app_router.navigate('nfs-exports', {
            trigger: true
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

NFSExportsView = RockstorLayoutView.extend({
    events: {
        'click .delete-nfs-export': 'deleteNfsExport',
        'switchChange.bootstrapSwitch': 'switchStatus',
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.nfs_nfs_exports;
        this.module_name = 'nfs_exports';
        this.collection = new NFSExportGroupCollection();
        this.dependencies.push(this.collection);
        this.appliances = new ApplianceCollection();
        this.dependencies.push(this.appliances);
        this.serviceName = 'nfs';
        this.service = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.service);
        this.updateFreq = 5000;
        this.collection.on('reset', this.renderNFSExportGroups, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        this.fetch(this.renderNFSExportGroups, this);
        return this;
    },

    renderNFSExportGroups: function() {
        var currentAppliance = this.appliances.find(function(appliance) {
            return appliance.get('current_appliance') == true;
        });
        $(this.el).html(this.template({
            collection: this.collection,
            nfsCollection: this.collection.toJSON(),
            collectionNotEmpty: !this.collection.isEmpty(),
            service: this.service,
            currentAppliance: currentAppliance,
            currentApplianceIp: currentAppliance.get('ip')
        }));

        this.renderDataTables();

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('input[name="nfs-export-checkbox"]').bootstrapSwitch('state', this.service.get('status'), true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        // Display NFS Export Service Warning
        if (!this.service.get('status')) {
            this.$('#nfs-warning').show();
        } else {
            this.$('#nfs-warning').hide();
        }
    },

    switchStatus: function(event, state) {
        if (state) {
            this.startService();
        } else {
            this.stopService();
        }
    },

    deleteNfsExport: function(event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Delete nfs-export... Are you sure? ')) {
            disableButton(button);
            var id = $(event.currentTarget).data('id');
            $.ajax({
                url: '/api/nfs-exports/' + id,
                type: 'DELETE',
                dataType: 'json',
                contentType: 'application/json',
                success: function() {
                    _this.render();
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    startService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/nfs/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#nfs-warning').hide();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('#nfs-warning').show();
            }
        });
    },

    stopService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/nfs/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#nfs-warning').show();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('#nfs-warning').hide();
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('showNfsShares', function(index, nfsExports) {
            if (index < (nfsExports.length - 1)) {
                return ',';
            }
        });

        Handlebars.registerHelper('showWritableOption', function(editable) {
            return editable == 'rw' ? 'no' : 'yes';
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PoolDetailsLayoutView = RockstorLayoutView.extend({

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.pid = this.options.pid;
        this.cView = this.options.cView;
        this.template = window.JST.pool_pool_details_layout;
        this.resize_pool_info_template = window.JST.pool_resize_pool_info;
        this.compression_info_template = window.JST.pool_compression_info;
        this.pool = new Pool({
            pid: this.pid
        });
        // create poolscrub models
        this.poolscrubs = new PoolScrubCollection([], {
            snapType: 'admin'
        });
        this.poolscrubs.setUrl(this.pid);
        // create pool re-balance models
        this.poolrebalances = new PoolRebalanceCollection([], {
            snapType: 'admin'
        });
        this.poolrebalances.setUrl(this.pid);

        this.dependencies.push(this.pool);
        this.dependencies.push(this.poolscrubs);
        this.dependencies.push(this.poolrebalances);
        this.disks = new DiskCollection();
        this.disks.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.disks);
        this.cOpts = {
            'no': 'Dont enable compression',
            'zlib': 'zlib',
            'lzo': 'lzo'
        };
        this.initHandlebarHelpers();
        this.poolShares = new PoolShareCollection([], {
            pid: this.pid
        });
    },

    events: {
        'click #delete-pool': 'deletePool',
        'click #js-confirm-pool-delete': 'confirmPoolDelete',
        'click .js-delete-missing': 'deleteMissingDisk',
        'click #js-resize-pool': 'resizePool',
        'click #js-submit-resize': 'resizePoolSubmit', // proposed for removal
        'click #js-resize-cancel': 'resizePoolCancel'
    },

    render: function() {
        this.poolShares.fetch();
        this.fetch(this.renderSubViews, this);
        return this;
    },

    renderSubViews: function() {
        var poolRoleIsRoot = false;
        if (this.pool.get('role') == 'root') {
            poolRoleIsRoot = true;
        }
        $(this.el).html(this.template({
            share: this.poolShares.models[0].attributes.results,
            poolName: this.pool.get('name'),
            isPoolRoleRoot: poolRoleIsRoot
        }));

        this.subviews['pool-info'] = new PoolInfoModule({
            model: this.pool.toJSON()
        });
        this.subviews['pool-usage'] = new PoolUsageModule({
            model: this.pool
        });
        this.subviews['pool-scrubs'] = new PoolScrubTableModule({
            poolscrubs: this.poolscrubs,
            pool: this.pool,
            parentView: this
        });
        this.subviews['pool-rebalances'] = new PoolRebalanceTableModule({
            poolrebalances: this.poolrebalances,
            pool: this.pool,
            parentView: this
        });
        this.pool.on('change', this.subviews['pool-info'].render, this.subviews['pool-info']);
        this.pool.on('change', this.subviews['pool-usage'].render, this.subviews['pool-usage']);
        this.poolscrubs.on('change', this.subviews['pool-scrubs'].render, this.subviews['pool-scrubs']);
        this.$('#ph-pool-info').html(this.subviews['pool-info'].render().el);
        this.$('#ph-pool-usage').html(this.subviews['pool-usage'].render().el);
        this.$('#ph-pool-scrubs').html(this.subviews['pool-scrubs'].render().el);
        this.$('#ph-pool-rebalances').html(this.subviews['pool-rebalances'].render().el);
        // Sort all SubView tables in descending order by initial column.
        // This way we see the latest Scrub / Balance items at the top.
        var customs = {
            'order': [[0, 'desc']]
        };
        this.renderDataTables(customs);


        this.$('#ph-compression-info').html(this.compression_info_template({
            pool: this.pool.toJSON()
        }));

        this.$('#ph-resize-pool-info').html(
            this.resize_pool_info_template({
                pool: this.pool.toJSON()

            })
        );
        this.$('ul.nav.nav-tabs').tabs('div.css-panes > div');
        if (!_.isUndefined(this.cView) && this.cView == 'resize') {
            // scroll to resize section
            $('#content').scrollTop($('#ph-resize-pool-info').offset().top);
        }

        //$('#pool-resize-raid-modal').modal({show: false});
        $('#pool-resize-raid-overlay').overlay({
            load: false
        });

        //Bootstrap Inline Edit
        $.fn.editable.defaults.mode = 'inline';
        var compr = this.pool.get('compression');
        var mntOptn = this.pool.get('mnt_options');
        var url = '/api/pools/' + this.pool.get('id') + '/remount';
        $('#comprOptn').editable({
            value: compr,
            emptytext: 'Unset',
            emptyclass: 'editable-empty-custom',
            source: [
                {value: 'no', text: 'no'},
                {value: 'zlib', text: 'zlib'},
                {value: 'lzo', text: 'lzo'}
            ],
            success: function(response, newCompr) {
                $.ajax({
                    url: url,
                    type: 'PUT',
                    dataType: 'json',
                    data: {
                        'compression': newCompr,
                        'mnt_options': mntOptn
                    }
                });
            }
        });

        $('#mntOptions').editable({
            title: 'Edit Mount Options',
            emptytext: 'None',
            emptyclass: 'editable-empty-custom',
            success: function(response, newMntOptns) {
                $.ajax({
                    url: url,
                    type: 'PUT',
                    dataType: 'json',
                    data: {
                        'compression': compr,
                        'mnt_options': newMntOptns
                    },
                });
            }
        });

        $('#comp-mnt-optns-table').tooltip({
            selector: '[data-title]',
            html: true,
            placement: 'right'
        });

        var url_quotas = '/api/pools/' + this.pool.get('id') + '/quotas';
        $('#editQuota').editable({
            // emptyclass: 'editable-empty-custom',
            source: [
                {value: 'Enabled', text: 'Enabled'},
                {value: 'Disabled', text: 'Disabled'}
            ],
            success: function(response, quotasEditVal) {
                $.ajax({
                    url: url_quotas,
                    type: 'PUT',
                    dataType: 'json',
                    data: {
                        'quotas': quotasEditVal
                    },
                });
            }
        });

        // Attempt to colour "Disabled" red. Non functional currently.
        // https://vitalets.github.io/bootstrap-editable/
        $('#editQuota').on('render', function (e, editable) {
            // colour #EB6841 is our default for links.
            var colors = {'Enabled': '#EB6841', 'Disabled': 'red'};
            $(this).css("color", colors[editable.value]);
        });
    },

    deletePool: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        _this.$('#delete-pool-modal').modal();
    },

    confirmPoolDelete: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var url = '/api/pools/' + this.pool.get('id') + '/force';
        $.ajax({
            url: url,
            type: 'DELETE',
            dataType: 'json',
            success: function() {
                enableButton(button);
                _this.$('#delete-pool-modal').modal('hide');
                $('.modal-backdrop').remove();
                app_router.navigate('pools', {
                    trigger: true
                });
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    deleteMissingDisk: function(event) {
        // essentially hard wired variant of resizePool for delete 'missing'
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var url = '/api/pools/' + _this.pool.get('id') + '/remove';
        if (confirm('If any detached members are listed use the Resize/ReRaid button - "Remove disks" option instead. Click OK only if "(Some Missing)" and no "detached-..." appear in the Pool page Disks sub-section?')) {
            var raid_level = _this.pool.get('raid');
            var disk_names = ['missing'];
            var delete_missing_msg = ('Delete missing is initiated (can take several hours), a progress report is currently unavailable. Balance attempts are blocked for this period.');
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({
                    'disks': disk_names,
                    'raid_level': raid_level
                }),
                success: function (collection, response, options) {
                    _this.render();
                    alert(delete_missing_msg);
                },
                error: function (request, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    resizePool: function(event) {
        event.preventDefault();
        var wizardView = new PoolResizeWizardView({
            model: new Backbone.Model({
                pool: this.pool
            }),
            title: 'Resize / Change RAID level for Pool ' + this.pool.get('name'),
            parent: this
        });
        $('.overlay-content', '#pool-resize-raid-overlay').html(wizardView.render().el);
        $('#pool-resize-raid-overlay').overlay().load();
    },

    resizePoolSubmit: function(event) {
        // proposed for removal
        event.preventDefault();
        var button = this.$('#js-submit-resize');
        if (buttonDisabled(button)) return false;
        if (confirm(' Are you sure about Resizing this pool?')) {
            disableButton(button);
            var _this = this;
            var raid_level = $('#raid_level').val();
            var disk_names = [];
            var err_msg = 'Please select atleast one disk';
            var n = _this.$('.disknew:checked').length;
            var m = _this.$('.diskadded:unchecked').length;
            var resize_msg = ('Resize is initiated. A balance process is kicked off to redistribute data. It could take a while. You can check the status in the Balances tab. Its finish marks the success of resize.');
            if (n >= 0) {
                $('#pool-resize-raid-modal').modal('show');
            } else if (m > 0) {
                _this.$('.diskadded:unchecked').each(function(i) {
                    if (i < m) {
                        disk_names.push($(this).val());
                    }
                });
                $.ajax({
                    url: '/api/pools/' + _this.pool.get('id') + '/remove',
                    type: 'PUT',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        'disks': disk_names,
                        'raid_level': raid_level
                    }),
                    success: function() {
                        _this.hideResizeTooltips();
                        alert(resize_msg);
                        _this.pool.fetch({
                            success: function(collection, response, options) {
                                _this.cView = 'view';
                                _this.render();
                            }
                        });

                    },
                    error: function(request, status, error) {
                        enableButton(button);
                    }
                });
            }
        }
    },

    resizePoolCancel: function(event) {
        event.preventDefault();
        this.hideResizeTooltips();
        this.$('#ph-resize-pool-info').html(this.resize_pool_info_template({
            pool: this.pool
        }));
    },

    resizePoolModalSubmit: function(event) {
        // candidate for removal
        var _this = this;
        var raid_level = $('#raid_level').val();
        var disk_names = [];
        var err_msg = 'Please select atleast one disk';
        var n = _this.$('.disknew:checked').length;
        var m = _this.$('.diskadded:unchecked').length;
        var resize_msg = ('Resize is initiated. A balance process is kicked off to redistribute data. It could take a while. You can check the status in the Balances tab. Its finish marks the success of resize.');
        _this.$('.disknew:checked').each(function(i) {
            if (i < n) {
                disk_names.push($(this).val());
            }
        });
        $.ajax({
            url: '/api/pools/' + _this.pool.get('id') + '/add',
            type: 'PUT',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                'disks': disk_names,
                'raid_level': raid_level
            }),
            success: function() {
                _this.hideResizeTooltips();
                alert(resize_msg);
                _this.pool.fetch({
                    success: function(collection, response, options) {
                        _this.cView = 'view';
                        _this.render();
                    }
                });
            },
            error: function(request, status, error) {
                enableButton(button);
            }
        });

    },

    showResizeTooltips: function() {
        this.$('#ph-resize-pool-info #raid_level').tooltip({
            html: true,
            placement: 'top',
            title: 'You can transition raid level of this pool to change it\'s redundancy profile.',
        });
    },

    hideResizeTooltips: function() {
        this.$('#ph-resize-pool-info #raid_level').tooltip('hide');
    },

    attachModalActions: function() {

    },

    cleanup: function() {
        if (!_.isUndefined(this.statusIntervalId)) {
            window.clearInterval(this.statusIntervalId);
        }
    },

    initHandlebarHelpers: function() {

        asJSON = function (role) {
            // Simple wrapper to test for not null and JSON compatibility,
            // returns the json object if both tests pass, else returns false.
            if (role == null) { // db default
                return false;
            }
            // try json conversion and return false if it fails
            // @todo not sure if this is redundant?
            try {
                return JSON.parse(role);
            } catch (e) {
                return false;
            }
        };

        // Identify Open LUKS container by return of true / false.
        // Works by examining the Disk.role field.
        Handlebars.registerHelper('isOpenLuks', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('openLUKS')) {
                // Once a LUKS container is open it has a type of crypt
                // and we attribute it the role of 'openLUKS' as a result.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        Handlebars.registerHelper('ioErrorStatsTableData', function (stats) {
            // var _this = this;
            var statsAsJson = asJSON(stats);
            if (statsAsJson === false) {
                var failMsg = '<td colspan="5">Device stats unsupported - try ' +
                    '\'btrfs dev stats /mnt2/' + this.pool_name + '\'.</td>';
                return new Handlebars.SafeString(failMsg);
            }
            var html = '';
            var ioStatsHeaders = [
                'write_io_errs',
                'read_io_errs',
                'flush_io_errs',
                'corruption_errs',
                'generation_errs'
            ];
            // We have a json of a disk's io_error_stats.
            // Create consecutive <td> (table data) entries for each in order.
            ioStatsHeaders.forEach(function(statsElement){
                var value = statsAsJson[statsElement]
                if (value === '0') {
                    html += '<td>' + value + '</td>';
                } else {
                    html += '<td><strong><span style="color:darkred">' + value;
                    html += '</span></strong></td>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('getPoolCreationDate', function(date) {
            return moment(date).format(RS_DATE_FORMAT);
        });

        Handlebars.registerHelper('humanReadableSize', function(size) {
            return humanize.filesize(size * 1024);
        });

        Handlebars.registerHelper('isRoot', function(role){
            if (role == 'root') {
                return true;
            }
            return false;
        });

        Handlebars.registerHelper('isWritable', function(mount_status){
            if (mount_status.includes("rw")) {
                return true;
            }
            return false;
        });

        Handlebars.registerHelper('isDegradedRw', function(mount_status){
            if (mount_status.includes("degraded") && mount_status.includes("rw")) {
                return true;
            }
            return false;
        });

        // Simple Boolean to Text converter for use with Pool.quotas_enabled.
        Handlebars.registerHelper('isEnabledDisabled', function (q_enabled) {
            if (q_enabled) {
                return 'Enabled';
            }
            return 'Disabled'
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

PoolInfoModule = RockstorModuleView.extend({

    initialize: function() {
        this.template = window.JST.pool_pool_info_module;
        this.module_name = 'pool-info';
    },

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PoolRebalanceTableModule = RockstorModuleView.extend({
    events: {
        'click #js-poolrebalance-start': 'start',
        'click #js-poolrebalance-cancel': 'cancel'
    },

    initialize: function() {
        this.template = window.JST.pool_poolrebalance_table_template;
        this.startRebalanceTemplate = window.JST.pool_poolrebalance_start_template;
        this.module_name = 'poolrebalances';
        this.pool = this.options.pool;
        this.poolrebalances = this.options.poolrebalances;
        this.collection = this.options.poolrebalances;
        this.collection.on('reset', this.render, this);
        this.parentView = this.options.parentView;
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        $(this.el).empty();
        $(this.el).append(this.template({
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            pool: this.pool
        }));
        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });
        return this;
    },

    setPoolName: function(poolName) {
        this.collection.setUrl(poolName);
    },

    start: function(event) {
        var _this = this;
        event.preventDefault();
        $(this.el).html(this.startRebalanceTemplate({
            pool: this.pool
        }));

        this.validator = this.$('#pool-rebalance-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {},
            submitHandler: function() {
                var button = _this.$('#start_rebalance');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var n = _this.$('#forcebalance:checked').val();
                var postdata = '';
                if (n == 'on') {
                    postdata = '{"force": "true"}';
                }
                $.ajax({
                    url: '/api/pools/' + _this.pool.get('id') + '/balance',
                    type: 'POST',
                    contentType: 'application/json',
                    data: postdata,
                    success: function() {
                        _this.$('#pool-rebalance-form :input').tooltip('hide');
                        enableButton(button);
                        _this.collection.fetch({
                            success: function(collection, response, options) {}
                        });
                    },
                    error: function(jqXHR) {
                        _this.$('#pool-rebalance-form :input').tooltip('hide');
                        enableButton(button);
                    }
                });
                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        this.render();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_poolRebalance_table', function() {
            var html = '';
            this.collection.each(function(poolrebalance, index) {
                html += '<tr>';
                html += '<td>' + poolrebalance.get('id') + '</td>';
                html += '<td>' + poolrebalance.get('status') + '</td>';
                html += '<td>';
                if (poolrebalance.get('start_time')) {
                    html += moment(poolrebalance.get('start_time')).format(RS_DATE_FORMAT);
                }
                html += '</td>';
                html += '<td>' + poolrebalance.get('percent_done') + '</td>';
                html += '<td>';
                if (poolrebalance.get('message') != null) {
                    html += poolrebalance.get('message');
                }
                html += '</td>';
                html += '</tr>';
            });
            return new Handlebars.SafeString(html);
        });

    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PoolScrubTableModule = RockstorModuleView.extend({
    events: {
        'click #js-poolscrub-start': 'start',
        'click #js-poolscrub-cancel': 'cancel'
    },

    initialize: function() {
        this.template = window.JST.pool_poolscrub_table_template;
        this.startScrubTemplate = window.JST.pool_poolscrub_start_template;
        this.module_name = 'poolscrubs';
        this.pool = this.options.pool;
        this.poolscrubs = this.options.poolscrubs;
        this.collection = this.options.poolscrubs;
        this.collection.on('reset', this.render, this);
        this.parentView = this.options.parentView;
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        $(this.el).empty();
        $(this.el).append(this.template({
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            pool: this.pool
        }));
        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });
        return this;
    },

    setPoolName: function(poolName) {
        this.collection.setUrl(poolName);
    },

    start: function(event) {
        var _this = this;
        event.preventDefault();
        $(this.el).html(this.startScrubTemplate({
            pool: this.pool
        }));

        this.validator = this.$('#pool-scrub-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {},
            submitHandler: function() {
                var button = _this.$('#start_scrub');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var n = _this.$('#forcescrub:checked').val();
                var postdata = '';
                if (n == 'on') {
                    postdata = '{"force": "true"}';
                }
                $.ajax({
                    url: '/api/pools/' + _this.pool.get('id') + '/scrub',
                    type: 'POST',
                    contentType: 'application/json',
                    data: postdata,
                    success: function() {
                        _this.$('#pool-scrub-form :input').tooltip('hide');
                        enableButton(button);
                        _this.collection.fetch({
                            success: function(collection, response, options) {}
                        });
                    },
                    error: function(jqXHR) {
                        _this.$('#pool-scrub-form :input').tooltip('hide');
                        enableButton(button);
                    }
                });
                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        this.render();
    },

    initHandlebarHelpers: function () {
        Handlebars.registerHelper('display_poolScrub_table', function () {
            var _this = this;
            var html = '';
            var errorStats = ['read_errors', 'csum_errors', 'verify_errors',
                'super_errors', 'malloc_errors', 'uncorrectable_errors',
                'unverified_errors', 'corrected_errors'];
            var errorStatsLen = errorStats.length;
            this.collection.each(function (poolscrub, index) {
                var errorMarks = '';
                // Tally number of non zero error stats
                // (no forEach available in Handlebars helper context.)
                for (var i = 0; i < errorStatsLen; i++) {
                    if (poolscrub.get(errorStats[i]) !== 0) {
                        errorMarks += '!';
                    }
                }
                html += '<tr>';
                html += '<td>' + poolscrub.get('id') + '</td>';
                // construct our href as pools/pid/scrubId for Scrub Details.
                html += '<td><a href="#pools/' + _this.pool.get('id') + '/';
                html += poolscrub.get('id') + '">';
                html += poolscrub.get('status') + '</a>';
                if (errorMarks !== '') {
                    html += '<span style="color:darkred"><strong>';
                    html += ' ' + 'ERRORS FOUND' + errorMarks;
                    html += '</strong></span>';
                }
                html += '</td>';
                html += '<td>';
                if (poolscrub.get('start_time')) {
                    html += moment(poolscrub.get('start_time')).format(RS_DATE_FORMAT);
                }
                html += '</td>';
                html += '<td>';
                if (poolscrub.get('end_time')) {
                    html += moment(poolscrub.get('end_time')).format(RS_DATE_FORMAT);
                }
                html += '</td>';
                html += '<td>' + humanize.filesize(poolscrub.get('kb_scrubbed') * 1024) + '</td>';
                html += '</tr>';
            });

            return new Handlebars.SafeString(html);
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

PoolUsageModule = RockstorModuleView.extend({
    initialize: function() {
        this.template = window.JST.pool_pool_usage_module;
        this.module_name = 'pool-usage';
    },

    render: function() {
        $(this.el).html(this.template({
            module_name: this.module_name,
            model: this.model,
            collection: this.collection
        }));
        this.renderGraph();
        return this;
    },

    renderGraph: function() {
        // Pie chart
        var w = 350; //width
        var h = 130; //height
        var outerRadius = 50;
        var innerRadius = 0;

        total = parseInt(this.model.get('size') * 1024);
        used = parseInt((this.model.get('size') - this.model.get('reclaimable') - this.model.get('free')) * 1024);
        free = this.model.get('free') * 1024;

        var dataset = [free, used];
        var dataLabels = ['free', 'used'];

        var svg = d3.select(this.el).select('#chart')
            .append('svg')
            .attr('width', w)
            .attr('height', h);

        displayUsagePieChart(svg, outerRadius, innerRadius, w, h, dataset, dataLabels);

    }
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

/*
 * Pools View
 */

PoolsView = RockstorLayoutView.extend({

    events: {
        'click a[data-action=delete]': 'deletePool',
        'click #js-cancel': 'cancel',
        'click #js-confirm-pool-delete': 'confirmPoolDelete'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.pools_table_template = window.JST.pool_pools_table;
        this.collection = new PoolCollection();
        this.disks = new DiskCollection();
        this.disks.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.disks);
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderPools, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderPools,this);
        return this;
    },

    renderPools: function() {
        var _this = this;
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }

        var freedisks = this.disks.filter(function(disk) {
            return (disk.get('pool') == null) && !(disk.get('offline')) &&
            !(disk.get('parted'));
        });

        var disksAvailable = false;
        if(_.size(freedisks) > 0){
            disksAvailable = true;
        }

        $(this.el).html(this.pools_table_template({
            collection: this.collection,
            poolCollection: this.collection.toJSON(),
            collectionNotEmpty: !this.collection.isEmpty(),
            disksAvailable: disksAvailable
        }));

        this.$('[rel=tooltip]').tooltip({placement: 'bottom'});

        var customs = {
            columnDefs: [
                { type: 'file-size', targets: 1 },
                { type: 'file-size', targets: 2 }
            ]
        };

        this.renderDataTables(customs);

        //X-editable Inline Edit.
        $.fn.editable.defaults.mode = 'inline';
        $('.cmpOptns').editable({
            emptytext: 'Unset',
            emptyclass: 'editable-empty-custom',
            source: [
                     {value: 'no', text: 'no'},
                     {value: 'zlib', text: 'zlib'},
                     {value: 'lzo', text: 'lzo'}
            ],
            success: function(response, newCompr){
                //use $(this) to dynamically get pool name from select dropdown.
                var pid = $(this).data('pid');
                var mntOptn = $(this).data('mntoptn');
                $.ajax({
                    url: '/api/pools/' + pid + '/remount',
                    type: 'PUT',
                    dataType: 'json',
                    data: {
                        'compression': newCompr,
                        'mnt_options': mntOptn
                    }
                });
            }
        });

        $('.mntOptns').editable({
            title: 'Edit Mount Options',
            emptytext: 'None',
            emptyclass: 'editable-empty-custom',
            success: function(response, newMntOptns){
                var pid = $(this).data('pid');
                var compr = $(this).data('comp');
                $.ajax({
                    url: '/api/pools/' + pid + '/remount',
                    type: 'PUT',
                    dataType: 'json',
                    data: {
                        'compression': compr,
                        'mnt_options': newMntOptns
                    }
                });
            }
        });

        $('.editQuotaOverview').editable({
            // emptyclass: 'editable-empty-custom',
            source: [
                {value: 'Enabled', text: 'Enabled'},
                {value: 'Disabled', text: 'Disabled'}
            ],
            success: function(response, quotasEditVal) {
                var pid = $(this).data('pid');
                $.ajax({
                    url: '/api/pools/' + pid + '/quotas',
                    type: 'PUT',
                    dataType: 'json',
                    data: {
                        'quotas': quotasEditVal
                    },
                });
            }
        });

        // Attempt to colour "Disabled" red. Non functional currently.
        // https://vitalets.github.io/bootstrap-editable/
        $('.editQuotaOverview').on('render', function (e, editable) {
            // colour #EB6841 is our default for links.
            var colors = {'Enabled': '#EB6841', 'Disabled': 'red'};
            $(this).css("color", colors[editable.value]);
        });


        $('#pools-table').tooltip({
            selector: '[data-title]',
            html: true,
            placement: 'bottom'
        });

        return this;
    },

    displayPoolInformation: function (pid) {
        // set share name in confirm dialog
        // this.$('#pass-pool-name').html(poolName);
        //show the dialog
        this.$('#delete-pool-modal-' + pid).modal();
        return false;
    },

    deletePool: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        var $poolShares = $('#pool-shares');
        // Remove share names upon reopening
        $poolShares.html('');
        if (buttonDisabled(button)) return false;
        var pid = button.attr('data-id');
        var poolShares = new PoolShareCollection([], {pid: pid});
        poolShares.fetch({
            success: function (data) {
                var shares = poolShares.models[0].attributes.results;
                // Only display shares if they exist
                if (!_.isUndefined(shares)) {
                    _.each(shares, function(share) {
                        $poolShares.append('<li>' + share.name +  ' (' + share.size_gb + ' GB)</li>');
                    });
                    _this.displayPoolInformation(pid);
                }
            },
            error: function (err) {
                // Display anyways
                _this.displayPoolInformation(pid);
            }
        });
    },

    confirmPoolDelete: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var pid = button.attr('data-id');
        var url = '/api/pools/' + pid + '/force';
        $.ajax({
            url: url,
            type: 'DELETE',
            dataType: 'json',
            success: function() {
                enableButton(button);
                _this.$('#delete-pool-modal-' + pid).modal('hide');
                $('.modal-backdrop').remove();
                _this.render();
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    cancel: function(event) {
        if (event) event.preventDefault();
        app_router.navigate('pools', {trigger: true});
    },

    initHandlebarHelpers: function(){

        asJSON = function (role) {
            // Simple wrapper to test for not null and JSON compatibility,
            // returns the json object if both tests pass, else returns false.
            if (role == null) { // db default
                return false;
            }
            // try json conversion and return false if it fails
            // @todo not sure if this is redundant?
            try {
                return JSON.parse(role);
            } catch (e) {
                return false;
            }
        };

        // Identify Open LUKS container by return of true / false.
        // Works by examining the Disk.role field.
        Handlebars.registerHelper('isOpenLuks', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('openLUKS')) {
                // Once a LUKS container is open it has a type of crypt
                // and we attribute it the role of 'openLUKS' as a result.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        Handlebars.registerHelper('humanReadableSize', function(type, size, poolReclaim, poolFree) {
            //alert("xxxxxxxxx")
            var html = '';
            if(type == 'size'){
                html += humanize.filesize(size * 1024);
            }else if(type == 'usage'){
                //html += humanize.filesize((size - poolReclaim - poolFree) * 1024);
                alert(size)
                alert(poolFree)
                alert(size * 1024 *1024 *1024 - poolFree)
                html += humanize.filesize(size - poolFree);
            }else if (type == 'usagePercent'){
                html += (((size - poolReclaim - poolFree) / size) * 100).toFixed(2);
            }
            return new Handlebars.SafeString(html);

        });

        Handlebars.registerHelper('checkCompressionStatus', function(poolCompression, opts) {
            if (poolCompression == 'no' || _.isNull(poolCompression) || _.isUndefined(poolCompression) ) {
                return opts.fn(this);
            }
            return opts.inverse(this);
        });

        Handlebars.registerHelper('isRoot', function(role) {
            if (role == 'root') {
                return true;
            }
            return false;
        });

        // Simple Boolean to Text converter for use with Pool.quotas_enabled.
        Handlebars.registerHelper('isEnabledDisabled', function (q_enabled) {
            if (q_enabled) {
                return 'Enabled';
            }
            return 'Disabled'
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

RebootView = RockstorLayoutView.extend({

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.common_navbar;
        this.paginationTemplate = window.JST.common_pagination;
        this.timeLeft = 300;
        this.isStopped = false;
    },

    render: function() {
        var _this = this;

        $('#reboot-modal').modal({
            keyboard: false,
            backdrop: 'static',
            show: false
        });

        if (confirm('Are you sure you want to Reboot the system? All network access will be lost temporarily. Click OK to continue or Cancel to go back.')) {
            $('#reboot-modal').modal('show');
            this.startForceRefreshTimer();

            $.ajax({
                url: '/api/commands/reboot',
                type: 'POST',
                dataType: 'json',
                global: false, // dont show global loading indicator
                success: function(data, status, xhr) {
                    _this.checkIfUp();
                },
                error: function(xhr, status, error) {
                    _this.checkIfUp();

                }
            });
        } else {
            location.reload(history.go(-1));
        }
        return this;
    },

    checkIfUp: function() {
        var _this = this;
        this.isUpTimer = window.setInterval(function() {
            $.ajax({
                url: '/api/sm/sprobes/loadavg?limit=1&format=json',
                type: 'GET',
                dataType: 'json',
                global: false, // dont show global loading indicator
                success: function(data, status, xhr) {
                    if (_this.isStopped) {
                        _this.displayUserMsg2();
                        location.reload(history.go(-1));
                    }

                },
                error: function(xhr, status, error) {
                    _this.isStopped = true;
                }
            });
        }, 5000);
    },



    // countdown timeLeft seconds and then force a window reload
    startForceRefreshTimer: function() {
        var _this = this;
        this.forceRefreshTimer = window.setInterval(function() {
            _this.timeLeft = _this.timeLeft - 1;
            _this.showTimeRemaining();
            if (_this.timeLeft <= 0) {
                _this.reloadWindow();

            }
        }, 1000);
    },

    showTimeRemaining: function() {
        mins = Math.floor(this.timeLeft / 60);
        sec = this.timeLeft - (mins * 60);
        sec = sec >= 10 ? '' + sec : '0' + sec;
        $('#reboot-time-left').html(mins + ':' + sec);
        if (mins <= 1 && !this.userMsgDisplayed) {
            this.displayUserMsg();
            this.userMsgDisplayed = true;
        }
    },

    reloadWindow: function() {
        this.clearTimers();
        $('#reboot-modal').modal('hide');
        location.reload(history.go(-1));
    },

    clearTimers: function() {
        window.clearInterval(this.isUpTimer);
        window.clearInterval(this.forceRefreshTimer);
    },

    displayUserMsg: function() {
        $('#time-left').remove();
        $('#reboot-user-msg').show('highlight', null, 1000);
    },

    displayUserMsg2: function() {
        $('#reboot-message').remove();
        $('#reboot-timer').removeAttr('src');
        $('#reboot-time-left').remove();
        $('#reboot-user-msg2').show('highlight', null, 1000);
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

ReplicaReceiveTrailsView = RockstorLayoutView.extend({
    events: {},

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.replication_receive_trails;
        // add dependencies
        this.replicaShareId = this.options.replicaShareId;
        this.replicaShare = new ReplicaShare({
            id: this.replicaShareId
        });
        this.dependencies.push(this.replicaShare);
        this.collection = new ReceiveTrailCollection(null, {
            replicaShareId: this.replicaShareId
        });
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderReplicaReceiveTrails, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderReplicaReceiveTrails, this);
        return this;
    },

    renderReplicaReceiveTrails: function() {
        var _this = this;
        $(this.el).html(this.template({
            replicaShare: this.replicaShare.toJSON(),
            replicaReceiveColl: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
        }));
        // remove existing tooltips
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }

        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });
        //Added columns definition for sorting purpose
        var customs = {
            'iDisplayLength': 15,
            'aLengthMenu': [
                [15, 30, 45, -1],
                [15, 30, 45, 'All']
            ],
            'order': [[0, 'desc']],
            'columns': [
                null, null, null, null, null, null,
                {
                    'orderDataType': 'dom-checkbox'
                }
            ]
        };
        this.renderDataTables(customs);
    },

    initHandlebarHelpers: function() {

        Handlebars.registerHelper('getDateFormat', function(date) {
            return moment(date).format(RS_DATE_FORMAT);
        });

        Handlebars.registerHelper('ifStatusSuccess', function(status, opts) {
            if (status != 'failed') {
                return opts.fn(this);
            }
            return opts.inverse(this);
        });

        Handlebars.registerHelper('getDuration', function(endTime, startTime) {
            return moment(endTime).from(moment(startTime));
        });

        Handlebars.registerHelper('humanReadableSize', function(size) {
            if (size === 0){
                return '0 or < 1KB'
            } else {
                return humanize.filesize(size * 1024);
            }
        });

        Handlebars.registerHelper('getRate', function(endTime, startTime, kbReceived) {
            if (kbReceived === 0) return 'N/A'
            var d;
            if (endTime != null) {
                d = moment(endTime).diff(moment(startTime)) / 1000;
            } else {
                d = moment().diff(moment(startTime)) / 1000;
            }
            return humanize.filesize((kbReceived / d).toFixed(2) * 1024);
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ReplicaTrailsView = RockstorLayoutView.extend({
    events: {},

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.replication_replica_trails;
        // add dependencies
        this.replicaId = this.options.replicaId;
        this.replica = new Replica({
            id: this.replicaId
        });
        this.dependencies.push(this.replica);
        this.collection = new ReplicaTrailCollection(null, {
            replicaId: this.replicaId
        });
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderReplicaTrails, this);
        // has the replica been fetched? prevents renderReplicaTrails executing
        // (because of collection reset) before replica has been fetched
        this.replicaFetched = false;
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.firstFetch, this);
        return this;
    },

    firstFetch: function() {
        this.replicaFetched = true;
        this.renderReplicaTrails();
    },

    renderReplicaTrails: function() {
        if (!this.replicaFetched) return false;
        var _this = this;
        $(this.el).html(this.template({
            replica: _this.replica.toJSON(),
            replicaColl: _this.collection.toJSON(),
            collection: _this.collection,
            collectionNotEmpty: !this.collection.isEmpty()
        }));
        // remove existing tooltips
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });
        //Added columns definition for sorting purpose
        var customs = {
            'iDisplayLength': 15,
            'aLengthMenu': [
                [15, 30, 45, -1],
                [15, 30, 45, 'All']
            ],
            'order': [[0, 'desc']],
            'columns': [
                null, null, null, null, null, null,
                {
                    'orderDataType': 'dom-checkbox'
                }
            ]
        };
        this.renderDataTables(customs);
    },

    initHandlebarHelpers: function() {

        Handlebars.registerHelper('getDateFormat', function(date) {
            return moment(date).format(RS_DATE_FORMAT);
        });

        Handlebars.registerHelper('ifStatusSuccess', function(status, opts) {
            if (status != 'failed') {
                return opts.fn(this);
            }
            return opts.inverse(this);
        });

        Handlebars.registerHelper('getDuration', function(endTime, startTime) {
            return moment(endTime).from(moment(startTime));
        });

        Handlebars.registerHelper('humanReadableSize', function(size) {
            if (size === 0){
                return '0 or < 1KB'
            } else {
                return humanize.filesize(size * 1024);
            }
        });

        Handlebars.registerHelper('getRate', function(endTime, startTime, kbSent) {
            if (kbSent === 0) return 'N/A'
            var d;
            if (endTime != null) {
                d = moment(endTime).diff(moment(startTime)) / 1000;
            } else {
                d = moment().diff(moment(startTime)) / 1000;
            }
            return humanize.filesize((kbSent / d).toFixed(2) * 1024);
        });
    }


});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ReplicationView = RockstorLayoutView.extend({
    events: {
        'click a[data-action=delete]': 'deleteTask',
        'switchChange.bootstrapSwitch': 'switchStatus',
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.replication_replication;
        // add dependencies
        this.collection = new ReplicaCollection();
        this.dependencies.push(this.collection);
        this.serviceName = 'replication';
        this.replicationService = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.replicationService);
        this.replicaTrails = new ReplicaTrailCollection();
        this.replicaTrails.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.replicaTrails);
        this.appliances = new ApplianceCollection();
        this.dependencies.push(this.appliances);
        this.shares = new ShareCollection();
        this.dependencies.push(this.shares);
        this.replicaShareMap = {};
        this.replicaTrailMap = {};
        this.collection.on('reset', this.renderReplicas, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderReplicas, this);
        RockStorSocket.services = io.connect('/services', {
            'secure': true,
            'force new connection': true
        });
        RockStorSocket.addListener(this.serviceStatusSync, this, 'services:get_services');
        return this;
    },

    renderReplicas: function() {
        var _this = this;
        this.otherAppliances = this.appliances.filter(function(appliance) {
            return appliance.get('current_appliance') == false;
        });
        this.freeShares = this.shares.reject(function(share) {
            return !_.isUndefined(_this.collection.find(function(replica) {
                return replica.get('share') == share.get('name');
            }));
        });
        // remove existing tooltips
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var shares = this.collection.map(function(replica) {
            return replica.get('share');
        });
        _.each(shares, function(share) {
            _this.replicaShareMap[share] = _this.collection.filter(function(replica) {
                return replica.get('share') == share;
            });
        });
        this.collection.each(function(replica, index) {
            var tmp = _this.replicaTrails.filter(function(replicaTrail) {
                return replicaTrail.get('replica') == replica.id;
            });
            _this.replicaTrailMap[replica.id] = _.sortBy(tmp, function(replicaTrail) {
                return moment(replicaTrail.get('snapshot_created')).valueOf();
            }).reverse();
        });
        var noFreeShares,
            noOtherAppliances,
            otherAppliances_FreeShares = false;

        if (this.freeShares.length == 0) {
            noFreeShares = true;
        }
        if (this.otherAppliances.length == 0) {
            noOtherAppliances = true;
        }
        if (this.otherAppliances.length > 0 && this.freeShares.length > 0) {
            otherAppliances_FreeShares = true;
        }
        $(this.el).html(this.template({
            replicationService: this.replicationService,
            replicaColl: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            replicaShareMap: this.replicaShareMap,
            replicaTrailMap: this.replicaTrailMap,
            otherAppliances: this.otherAppliances,
            freeShares: this.freeShares,
            noFreeShares: noFreeShares,
            noOtherAppliances: noOtherAppliances,
            otherAppliances_FreeShares: otherAppliances_FreeShares,
        }));

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        if (typeof this.current_status == 'undefined') {
            this.current_status = this.replicationService.get('status');
        }
        this.$('input[name="replica-service-checkbox"]').bootstrapSwitch('state', this.current_status, true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        // Display Service Warning
        if (!this.current_status) {
            this.$('#replication-warning').show();
        } else {
            this.$('#replication-warning').hide();
        }

        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });

        //added ext func to sort over Replication task Enable/Disable input checkboxes
        $.fn.dataTable.ext.order['dom-checkbox'] = function(settings, col) {
            return this.api().column(col, {
                order: 'index'
            }).nodes().map(function(td, i) {
                return $('input', td).prop('checked') ? '1' : '0';
            });
        };
        //Added columns definition for sorting purpose
        $('table.data-table').DataTable({
            'iDisplayLength': 15,
            'aLengthMenu': [
                [15, 30, 45, -1],
                [15, 30, 45, 'All']
            ],
            'columns': [
                null, null, null, null, null, null,
                {
                    'orderDataType': 'dom-checkbox'
                }
            ]
        });
    },

    switchStatus: function(event, state) {
        //the bootsrap switch can either be Service or Status Switch
        var replicaSwitchName = $(event.target).attr('name');
        if (replicaSwitchName == 'replica-service-checkbox') {
            if (state) {
                this.startService();
            } else {
                this.stopService();
            }
        } else if (replicaSwitchName == 'replica-task-checkbox') {
            var replicaId = $(event.target).attr('data-replica-id');
            if (state) {
                this.enable(replicaId);
            } else {
                this.disable(replicaId);
            }
        }
    },

    enable: function(replicaId) {
        var _this = this;
        $.ajax({
            url: '/api/sm/replicas/' + replicaId,
            type: 'PUT',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                enabled: true
            }),
            success: function() {
                _this.collection.fetch({
                    success: function() {
                        _this.renderReplicas();
                    }
                });
            },
            error: function(xhr, status, error) {}
        });
    },

    disable: function(replicaId) {
        var _this = this;
        $.ajax({
            url: '/api/sm/replicas/' + replicaId,
            type: 'PUT',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                enabled: false
            }),
            success: function() {
                _this.collection.fetch({
                    success: function() {
                        _this.renderReplicas();
                    }
                });
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    deleteTask: function(event) {
        var _this = this;
        if (event) {
            event.preventDefault();
        }
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        var rTaskId = $(event.currentTarget).attr('data-task-id');
        var rTaskName = $(event.currentTarget).attr('data-task-name');
        if (confirm('Delete Replication task:  ' + rTaskName + '. Are you sure?')) {
            $.ajax({
                url: '/api/sm/replicas/' + rTaskId,
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    enableButton(button);
                    _this.collection.fetch({
                        success: function() {
                            _this.renderReplicas();
                        }
                    });
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    startService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/replication/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.current_status = true;
                //hide replication service warning
                _this.$('#replication-warning').hide();
            },
            error: function(xhr, status, error) {
                _this.$('input[name="replica-service-checkbox"]').bootstrapSwitch('state', _this.current_status, true);
            }
        });
    },

    stopService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/replication/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.current_status = false;
                //display replication service warning
                _this.$('#replication-warning').show();
            },
            error: function(xhr, status, error) {
                _this.$('input[name="replica-service-checkbox"]').bootstrapSwitch('state', _this.current_status, true);
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    serviceStatusSync: function(data) {
        if (data.replication.running > 0) {
            this.current_status = false;
            this.$('#replication-warning').show();
        } else {
            this.current_status = true;
            this.$('#replication-warning').hide();
        }
        this.$('input[name="replica-service-checkbox"]').bootstrapSwitch('state', this.current_status, true);
    },

    cleanup: function() {
        RockStorSocket.removeOneListener('services');
    },

    initHandlebarHelpers: function() {
        var _this = this;
        Handlebars.registerHelper('getFrequency', function(cronTab) {
            return prettyCron.toString(cronTab);
        });

        Handlebars.registerHelper('lastBackup', function(replicaId) {
            var html = '';
            if (_this.replicaTrailMap[replicaId]) {
                if (_this.replicaTrailMap[replicaId].length > 0) {
                    var rt = _this.replicaTrailMap[replicaId][0];
                    if (rt.get('status') == 'failed') {
                        html += '<a href="#replication/' + replicaId + '/trails" class="replica-trail"><i class="fa fa-exclamation-circle"></i> ' + rt.get('status') + '</a>';
                    } else if (rt.get('status') == 'pending') {
                        html += '<a href="#replication/' + replicaId + '/trails" class="replica-trail">' + rt.get('status') + '</a>';
                    } else if (rt.get('status') == 'succeeded') {
                        html += '<a href="#replication/' + replicaId + '/trails" class="replica-trail">' + moment(rt.get('end_ts')).fromNow() + '</a>';
                    }
                }
            }
            return new Handlebars.SafeString(html);
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ReplicationReceiveView = RockstorLayoutView.extend({
    events: {
        'switchChange.bootstrapSwitch': 'switchStatus',
        'click a[data-action=delete]': 'deleteReceivedTask'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.replication_replication_receive;
        this.serviceName = 'replication';
        this.replicationService = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.replicationService);
        this.collection = new ReplicaShareCollection();
        this.dependencies.push(this.collection);
        this.replicaReceiveTrails = new ReceiveTrailCollection();
        this.replicaReceiveTrails.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.replicaReceiveTrails);
        this.updateFreq = 5000;
        this.replicaReceiveTrailMap = {};
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderReceives, this);
        return this;
    },

    renderReceives: function() {
        var _this = this;
        // Construct map for receive -> trail
        this.collection.each(function(replicaShare, index) {
            var tmp = _this.replicaReceiveTrails.filter(function(replicaReceiveTrail) {
                return replicaReceiveTrail.get('rshare') == replicaShare.id;
            });
            tmp = tmp.filter(function(replicaReceiveTrail) {
                return replicaReceiveTrail.get('end_ts') != null;
            });
            _this.replicaReceiveTrailMap[replicaShare.id] = _.sortBy(tmp, function(replicaReceiveTrail) {
                return moment(replicaReceiveTrail.get('end_ts')).valueOf();
            }).reverse();
        });
        $(this.el).html(this.template({
            replicationService: this.replicationService,
            replicaColl: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            replicaReceiveTrailMap: this.replicaReceiveTrailMap
        }));

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        if (typeof this.current_status == 'undefined') {
            this.current_status = this.replicationService.get('status');
        }
        this.$('input[name="replica-service-checkbox"]').bootstrapSwitch('state', this.current_status, true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        // Display Service Warning
        if (!this.current_status) {
            this.$('#replication-warning').show();
        } else {
            this.$('#replication-warning').hide();
        }

        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });
        this.renderDataTables();
    },

    switchStatus: function(event, state) {
        //the bootsrap switch can either be Service or Status Switch
        var replicaSwitchName = $(event.target).attr('name');
        if (replicaSwitchName == 'replica-service-checkbox') {
            if (state) {
                this.startService();
            } else {
                this.stopService();
            }
        } else if (replicaSwitchName == 'replica-task-checkbox') {
            var replicaId = $(event.target).attr('data-replica-id');
            if (state) {
                this.enable(replicaId);
            } else {
                this.disable(replicaId);
            }
        }
    },

    deleteReceivedTask: function(event) {
        var _this = this;
        if (event) {
            event.preventDefault();
        }
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        var rId = $(event.currentTarget).attr('data-rshare-id');
        var rShare = $(event.currentTarget).attr('data-rshare-name');
        if (confirm('Delete Received Replication task:  ' + rShare + '. Are you sure?')) {
            $.ajax({
                url: '/api/sm/replicas/rshare/' + rId,
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    enableButton(button);
                    _this.collection.fetch({
                        success: function() {
                            _this.renderReceives();
                        }
                    });
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    startService: function(event) {
        var _this = this;
        var serviceName = this.serviceName;
        this.setStatusLoading(serviceName, true);
        $.ajax({
            url: '/api/sm/services/replication/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(serviceName, false);
                _this.current_status = true;
                _this.$('#replication-warning').hide();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(serviceName, xhr);
            }
        });
    },

    stopService: function(event) {
        var _this = this;
        var serviceName = this.serviceName;
        this.setStatusLoading(serviceName, true);
        $.ajax({
            url: '/api/sm/services/replication/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(serviceName, false);
                _this.current_status = false;
                _this.$('#replication-warning').show();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(serviceName, xhr);
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

    initHandlebarHelpers: function() {
        var _this = this;

        Handlebars.registerHelper('lastReceived', function(replicaId) {
            var html = '';
            if (_this.replicaReceiveTrailMap[replicaId]) {
                if (_this.replicaReceiveTrailMap[replicaId].length > 0) {
                    var rrt = _this.replicaReceiveTrailMap[replicaId][0];
                    if (rrt.get('status') == 'failed') {
                        html += '<a href="#replication-receive/' + replicaId + '/trails" class="replica-trail"><i class="glyphicon glyphicon-warning-sign"></i> ' + rrt.get('status') + '</a>';
                    } else if (rrt.get('status') == 'pending') {
                        html += '<a href="#replication-receive/' + replicaId + '/trails" class="replica-trail">' + rrt.get('status') + '</a>';

                    } else if (rrt.get('status') == 'succeeded') {
                        html += '<a href="#replication-receive/' + replicaId + '/trails" class="replica-trail">' + moment(rrt.get('end_ts')).fromNow() + '</a>';
                    }
                }
            }
            return new Handlebars.SafeString(html);
        });
    }

});

//Add pagination
Cocktail.mixin(ReplicationReceiveView, PaginationMixin);
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

RockonsView = RockstorLayoutView.extend({


    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.rockons_rockons;
        this.rockons = new RockOnCollection({});
        this.rockons.pageSize = RockStorGlobals.maxPageSize;
        this.service = new Service({
            name: 'docker'
        });
        this.dependencies.push(this.rockons, this.service);
        this.updateFreq = 15000;
        this.defTab = 0;
        this.initHandlebarHelpers();
    },

    events: {
        'switchChange.bootstrapSwitch': 'rockonToggle',
        'click #js-install-rockon': 'installRockon',
        'click #js-uninstall-rockon': 'uninstallRockon',
        'click #js-rockons-installed': 'installedRockons',
        'click #js-update-rockons': 'updateRockons',
        'click #js-rockon-settings': 'rockonSettings',
        'click #js-rockon-info': 'rockonInfo'
    },

    render: function() {
        this.service.fetch();
        this.rockons.fetch();
        this.updateStatus();

        return this;
    },

    renderRockons: function() {
        var _this = this;

        var ui_map = {};
        var uis = this.rockons.filter(function(rockon) {
            ui_map[rockon.get('id')] = null;
            if (rockon.get('ui')) {
                var protocol = 'http://';
                if (rockon.get('https')) {
                    protocol = 'https://';
                }
                var ui_link = protocol + window.location.hostname;
                if (rockon.get('ui_port')) {
                    ui_link += ':' + rockon.get('ui_port');
                }
                if (rockon.get('link')) {
                    ui_link += '/' + rockon.get('link');
                }
                ui_map[rockon.get('id')] = ui_link;
            }
            return false;
        });
        $(this.el).html(this.template({
            rockons: _this.rockons,
            rockonJson: _this.rockons.toJSON(),
            status: _this.service.get('status'),
            ui_map: ui_map
        }));

        if (!this.dockerServiceView) {
            this.dockerServiceView = new DockerServiceView({
                parentView: _this
            });
        }
        // Render the Rockons template with a status describing whether
        // the Rockons service has been enabled

        $('#docker-service-ph').append(this.dockerServiceView.render().el);

        $('#install-rockon-overlay').overlay({
            load: false
        });
        this.$('ul.nav.nav-tabs').tabs('div.css-panes > div');
        this.$('.nav-tabs li:eq(' + this.defTab + ') a').click();

        //initalize bootstrap switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color
    },

    installRockon: function(event) {
        var _this = this;
        this.defTab = 0;
        event.preventDefault();
        var button = $(event.currentTarget);
        var rockon_id = button.attr('data-name');
        var rockon_o = _this.rockons.get(rockon_id);
        var wizardView = new RockonInstallWizardView({
            model: new Backbone.Model({
                rockon: rockon_o
            }),
            title: rockon_o.get('name') + ' install wizard',
            parent: this
        });
        $('.overlay-content', '#install-rockon-overlay').html(wizardView.render().el);
        $('#install-rockon-overlay').overlay().load();
    },

    uninstallRockon: function(event) {
        var _this = this;
        event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        var rockon_id = button.attr('data-name');
        var rockon_o = _this.rockons.get(rockon_id);
        if (confirm('Are you sure you want to uninstall this Rock-on (' + rockon_o.get('name') + ')?')) {
            disableButton(button);
            $.ajax({
                url: '/api/rockons/' + rockon_id + '/uninstall',
                type: 'POST',
                dataType: 'json',
                success: function() {
                    _this.defTab = 0;
                    _this.render();
                    enableButton(button);
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    updateRockons: function(event) {
        var _this = this;
        event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        $.ajax({
            url: '/api/rockons/update',
            type: 'POST',
            dataType: 'json',
            success: function() {
                _this.defTab = 1;
                _this.render();
                enableButton(button);
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    rockonSettings: function(event) {
        var _this = this;
        event.preventDefault();
        var rockon_id = _this.getRockonId(event);
        var rockon_o = _this.rockons.get(rockon_id);
        _this.stopPolling();
        var wizardView = new RockonSettingsWizardView({
            model: new Backbone.Model({
                rockon: rockon_o
            }),
            title: rockon_o.get('name') + ' Settings',
            parent: this
        });
        $('.overlay-content', '#install-rockon-overlay').html(wizardView.render().el);
        $('#install-rockon-overlay').overlay().load();
    },

    rockonInfo: function(event) {
        var _this = this;
        event.preventDefault();
        var rockon_id = _this.getRockonId(event);
        var rockon_o = _this.rockons.get(rockon_id);
        _this.stopPolling();
        var infoView = new RockonInfoView({
            model: new Backbone.Model({
                rockon: rockon_o
            }),
            title: 'Additional information about ' + rockon_o.get('name') + ' Rock-on',
            parent: this
        });
        $('.overlay-content', '#install-rockon-overlay').html(infoView.render().el);
        $('#install-rockon-overlay').overlay().load();
    },

    getRockonId: function(event) {
        var slider = $(event.currentTarget);
        return slider.attr('data-rockon-id');
    },

    rockonToggle: function(event, state) {
        var rockonId = $(event.target).attr('data-rockon-id');
        if (state) {
            this.startRockon(rockonId);
        } else {
            this.stopRockon(rockonId);
        }
    },

    startRockon: function(rockonId) {
        var _this = this;
        this.stopPolling();
        $.ajax({
            url: '/api/rockons/' + rockonId + '/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.defTab = 0;
                _this.updateStatus();
            },
            error: function(data, status, xhr) {
                console.log('error while starting rockon');
            }
        });
    },

    stopRockon: function(rockonId) {
        var _this = this;
        this.stopPolling();
        $.ajax({
            url: '/api/rockons/' + rockonId + '/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.defTab = 0;
                _this.updateStatus();
            },
            error: function(data, status, xhr) {
                console.log('error while stopping rockon');
            }
        });
    },

    pendingOps: function() {
        var pending = this.rockons.find(function(rockon) {
            if ((rockon.get('status').search('pending') != -1) || (rockon.get('state').search('pending') != -1)) {
                return true;
            }
        });
        if (pending) {
            return true;
        }
        return false;
    },

    updateStatus: function() {
        var _this = this;
        _this.startTime = new Date().getTime();
        _this.rockons.fetch({
            silent: true,
            success: function(data, response, options) {
                _this.renderRockons();
                if (_this.pendingOps()) {
                    var ct = new Date().getTime();
                    var diff = ct - _this.startTime;
                    if (diff > _this.updateFreq) {
                        _this.updateStatus();
                    } else {
                        _this.timeoutId = window.setTimeout(function() {
                            _this.updateStatus();
                        }, _this.updateFreq - diff);
                    }
                } else {
                    _this.stopPolling();
                }
            }
        });
    },

    stopPolling: function() {
        if (!_.isUndefined(this.timeoutId)) {
            window.clearInterval(this.timeoutId);
        }
    },

    installedRockons: function(event) {
        if (this.pendingOps()) {
            this.updateStatus();
        }
    },

    //@todo: cleanup after figuring out how to track the installed variable.
    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_installedRockons', function() {
            var html = '';
            _this = this;
            var installed = 0;
            this.rockons.each(function(rockon, index) {
                if (rockon.get('state') == 'installed' || rockon.get('state').match('pending')) {
                    installed += 1;
                    html += '<div id="js-rockons-installed" class="tab-section" style="position: relative">';
                    if (rockon.get('state').search('pending') > -1 || rockon.get('status').search('pending') > -1) {
                        var text = 'Installing ...';
                        if (rockon.get('state') == 'pending_uninstall') {
                            text = 'Uninstalling ...';
                        } else if (rockon.get('status') == 'pending_start') {
                            text = 'Starting ...';
                        } else if (rockon.get('status') == 'pending_stop') {
                            text = 'Stopping ...';
                        }
                        html += '<div class="overlay">';
                        html += '<div class="text-center">';
                        html += '<i class="fa fa-3x fa-cog fa-spin"></i>';
                        html += '<div>';
                        html += '<p class="lead">' + text + '</p>';
                        html += '</div>';
                        html += '</div>';
                        html += '</div>';
                    }
                    html += '<div class="row">';
                    html += '<div class="col-md-6">';
                    html += '<a href="' + rockon.get('website') + '" target="_blank"><h3><u>' + rockon.get('name') + '</u></h3></a>';
                    html += '<p>' + rockon.get('description') + '</p>';
                    html += '<h4>Current status: ' + rockon.get('status') + '</h4>';
                    html += '</div>';
                    html += '<div class="col-md-3"></div>';
                    html += '<div class="col-md-3">';
                    if (rockon.get('state') == 'installed' && !rockon.get('status').match('pending')) {
                        if (rockon.get('status') == 'started') {
                            html += '<input type="checkbox" name="rockon-status-checkbox" data-rockon-id="' + rockon.get('id') + '" data-size="mini" checked />';
                        } else {
                            html += '<input type="checkbox" name="rockon-status-checkbox" data-rockon-id="' + rockon.get('id') + '" data-size="mini" />';
                        }
                        html += ' <a id="js-rockon-settings" href="#" class="settings" data-rockon-id="' + rockon.get('id') + '"><i class="glyphicon glyphicon-wrench"></i></a>&nbsp;&nbsp';
                        if (rockon.get('more_info')) {
                            html += '<a id="js-rockon-info" href="#" class="moreinfo" data-rockon-id="' + rockon.get('id') + '"><i class="fa fa-info-circle"></i></a>';
                        }
                        html += '<br><br>';
                        if (_this.ui_map[rockon.get('id')]) {
                            if (rockon.get('status') == 'started') {
                                html += '<a href="' + _this.ui_map[rockon.get('id')] + '" target="_blank" class="btn btn-primary">' + rockon.get('name') + ' UI</a> ';
                            } else {
                                html += '<a href="#" class="btn btn-primary disabled" title="Switch on to access the UI">' + rockon.get('name') + ' UI</a> ';
                            }
                        }
                        if (rockon.get('status') != 'started') {
                            html += '<a id="js-uninstall-rockon" class="btn btn-danger" data-name="' + rockon.get('id') + '">Uninstall</a>';
                        }

                    }
                    html += '</div>';
                    html += '</div>';
                    html += '</div>';
                }
            });
            if (installed == 0) {
                html += '<div class="tab-section">';
                html += '<div class="row">';
                html += '<div class="col-md-12">';
                html += '<h3>There are no Rock-ons installed currently.</h3>';
                html += '</div>';
                html += '</div>';
                html += '</div>';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('display_allRockons', function() {
            var html = '';
            var all = 0;
            this.rockons.each(function(rockon, index) {
                if (rockon.get('state') == 'available' || rockon.get('state') == 'install_failed') {
                    all += 1;
                    html += '<div class="tab-section">';
                    html += '<div class="row">';
                    html += '<div class="col-md-12">';
                    html += '<a href="' + rockon.get('website') + '" target="_blank"><h3>' + rockon.get('name') + '</h3></a>';
                    html += '<p>' + rockon.get('description') + '</p>';
                    if (rockon.get('state') == 'install_failed') {
                        html += '<strong>Failed to install in the previous attempt.</strong> Here\'s how you can proceed.';
                        html += '<ul>';
                        html += '<li>Check logs in /opt/rockstor/var/log for clues.</li>';
                        html += '<li>Install again.</li>';
                        html += '<li>If the problem persists, post on the <a href="http://forum.rockstor.com" target="_blank">Forum</a> or email support@rockstor.com</li>';
                        html += '</ul>';
                    }
                    html += '<a id="js-install-rockon" class="btn btn-primary pull-right" href="#" data-name="' + rockon.get('id') + '">Install</a>';
                    html += '</div>';
                    html += '</div>';
                    html += '</div>';
                }
            });
            if (all == 0) {
                html += '<div class="tab-section">';
                html += '<div class="row">';
                html += '<div class="col-md-12">';
                html += '<h3>Click on Update button to check for new Rock-ons.</h3>';
                html += '</div>';
                html += '</div>';
                html += '</div>';
            }
            return new Handlebars.SafeString(html);
        });
    }

});


RockonInstallWizardView = WizardView.extend({
    initialize: function() {
        WizardView.prototype.initialize.apply(this, arguments);
        this.pages = [];
        this.rockon = this.model.get('rockon');
        this.volumes = new RockOnVolumeCollection(null, {
            rid: this.rockon.id
        });
        this.ports = new RockOnPortCollection(null, {
            rid: this.rockon.id
        });
        this.custom_config = new RockOnCustomConfigCollection(null, {
            rid: this.rockon.id
        });
        this.devices = new RockOnDeviceCollection(null, {
            rid: this.rockon.id
        });
        this.environment = new RockOnEnvironmentCollection(null, {
            rid: this.rockon.id
        });
    },

    fetchVolumes: function() {
        var _this = this;
        this.volumes.fetch({
            success: function() {
                _this.model.set('volumes', _this.volumes);
                _this.fetchPorts();
            }
        });
    },

    fetchPorts: function() {
        var _this = this;
        this.ports.fetch({
            success: function() {
                _this.model.set('ports', _this.ports);
                _this.fetchDevices();
            }
        });
    },

    fetchCustomConfig: function() {
        var _this = this;
        this.custom_config.fetch({
            success: function() {
                _this.model.set('custom_config', _this.custom_config);
                _this.fetchEnvironment();
            }
        });
    },

    fetchDevices: function() {
        var _this = this;
        this.devices.fetch({
            success: function() {
                _this.model.set('devices', _this.devices);
                _this.fetchCustomConfig();
            }
        });
    },

    fetchEnvironment: function() {
        var _this = this;
        this.environment.fetch({
            success: function() {
                _this.model.set('environment', _this.environment);
                _this.addPages();
            }
        });
    },

    render: function() {
        this.fetchVolumes();
        return this;
    },

    addPages: function() {
        if (this.volumes.length > 0) {
            this.pages.push(RockonShareChoice);
        }
        if (this.ports.length > 0) {
            this.pages.push(RockonPortChoice);
        }
        if (this.devices.length > 0) {
            this.pages.push(RockonDeviceChoice);
        }
        if (this.environment.length > 0) {
            this.pages.push(RockonEnvironment);
        }
        if (this.custom_config.length > 0) {
            this.pages.push(RockonCustomChoice);
        }
        this.pages.push.apply(this.pages, [RockonInstallSummary, RockonInstallComplete]);
        WizardView.prototype.render.apply(this, arguments);
        return this;
    },

    setCurrentPage: function() {
        this.currentPage = new this.pages[this.currentPageNum]({
            model: this.model,
            parent: this,
            evAgg: this.evAgg
        });
    },

    modifyButtonText: function() {
        if (this.currentPageNum == (this.pages.length - 2)) {
            this.$('#next-page').html('Submit');
        } else if (this.currentPageNum == (this.pages.length - 1)) {
            this.$('#prev-page').hide();
            this.$('#next-page').html('Close');
        } else if (this.currentPageNum == 0) {
            this.$('#prev-page').hide();
        } else {
            this.$('#prev-page').show();
            this.$('#next-page').html('Next');
            this.$('#ph-wizard-buttons').show();
        }
    },

    lastPage: function() {
        return ((this.pages.length > 1) &&
            ((this.pages.length - 1) == this.currentPageNum));
    },

    finish: function() {
        this.parent.$('#install-rockon-overlay').overlay().close();
        this.parent.render();
    }
});

RockonShareChoice = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_install_choice;
        this.vol_template = window.JST.rockons_vol_form;
        this.rockon = this.model.get('rockon');
        this.volumes = this.model.get('volumes');
        this.shares = new ShareCollection();
        this.shares.setPageSize(100);
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.shares.on('reset', this.renderVolumes, this);
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.shares.fetch();
        return this;
    },

    renderVolumes: function() {
        this.$('#ph-vols-table').html(this.vol_template({
            volumes: this.volumes.toJSON(),
            shares: this.shares.toJSON()
        }));
        //form validation
        this.volForm = this.$('#vol-select-form');
        var rules = {};
        var messages = {};
        this.volumes.each(function(volume) {
            rules[volume.id] = {
                required: true
            };
            messages[volume.id] = 'Please read the tooltip and make the right selection';
        });
        this.validator = this.volForm.validate({
            rules: rules,
            messages: messages
        });
    },

    save: function() {

        // Validate the form
        if (!this.volForm.valid()) {
            this.validator.showErrors();
            return $.Deferred().reject();
        }

        var share_map = {};
        var volumes = this.volumes.filter(function(volume) {
            share_map[this.$('#' + volume.id).val()] = volume.get('dest_dir');
            return volume;
        }, this);
        this.model.set('share_map', share_map);
        return $.Deferred().resolve();
    }
});

RockonPortChoice = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_port_choice;
        this.port_template = window.JST.rockons_ports_form;
        this.ports = this.model.get('ports');
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.$('#ph-ports-form').html(this.port_template({
            ports: this.ports.toJSON()
        }));

        // Add form validation
        this.portForm = this.$('#port-select-form');
        var rules = {};
        var messages = {};
        this.ports.each(function(port) {
            rules[port.id] = {
                required: true,
                number: true
            };
            messages[port.id] = 'Please enter a valid port number';
        });
        this.validator = this.portForm.validate({
            rules: rules,
            messages: messages
        });
        return this;
    },

    save: function() {

        // Validate the form
        if (!this.portForm.valid()) {
            this.validator.showErrors();
            // return rejected promise so that the wizard doesn't proceed to the next page.
            return $.Deferred().reject();
        }

        var port_map = {};
        var cports = this.ports.filter(function(port) {
            port_map[this.$('#' + port.id).val()] = port.get('containerp');
            return port;
        }, this);
        this.model.set('port_map', port_map);
        return $.Deferred().resolve();
    },
});

RockonCustomChoice = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_custom_choice;
        this.cc_template = window.JST.rockons_cc_form;
        this.custom_config = this.model.get('custom_config');
        this.initHandlebarHelpers();
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        //@todo: working only for the ownCloud and Discourse rockons. Fix to work for the rest
        this.$('#ph-cc-form').html(this.cc_template({
            cc: this.custom_config.toJSON()
        }));
        this.cc_form = this.$('#custom-choice-form');
        var rules = {};
        var messages = {};
        this.custom_config.each(function(cc) {
            rules[cc.id] = 'required';
            messages[cc.id] = 'This is a required field.';
        });
        this.validator = this.cc_form.validate({
            rules: rules,
            messages: messages
        });
        return this;
    },

    save: function() {
        if (!this.cc_form.valid()) {
            this.validator.showErrors();
            return $.Deferred().reject();
        }
        var cc_map = {};
        var cconfigs = this.custom_config.filter(function(cc) {
            cc_map[cc.get('key')] = this.$('#' + cc.id).val();
            return cc;
        }, this);
        this.model.set('cc_map', cc_map);
        return $.Deferred().resolve();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('findInputType', function(ccLabel) {
            if (ccLabel.match(/password/i)) {
                return true;
            }
            return false;
        });
    }
});

RockonDeviceChoice = RockonCustomChoice.extend({
    initialize: function() {
        this.template = window.JST.rockons_device_choice;
        this.device_template = window.JST.rockons_device_form;
        this.device_config = this.model.get('devices');
        this.initHandlebarHelpers();
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.$('#ph-device-form').html(this.device_template({
            device: this.device_config.toJSON()
        }));
        this.device_form = this.$('#device-choice-form');
        this.$('#ph-device-form').html(this.device_template({
            device: this.device_config.toJSON()
        }));
        this.device_form = this.$('#device-choice-form');

        // Add form validation
        var rules = {};
        var messages = {};
        this.device_config.each(function(device) {
            rules[device.id] = {
                checkDevice: true,
                required: false
            };
        });

        $.validator.addMethod('checkDevice', function(value, element) {
            var regExp = new RegExp(/^\/dev\/[A-Za-z0-9,-/ ]+$/);
            return this.optional(element) || regExp.test(value);
        }, 'Please enter a valid absolute path.');

        this.validator = this.device_form.validate({
            rules: rules,
            messages: messages
        });
        return this;
    },

    save: function() {
        if (!this.device_form.valid()) {
            this.validator.showErrors();
            return $.Deferred().reject();
        }
        var dev_map = {};
        var devices = this.device_config.filter(function(cdev) {
            dev_map[cdev.get('dev')] = this.$('#' + cdev.id).val();
            return cdev;
        }, this);
        this.model.set('dev_map', dev_map);
        return $.Deferred().resolve();
    }
});

RockonEnvironment = RockonCustomChoice.extend({
    initialize: function() {
        RockonCustomChoice.prototype.initialize.apply(this, arguments);
        this.custom_config = this.model.get('environment');
    },

    save: function() {
        if (!this.cc_form.valid()) {
            this.validator.showErrors();
            return $.Deferred().reject();
        }
        var env_map = {};
        var envars = this.custom_config.filter(function(cvar) {
            env_map[cvar.get('key')] = this.$('#' + cvar.id).val();
            return cvar;
        }, this);
        this.model.set('env_map', env_map);
        return $.Deferred().resolve();
    }
});

RockonInstallSummary = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_install_summary;
        this.table_template = window.JST.rockons_summary_table;
        this.share_map = this.model.get('share_map');
        this.port_map = this.model.get('port_map');
        this.cc_map = this.model.get('cc_map');
        this.dev_map = this.model.get('dev_map');
        this.env_map = this.model.get('env_map');
        this.ports = this.model.get('ports');
        this.devices = this.model.get('devices');
        this.environment = this.model.get('environment');
        this.cc = this.model.get('custom_config');
        this.rockon = this.model.get('rockon');
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.$('#ph-summary-table').html(this.table_template({
            share_map: this.share_map,
            port_map: this.port_map,
            cc_map: this.cc_map,
            dev_map: this.dev_map,
            env_map: this.env_map
        }));
        return this;
    },

    save: function() {
        var _this = this;
        //$('button#next-page').prop('disable', true);
        document.getElementById('next-page').disabled = true;
        return $.ajax({
            url: '/api/rockons/' + this.rockon.id + '/install',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                'ports': this.port_map,
                'shares': this.share_map,
                'cc': this.cc_map,
                'devices': this.dev_map,
                'environment': this.env_map
            }),
            success: function() {
                document.getElementById('next-page').disabled = false;
            },
            error: function(request, status, error) {}
        });
    },
});

RockonInstallComplete = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_install_complete;
        this.port_map = this.model.get('port_map');
        this.share_map = this.model.get('share_map');
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
    },

    render: function() {
        $(this.el).html(this.template({
            model: this.model,
            port_map: this.port_map,
            share_map: this.share_map
        }));
        return this;
    }

});

RockonInfoView = WizardView.extend({
    initialize: function() {
        WizardView.prototype.initialize.apply(this, arguments);
        this.pages = [RockonInfoSummary, ];
    },

    render: function() {
        WizardView.prototype.render.apply(this, arguments);
        return this;
    },

    modifyButtonText: function() {
        this.$('#prev-page').hide();
        this.$('#next-page').hide();
    }
});

RockonSettingsWizardView = WizardView.extend({
    events: {
        'click #next-page': 'nextPage',
        'click #prev-page': 'prevPage',
        'click #add-label': 'addLabels'
    },

    initialize: function() {
        WizardView.prototype.initialize.apply(this, arguments);
        this.template = window.JST.rockons_wizard_summary;
        this.pages = [RockonSettingsSummary, ];
        this.rockon = this.model.get('rockon');
        this.volumes = new RockOnVolumeCollection(null, {
            rid: this.rockon.id
        });
        this.ports = new RockOnPortCollection(null, {
            rid: this.rockon.id
        });
        this.custom_config = new RockOnCustomConfigCollection(null, {
            rid: this.rockon.id
        });
        this.devices = new RockOnDeviceCollection(null, {
            rid: this.rockon.id
        });
        this.environment = new RockOnEnvironmentCollection(null, {
            rid: this.rockon.id
        });
        this.labels = new RockOnLabelCollection(null, {
            rid: this.rockon.id
        });
        this.containers = new ContainerCollection(null, {
            rid: this.rockon.id
        });

        this.shares = {};
        this.model.set('shares', this.shares);
        this.new_labels = {};
        this.model.set('new_labels', this.new_labels);
        this.evAgg.bind('addLabels', this.addLabels, this);
    },

    fetchVolumes: function() {
        var _this = this;
        this.volumes.fetch({
            success: function() {
                _this.model.set('volumes', _this.volumes);
                _this.fetchPorts();
            }
        });
    },

    fetchPorts: function() {
        var _this = this;
        this.ports.fetch({
            success: function() {
                _this.model.set('ports', _this.ports);
                _this.fetchDevices();
            }
        });
    },

    fetchDevices: function() {
        var _this = this;
        this.devices.fetch({
            success: function() {
                _this.model.set('devices', _this.devices);
                _this.fetchCustomConfig();
            }
        });
    },

    fetchCustomConfig: function() {
        var _this = this;
        this.custom_config.fetch({
            success: function() {
                _this.model.set('custom_config', _this.custom_config);
                _this.fetchEnvironment();
            }
        });
    },

    fetchEnvironment: function() {
        var _this = this;
        this.environment.fetch({
            success: function() {
                _this.model.set('environment', _this.environment);
                _this.fetchContainers();
            }
        });
    },

    fetchContainers: function() {
        var _this = this;
        this.containers.fetch({
            success: function() {
                _this.model.set('containers', _this.containers);
                _this.fetchLabels();
            }
        });
    },

    fetchLabels: function() {
        var _this = this;
        this.labels.fetch({
            success: function() {
                _this.model.set('labels', _this.labels);
                _this.addPages();
            }
        });
    },

    addLabels: function() {
        this.pages[1] = RockonAddLabel;
        this.pages[2] = RockonSettingsSummary;
        this.pages[3] = RockonSettingsComplete;
        WizardView.prototype.render.apply(this, arguments);
        return this;
    },

    render: function() {
        this.fetchVolumes();
        return this;
    },

    addPages: function() {
        if (this.rockon.get('volume_add_support')) {
            this.pages.push.apply(this.pages, [RockonAddShare, RockonSettingsSummary,
                RockonSettingsComplete
            ]);
        }
        WizardView.prototype.render.apply(this, arguments);
        return this;
    },

    setCurrentPage: function() {
        this.currentPage = new this.pages[this.currentPageNum]({
            model: this.model,
            parent: this,
            evAgg: this.evAgg
        });
    },

    modifyButtonText: function() {
        if (this.currentPageNum == 0) {
            this.$('#prev-page').hide();
            this.$('#add-label').html('Add Label');
            this.$('#add-label').css({'display': 'inline'});
            this.$('#next-page').html('Add Storage');
            if (!this.rockon.get('volume_add_support')) {
                this.$('#next-page').hide();
            } else {
                if (this.rockon.get('status') == 'started') {
                    var _this = this;
                    this.$('.wizard-btn').click(function() {
                        //disabling the button so that the backbone event is not triggered after the alert click.
                        _this.$('.wizard-btn').prop('disabled', true);
                        alert('Rock-on must be turned off to change its settings.');
                    });
                }
            }
        } else if (this.currentPageNum == (this.pages.length - 2)) {
            this.$('#prev-page').show();
            this.$('#next-page').html('Next');
        } else if (this.currentPageNum == (this.pages.length - 1)) {
            this.$('#prev-page').show();
            this.$('#add-label').hide();
            this.$('#next-page').html('Submit');
        } else {
            this.$('#prev-page').show();
            this.$('#add-label').hide();
            this.$('#next-page').html('Next');
            this.$('#ph-wizard-buttons').show();
        }
    },

    lastPage: function() {
        return ((this.pages.length > 1) &&
            ((this.pages.length - 1) == this.currentPageNum));
    },

    finish: function() {
        this.parent.$('#install-rockon-overlay').overlay().close();
        this.parent.render();
    }

});

RockonAddShare = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_add_shares;
        this.sub_template = window.JST.rockons_add_shares_form;
        this.shares = new ShareCollection();
        this.shares.setPageSize(100);
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.shares.on('reset', this.renderShares, this);
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.shares.fetch();
        return this;
    },

    renderShares: function() {
        this.share_map = this.model.get('shares');
        this.volumes = this.model.get('volumes');
        this.used_shares = [];
        var _this = this;
        this.volumes.each(function(volume, index) {
            _this.used_shares.push(volume.get('share_name'));
        });
        for (var s in this.share_map) {
            this.used_shares.push(s);
        }
        this.filtered_shares = this.shares.filter(function(share) {
            if (_this.used_shares.indexOf(share.get('name')) == -1) {
                return share;
            }
        }, this);
        this.$('#ph-add-shares-form').html(this.sub_template({
            shares: this.filtered_shares.map(function(s) {
                return s.toJSON();
            })
        }));
        this.share_form = this.$('#vol-select-form');
        this.validator = this.share_form.validate({
            rules: {
                'volume': 'required',
                'share': 'required'
            },
            messages: {
                'volume': 'Must be a valid unix path. Eg: /data/media',
                'share': 'Select an appropriate Share to map'
            }
        });
        return this;
    },

    save: function() {
        if (!this.share_form.valid()) {
            this.validator.showErrors();
            return $.Deferred().reject();
        }
        this.share_map = this.model.get('shares');
        this.share_map[this.$('#volume').val()] = this.$('#share').val();
        this.model.set('shares', this.share_map);
        return $.Deferred().resolve();
    }
});

RockonAddLabel = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_add_labels;
        this.sub_template = window.JST.rockons_add_labels_form;
        this.rockon = this.model.get('rockon');
        this.containers = new ContainerCollection(null, {
            rid: this.rockon.id
        });
        this.containers.setPageSize(100);
        this.count = 1;
        this.maxlabels = 10; // Define maximum numbers of labels
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.containers.on('reset', this.renderContainers, this);
    },

    events: {
        'click #b1': 'addField',
        'click .remove-me': 'removeField'
    },

    addField: function(event) {
        event.preventDefault();
        var count = this.count;
        if (count < this.maxlabels) {
            count++;
            this.count = count;
            var nbox = '<div id="label-box' + count +'" class="form-group">' +
                '<label class="col-sm-3 control-label" for="labels">Label:  <span class="required">*</span></label>' +
                '<div class="controls col-sm-5">' +
                '<input class="form-control input-btn" name="labels[]" id="field' + count +'" placeholder="Enter another label" type="text" />' +
                '<button id="remove_' + count + '" class="btn btn-danger remove-me">-</button>' +
                '<button id="b1" class="btn" type="button">+</button>' +
                '</div>' +
                '<i class="fa fa-info-circle fa-lg" title="Enter the desired label in the following form: mycustomlabel"></i>' +
                '</div>';
            var newbox = $(nbox);
            $('.label-box-new').append(newbox);
        } else {
            alert('Maximum number of labels reached.');
        }
    },

    removeField: function(event) {
        event.preventDefault();
        var count = this.count;
        $(event.currentTarget).parent('div').parent('div').remove();
        count--;
        this.count = count;
        return this;
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.containers.fetch();
        return this;
    },

    fetchContainers: function() {
        var _this = this;
        this.containers.fetch({
            success: function() {
                _this.model.set('containers', _this.containers);
            }
        });
        return this;
    },

    renderContainers: function() {
        this.containers_map = this.model.get('containers');
        this.used_containers = [];
        var _this = this;
        for (var c in this.containers_map) {
            this.used_containers.push(c);
        }
        this.filtered_containers = this.containers.filter(function(container) {
            if (_this.used_containers.indexOf(container.get('name')) == -1) {
                return container;
            }
        }, this);
        this.$('#ph-add-labels-form').html(this.sub_template({
            containers: this.filtered_containers.map(function(c) {
                return c.toJSON();
            })
        }));
        this.container_form = this.$('#container-select-form');
        this.validator = this.container_form.validate({
            rules: {
                'container': 'required',
                'labels[]': 'required'
            },
            messages: {
                'container': 'Please select a container',
                'labels[]': 'Please enter a label'
            }
        });
        // Ensure previous page is correct
        if (this.rockon.get('volume_add_support')) {
            this.parent.pages[1] = RockonAddShare;
        } else {
        this.parent.pages[1] = RockonAddLabel;
        }
        return this;
    },

    save: function() {
        if (!this.container_form.valid()) {
            this.validator.showErrors();
            return $.Deferred().reject();
        }
        var field_data = $('input[name^=labels]').map(function(idx, elem) {
            if ($(elem).val() != "") {
                return $(elem).val();
            }
        }).get();
        var new_labels = {};
        field_data.forEach(function(prop) {
            new_labels[prop] = this.$('#container').val();
        });
        this.new_labels = new_labels;
        this.model.set('new_labels', this.new_labels);
        return $.Deferred().resolve();
    }
});

RockonInfoSummary = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_settings_summary;
        this.sub_template = window.JST.rockons_more_info;
        this.rockon = this.model.get('rockon');
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.$('#ph-settings-summary-table').html(this.sub_template({
            rockonMoreInfo: this.rockon.get('more_info')
        }));
        return this;
    }
});

RockonSettingsSummary = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_settings_summary;
        this.sub_template = window.JST.rockons_settings_summary_table;
        this.rockon = this.model.get('rockon');
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.initHandlebarHelpers();
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.$('#ph-settings-summary-table').html(this.sub_template({
            model: this.model,
            volumes: this.model.get('volumes').toJSON(),
            new_volumes: this.model.get('shares'),
            ports: this.model.get('ports').toJSON(),
            cc: this.model.get('custom_config').toJSON(),
            device: this.model.get('devices').toJSON(),
            env: this.model.get('environment').toJSON(),
            labels: this.model.get('labels').toJSON(),
            new_labels: this.model.get('new_labels'),
            rockon: this.model.get('rockon')
        }));
        // Ensure previous page is correct
        if (!$.isEmptyObject(this.model.get('new_labels'))) {
            this.parent.pages[1] = RockonAddLabel;
        } else {
            if (this.rockon.get('volume_add_support')) {
                this.parent.pages[1] = RockonAddShare;
            } else {
                this.parent.pages[1] = RockonAddLabel;
            }
        }
        return this;
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_newVolumes', function() {
            // Display newly-defined shares and their corresponding mapping
            // for confimation before submit in settings_summary_table.jst
            var html = '';
            for (share in this.new_volumes) {
                html += '<tr>';
                html += '<td>Share</td>';
                html += '<td>' + this.new_volumes[share] + '</td>';
                html += '<td>' + share + '</td>';
                html += '</tr>';
            }
            return new Handlebars.SafeString(html);
        });
        Handlebars.registerHelper('display_newLabels', function() {
            // Display newly-defined labels and their corresponding container
            // for confimation before submit in settings_summary_table.jst
            var html = '';
            for (new_label in this.new_labels) {
                html += '<tr>';
                html += '<td>Label</td>';
                html += '<td>' + this.new_labels[new_label] + '</td>';
                html += '<td>' + new_label + '</td>';
                html += '</tr>';
            }
            return new Handlebars.SafeString(html);
        });
    }
});

RockonSettingsComplete = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.rockons_update_complete;
        this.rockon = this.model.get('rockon');
        this.shares = this.model.get('shares');
        this.new_labels = this.model.get('new_labels');
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
    },

    render: function() {
        $(this.el).html(this.template({
            model: this.model
        }));
        return this;
    },

    save: function() {
        var _this = this;
        if (document.getElementById('next-page').disabled) return false;
        document.getElementById('next-page').disabled = true;
        return $.ajax({
            url: '/api/rockons/' + this.rockon.id + '/update',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                'shares': this.shares,
                'labels': this.new_labels
            }),
            success: function() {}
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

RollbackView = RockstorLayoutView.extend({
    events: {
        'click #js-cancel': 'cancel',
        'click #js-confirm-rollback-submit': 'confirmRollback'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        // Templates
        this.template = window.JST.share_rollback;
        this.snapshot_list_template = window.JST.share_rollback_snapshot_list;
        // Dependencies
        this.share = new Share({
            sid: this.options.shareId
        });
        this.collection = new SnapshotCollection();
        this.collection.pageSize = 10;
        this.collection.setUrl(this.options.shareId);
        this.dependencies.push(this.share);
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderSnapshotList, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderRollback, this);
        return this;
    },

    renderRollback: function() {
        var _this = this;
        $(this.el).html(this.template({
            collection: this.collection,
            shareName: this.share.get('name')
        }));
        this.renderSnapshotList();
        this.$('#rollback-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                snapshot: 'required'
            },
            submitHandler: function() {
                var button = _this.$('#rollback-share');
                var snapName = _this.$('input:radio[name=snapshot]:checked').val();
                // set snap name in confirm dialog
                _this.$('#confirm-snap-name').html(snapName);
                // show confirm dialog
                _this.$('#confirm-rollback').modal();
                return false;
            }
        });

    },

    renderSnapshotList: function() {
        this.$('#ph-snapshot-list').html(this.snapshot_list_template({
            rollbackSnaps: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty()
        }));
    },

    confirmRollback: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var snapName = this.$('input:radio[name=snapshot]:checked').val();
        $.ajax({
            url: '/api/shares/' + _this.share.get('id') + '/rollback',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                name: snapName
            }),
            success: function() {
                enableButton(button);
                _this.$('#confirm-rollback').modal('hide');
                $('.modal-backdrop').remove();
                app_router.navigate('shares/' + _this.share.get('id'), {
                    trigger: true
                });

            },
            error: function(xhr, status, error) {
                enableButton(button);
            },
        });
    },

    cancel: function(event) {
        if (event) event.preventDefault();
        app_router.navigate('shares/' + this.share.get('id'), {
            trigger: true
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('getDate', function(toc) {
            return moment(toc).format(RS_DATE_FORMAT);
        });
        Handlebars.registerHelper('humanReadableSize', function(size) {
            return humanize.filesize(size * 1024);
        });
    }

});

//Add pagination
Cocktail.mixin(RollbackView, PaginationMixin);

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

SambaView = RockstorLayoutView.extend({
    events: {
        'switchChange.bootstrapSwitch': 'switchStatus',
        'click .delete-samba-export': 'deleteSambaExport'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.samba_samba;
        this.module_name = 'samba';
        this.collection = new SambaCollection();
        this.dependencies.push(this.collection);
        this.serviceName = 'smb';
        this.service = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.service);
        this.shares = new ShareCollection();
        this.dependencies.push(this.shares);
        this.updateFreq = 5000;
        this.collection.on('reset', this.renderSamba, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        this.fetch(this.renderSamba, this);
        return this;
    },

    renderSamba: function() {
        this.freeShares = this.shares.reject(function(share) {
            var s = this.collection.find(function(sambaShare) {
                return (sambaShare.get('share') == share.get('name'));
            });
            return !_.isUndefined(s);
        }, this);

        //check if there are shares in the system
        var sharesExistBool = false;
        if (this.shares.length > 0) {
            sharesExistBool = true;
        }
        //check if there are free shares not associated with samba.
        var freeSharesBool = false;
        if (this.freeShares) {
            freeSharesBool = true;
        }
        //set a variable to true if both conditions are satisfied
        var verifySharesBool = false;
        if (freeSharesBool && sharesExistBool) {
            verifySharesBool = true;
        }

        $(this.el).html(this.template({
            samba: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            service: this.service,
            freeShares: this.freeShares,
            sharesNotEmpty: verifySharesBool
        }));

        this.renderDataTables();

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('input[name="samba-export-checkbox"]').bootstrapSwitch('state', this.service.get('status'), true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        // Display NFS Export Service Warning
        if (!this.service.get('status')) {
            this.$('#samba-warning').show();
        } else {
            this.$('#samba-warning').hide();
        }
    },

    switchStatus: function(event, state) {
        if (state) {
            this.startService();
        } else {
            this.stopService();
        }
    },

    deleteSambaExport: function(event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Delete samba export... Are you sure? ')) {
            disableButton(button);
            var id = $(event.currentTarget).data('id');
            $.ajax({
                url: '/api/samba/' + id,
                type: 'DELETE',
                dataType: 'json',
                contentType: 'application/json',
                success: function() {
                    _this.render();
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    startService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/smb/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#samba-warning').hide();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('#samba-warning').show();
            }
        });
    },

    stopService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/smb/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#samba-warning').show();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('#samba-warning').hide();
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('getAdminUsers', function(adminUsers) {
            var html = '';
            var userNames = _.reduce(adminUsers, function(s, user, i, list) {
                if (i < (list.length - 1)) {
                    return s + user.username + ',';
                } else {
                    return s + user.username;
                }
            }, '');
            if (userNames.length != 0) {
                html += userNames;
            } else {
                html += '&nbsp;--';
            }
            return new Handlebars.SafeString(html);
        });
    }
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ScheduledTasksView = RockstorLayoutView.extend({
    events: {
        'click .toggle-task': 'toggleEnabled',
        'click a[data-action=delete]': 'deleteTask'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.scheduled_tasks_task_defs;
        this.collection = new TaskDefCollection();
        this.tasks = new TaskCollection();
        this.dependencies.push(this.collection);
        this.dependencies.push(this.tasks);
        this.collection.on('reset', this.renderScheduledTasks, this);
        this.taskMap = {};
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderScheduledTasks, this);
        return this;
    },

    renderScheduledTasks: function() {
        var _this = this;
        this.collection.each(function(taskDef, index) {
            var tmp = _this.tasks.filter(function(task) {
                return task.get('task_def') == taskDef.id;
            });
            _this.taskMap[taskDef.id] = _.sortBy(tmp, function(task) {
                return moment(task.get('start')).valueOf();
            }).reverse();
        });
        // remove existing tooltips
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        $(this.el).html(this.template({
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            taskMap: this.taskMap
        }));
        this.$('[rel=tooltip]').tooltip({ placement: 'bottom'});

        this.renderDataTables();
    },

    toggleEnabled: function(event) {
        var _this = this;
        if (event) { event.preventDefault(); }
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var taskId = $(event.currentTarget).attr('data-task-id');
        var enabled = $(event.currentTarget).attr('data-action') == 'enable'
			? true : false;
        $.ajax({
            url: '/api/sm/tasks/' + taskId,
            type: 'PUT',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({enabled: enabled}),
            success: function() {
                enableButton(button);
                _this.collection.fetch({
                    success: function() {
                        _this.renderScheduledTasks();
                    }
                });
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    deleteTask: function(event) {
        var _this = this;
        if (event) { event.preventDefault(); }
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        var taskId = $(event.currentTarget).attr('data-task-id');
        var taskName = $(event.currentTarget).attr('data-task-name');
        if(confirm('Delete task:  ' + taskName + '. Are you sure?')){
            $.ajax({
                url: '/api/sm/tasks/' + taskId,
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    enableButton(button);
                    _this.collection.fetch({
                        success: function() {
                            _this.renderScheduledTasks();
                        }
                    });
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });
        }
    },

    initHandlebarHelpers: function(){
        Handlebars.registerHelper('display_scheduledTasks_table', function(adminBool){
            var html = '',
                _this = this;
            this.collection.each(function(t) {
                var taskId = t.get('id'),
                    taskName = t.get('name'),
                    taskType = t.get('task_type'),
                    jsonMeta = t.get('json_meta'),
                    tId = t.id,
                    taskMapId = _this.taskMap[tId];

                html += '<tr>';
                html += '<td><a href="#edit-scheduled-task/' + taskId + '">' + taskName + '</a></td>';
                html += '<td>' + taskType + '&nbsp;';
                if (taskType == 'snapshot') {
                    // TODO: fix this to go direct to Snapshots tab.
                    html += '(<a href="#shares/' + JSON.parse(jsonMeta).share + '">';
                    html += t.get('share_name') + '</a>)';
                } else if (taskType == 'scrub') {
                    // TODO: fix this to go direct to Scrubs tab.
                    html += '(<a href="#pools/' + JSON.parse(jsonMeta).pool + '">';
                    html += t.get('pool_name') + '</a>)';
                }
                html += '</td>';
                html += '<td>' + prettyCron.toString(t.get('crontab')) + '</td>';
                html += '<td>' + render_cronwindow(t.get('crontabwindow')) + '</td>';
                html += '<td>';
                if (t.get('enabled')) {
                    html += '<input type="checkbox" disabled="true" checked="true"></input>';
                } else {
                    html += '<input type="checkbox" disabled="true"></input>';
                }
                html += '</td>';
                html += '<td>';
                if (taskMapId) {
                    if (taskMapId.length > 0) {
                        var task = taskMapId[0],
                            taskState = task.get('state');

                        if (taskState != 'started' && taskState != 'running' && taskState != 'finished') {
                            html += '<a href="#scheduled-tasks/' + tId + '/log" class="task-log"><i class="glyphicon glyphicon-warning-sign"></i> ' + taskState + '</a>';
                        } else if (taskState == 'finished') {
                            html += '<a href="#scheduled-tasks/' + tId + '/log" class="task-log">' + moment(task.get('end')).fromNow() + '</a>';
                        } else {
                            html += '<a href="#scheduled-tasks/' + tId + '/log" class="task-log">' + taskState + '</a>';
                        }
                    }
                }
                html += '</td>';
                html += '<td>';
                html += '<a href="#edit-scheduled-task/' + taskId + '" <i class= "glyphicon glyphicon-pencil" rel="rooltip" title="Edit"></i></a>&nbsp;';
                html += '<a href="#" data-task-name="' + taskName + '" data-task-id="' + tId + '" data-action="delete"><i class="glyphicon glyphicon-trash" rel="tooltip" title="Delete"></i></a>';

                html += '</td>';
                html += '</tr>';
            });
            return new Handlebars.SafeString(html);
        });
    }
});

//Add pagination
Cocktail.mixin(ScheduledTasksView, PaginationMixin);

//Adding new inline func to render crontabwindow in a nice way and not just like a string

function render_cronwindow(cwindow) {
    var rendercwindow;
    if (!cwindow || cwindow == '*-*-*-*-*-*') {
        rendercwindow = 'Run always'; //render always without other checks
    } else {
        cwindow = cwindow.split('-');
        for (var i = 0; i < 4; i++) {
            if (cwindow[i] != '*' && cwindow[i].length == 1) { cwindow[i] = '0' + cwindow[i]; }
        }
        rendercwindow = '<i class="fa fa-clock-o"/>&nbsp;';
        if (cwindow[0] != '*') { //if hour start isn't always value the same do min start and hour min stop
            rendercwindow += 'from ' + cwindow[0] + ':' + cwindow[1];
            rendercwindow += ' to ' + cwindow[2] + ':' + cwindow[3];
        } else {
            rendercwindow += ' every hour';
        }
        rendercwindow += '&nbsp;-&nbsp;<i class="fa fa-calendar"/>&nbsp;';
        if (cwindow[4] != '*') { //as for hour start, if day start isn't star then day stop too
            var dayname = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'];
            rendercwindow += dayname[cwindow[4]] + ' to ' + dayname[cwindow[5]];
        } else {
            rendercwindow += ' on every day';
        }
    }
    return rendercwindow;
}

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ScrubDetailsView = RockstorLayoutView.extend({
    events: {},

    initialize: function () {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.pid = this.options.pid;
        this.scrubId = this.options.scrubId;
        this.template = window.JST.pool_poolscrub_details_template;
        this.pool = new Pool({
            pid: this.pid
        });
        // create poolscrub models
        this.poolscrubs = new PoolScrubCollection([], {
            snapType: 'admin'
        });
        // If we experience problems with retrieving the entire scrub history
        // then we should limit the pageSize as follows:
        // this.poolscrubs.pageSize = 50;
        this.poolscrubs.setUrl(this.pid);
        // ensure dependencies
        this.dependencies.push(this.pool);
        this.dependencies.push(this.poolscrubs);
        this.initHandlebarHelpers();
    },

    render: function () {
        this.fetch(this.renderScrubForm, this);
        return this;
    },

    renderScrubForm: function () {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var pid = this.pid;
        var pool = this.pool;
        // extract the specified scrub via id
        var _this = this;
        var scrub_details = this.poolscrubs.find(function(scrub) {
            return (scrub.get('id') == _this.scrubId)
        });

        $(this.el).html(this.template({
            pool: pool,
            poolName: pool.get('name'),
            scrubStatus: scrub_details.get('status'),
            scrubDetails: scrub_details
        }));
    },

    initHandlebarHelpers: function () {
        var _this = this;

        Handlebars.registerHelper('display_pool_scrub_details_table', function () {
            // Build a table body <tbody> containing the end scrub state
            // PoolScrub model has kb_scrubbed for data_bytes_scrubbed.
            var elements = {"id": "ID",
                "start_time": "Start Time",
                "end_time": "End Time",
                "kb_scrubbed": "Data Scrubbed",
                "data_extents_scrubbed": "Data Extents Scrubbed",
                "tree_extents_scrubbed": "Tree Extents Scrubbed",
                "tree_bytes_scrubbed": "Tree Bytes Scrubbed",
                "read_errors": "Read Errors",
                "csum_errors": "Csum Errors",
                "verify_errors": "Verify Errors",
                "no_csum": "No Csum",
                "csum_discards": "Csum Discards",
                "super_errors": "Super Errors",
                "malloc_errors": "Malloc Errors",
                "uncorrectable_errors": "Uncorrectable Errors",
                "unverified_errors": "Unverified Errors",
                "corrected_errors": "Corrected Errors",
                "last_physical": "Last Physical"
            };
            var html = '<tbody>';
            for (var item in elements) {
                html += '<tr>';
                // fill out index column
                html += '<td>' + elements[item] + '</td>';
                // fill out value column
                if (item == 'kb_scrubbed') {
                    html += '<td>';
                    if (this.scrubDetails.get(item)) {
                        html += humanize.filesize(this.scrubDetails.get(item) * 1024);
                    } else {
                        html += 'Not available'
                    }
                    html += '</td>';
                } else if (item == 'start_time' || item == 'end_time') {
                    html += '<td>';
                    if (this.scrubDetails.get(item)) {
                        html += moment(this.scrubDetails.get(item)).format(RS_DATE_FORMAT);
                    } else {
                        html += 'Not available'
                    }
                    html += '</td>';
                } else if (item.indexOf('errors') !== -1 && this.scrubDetails.get(item) !== 0) {
                    // item has errors substing and != 0 value so mark as red
                    html += '<td><span style="color:darkred"><strong>';
                    html += this.scrubDetails.get(item);
                    html += '</strong></span></td>';
                } else {
                    html += '<td>' + this.scrubDetails.get(item) + '</td>';
                }
            }
            html += '</tbody>';
            return new Handlebars.SafeString(html);
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ServicesView = Backbone.View.extend({

    events: {
        'click .configure': 'configureService',
        'switchChange.bootstrapSwitch': 'switchStatus'
    },

    initialize: function() {

        this.template = window.JST.services_services;
        this.collection = new ServiceCollection();
        this.actionMessages = {
            'start': 'started',
            'stop': 'stopped',
            'restart': 'restarted',
            'reload': 'reloaded'
        };
        this.smTs = null; // current timestamp of sm service
        this.configurable_services = ['nis', 'ntpd', 'active-directory', 'ldap', 'snmpd', 'docker', 'smartd', 'smb', 'nut', 'replication', 'shellinaboxd', 'rockstor'];
        this.tooltipMap = {
            'active-directory': 'By turning this service on, the system will attempt to join the Active Directory domain using the credentials provided during configuration.',
            'rockstor-bootstrap': 'Service responsible for bootstrapping Rockstor when the system starts.',
            'ztask-daemon': 'Background service for tasks like Pool scrub.'
        };
        this.initHandlebarHelpers();
    },

    render: function() {

        var _this = this;
        this.collection.fetch({
            success: function(collection, response, options) {
                _this.renderServices();
                // Register function for socket endpoint
                RockStorSocket.services = io.connect('/services', {
                    'secure': true,
                    'force new connection': true
                });
                RockStorSocket.addListener(_this.servicesStatuses, _this, 'services:get_services');
            }
        });
        return this;
    },

    servicesStatuses: function(data) {

        var _this = this;
        _.each(data, function(value, key, list) {
            // Returns array of one object
            var collectionArr = _this.collection.where({
                'name': key
            });
            var collectionModel = collectionArr[0];
            if (collectionArr.length > 0) {
                if (value.running > 0) {
                    collectionModel.set('status', false);
                } else {
                    collectionModel.set('status', true);
                }
            }
        });
        _this.adStatus = _this.collection.where({
            'name': 'active-directory'
        })[0].get('status') ? '0' : '1';
        this.renderServices();
    },

    renderServices: function() {

        var _this = this;
        $(this.el).empty();
        // find service-monitor service
        $(this.el).append(this.template({
            collection: this.collection,
            servicesColl: this.collection.toJSON(),
            tooltipMap: this.tooltipMap,
        }));

        //Initialize bootstrap switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        //added ext func to sort over input checkbox - found on DataTables pages
        $.fn.dataTable.ext.order['dom-checkbox'] = function(settings, col) {
            return this.api().column(col, {
                order: 'index'
            }).nodes().map(function(td, i) {
                return $('input', td).prop('checked') ? '1' : '0';
            });
        };
        //Added columns definition for sorting purpose
        $('table.data-table').DataTable({
            'iDisplayLength': 15,
            'aLengthMenu': [
                [15, 30, 45, -1],
                [15, 30, 45, 'All']
            ],
            'columns': [
                null, {
                    'orderDataType': 'dom-checkbox'
                }
            ]
        });
    },

    switchStatus: function(event, state) {
        var serviceName = $(event.target).attr('data-service-name');
        var serviceModel = this.collection.get(serviceName); // extract the service model from the collection to obtain config property

        if (this.configurable_services.indexOf(serviceName) > -1 && !serviceModel.get('config') && state) {
            app_router.navigate('services/' + serviceName + '/edit', {
                trigger: true
            });
        } else {
            if (state) {
                this.startService(serviceName);
            } else {
                this.stopService(serviceName);
            }
        }

    },

    startService: function(serviceName) {

        var _this = this;
        $.ajax({
            url: '/api/sm/services/' + serviceName + '/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(serviceName, false);
                if (serviceName == 'active-directory') {
                    _this.adStatus = 0;
                }
            },
            error: function(xhr, status, error) {
                _this.setStatusError(serviceName, xhr);
            }
        });
    },

    stopService: function(serviceName) {

        var _this = this;
        $.ajax({
            url: '/api/sm/services/' + serviceName + '/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(serviceName, false);
                if (serviceName == 'active-directory') {
                    _this.adStatus = 1;
                }
            },
            error: function(xhr, status, error) {
                _this.setStatusError(serviceName, xhr);
            }
        });
    },

    configureService: function(event) {

        event.preventDefault();
        var _this = this;
        var serviceName = $(event.currentTarget).data('service-name');
        var adStatus = (serviceName === 'smb') ? '/?adStatus=' + _this.adStatus : '';
        app_router.navigate('services/' + serviceName + '/edit' + adStatus, {
            trigger: true
        });
    },

    setStatusLoading: function(serviceName, show) {

        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {

        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

    cleanup: function() {

        RockStorSocket.removeOneListener('services');
    },

    initHandlebarHelpers: function() {

        var _this = this;
        Handlebars.registerHelper('isServiceConfigurable', function(serviceName, opts) {
            if (_this.configurable_services.indexOf(serviceName) > -1) {
                return opts.fn(this);
            }
            return opts.inverse(this);
        });

        Handlebars.registerHelper('ifTooltipExist', function(serviceName, opts) {
            if (serviceName in _this.tooltipMap) {
                return opts.fn(this);
            } else {
                return opts.inverse(this);
            }
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

SetroleDiskView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel',
        'click #redirect_part': 'redirect_part_changed',
        'click #delete_tick': 'delete_tick_toggle',
        'click #luks_tick': 'luks_tick_toggle'
    },

    initialize: function () {
        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.disk_setrole_disks;
        this.disks = new DiskCollection();
        this.diskId = this.options.diskId;
        this.dependencies.push(this.disks);
        this.initHandlebarHelpers();
    },

    render: function () {
        this.fetch(this.renderDisksForm, this);
        return this;
    },

    renderDisksForm: function () {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var _this = this;
        var disk_id = this.diskId;
        var disk_obj = this.disks.find(function(d) {
            return (d.get('id') == disk_id);
        });
        var serialNumber = disk_obj.get('serial');
        var diskRole = disk_obj.get('role');
        var disk_btrfs_uuid = disk_obj.get('btrfs_uuid');
        var disk_pool = disk_obj.get('pool');
        var diskName = disk_obj.get('name');
        // parse the diskRole json to a local object
        try {
            var role_obj = JSON.parse(diskRole);
        } catch (e) {
                // as we can't convert this drives role to json we assume
                // it's isRoleUsable status by false
            role_obj = null;
        }
        // extract our partitions obj from the role_obj if there is one.
        var partitions;
        if (role_obj != null && role_obj.hasOwnProperty('partitions')) {
            partitions = role_obj.partitions;
        } else {
            // else we set our partitions to be an empty object
            partitions = {};
        }
        // extract any existing redirect role value.
        var current_redirect;
        if (role_obj != null && role_obj.hasOwnProperty('redirect')) {
            // if there is a redirect role then set our current role to it
            current_redirect = role_obj['redirect'];
        } else {
            current_redirect = '';
        }
        // set local convenience flag if device is a LUKS container and note
        // if it's unlocked or not.
        var is_luks = false;
        // Default to appearing as if we are unlocked if we fail for
        // some reason to retrieve the obligatory unlocked flag. This
        // way we fail safe as unlocked containers can't be deleted.
        var is_unlocked = true;
        // While we are inside the LUKS role we can update current_crypttab
        // Assume we have no crypttab entry until we find otherwise.
        var current_crypttab_status = false;
        if (role_obj != null && role_obj.hasOwnProperty('LUKS')) {
            is_luks = true;
            // if we have an unlocked entry, extract it.
            if (role_obj['LUKS'].hasOwnProperty('unlocked')) {
                is_unlocked = role_obj['LUKS']['unlocked'];
            }
            // if we have a crypttab entry, extract it.
            if (role_obj['LUKS'].hasOwnProperty('crypttab')) {
                current_crypttab_status = role_obj['LUKS']['crypttab'];
            }
        }
        // additional convenience flag if device is an open LUKS volume.
        var is_open_luks;
        if (role_obj !== null && role_obj.hasOwnProperty('openLUKS')) {
            is_open_luks = true;
        } else {
            is_open_luks = false;
        }
        // convenience flag to indicate if a device is an LVM2 member.
        var is_lvm2member;
        if (role_obj !== null && role_obj.hasOwnProperty('LVM2member')) {
            is_lvm2member = true;
        }

        this.current_redirect = current_redirect;
        this.partitions = partitions;
        this.disk_btrfs_uuid = disk_btrfs_uuid;
        this.is_open_luks = is_open_luks;
        this.is_luks = is_luks;
        this.is_unlocked = is_unlocked;
        this.current_crypttab_status = current_crypttab_status;
        this.is_lvm2member = is_lvm2member;

        $(this.el).html(this.template({
            diskName: diskName,
            serialNumber: serialNumber,
            diskRole: diskRole,
            role_obj: role_obj,
            partitions: partitions,
            current_redirect: current_redirect,
            disk_btrfs_uuid: disk_btrfs_uuid,
            is_luks: is_luks,
            is_open_luks: is_open_luks,
            is_unlocked: is_unlocked,
            current_crypttab_status: current_crypttab_status,
            is_lvm2member: is_lvm2member
        }));

        this.$('#add-role-disk-form :input').tooltip({
            html: true,
            placement: 'right'
        });

        var err_msg = '';
        var role_err_msg = function () {
            return err_msg;
        };

        $.validator.addMethod('validateRedirect', function (value) {
            var redirect_role = $('#redirect_part').val();
            var redirect_changed = false;
            if (redirect_role != current_redirect) {
                redirect_changed = true;
            }
            var redirect_support_msg = 'Redirection is only supported to ' +
                'a non btrfs partition when no btrfs partition exists on ' +
                'the same device.';
            // check to see if we are attempting to change an existing btrfs
            // redirect, if so refuse the action and explain why.
            if ((partitions[current_redirect] == 'btrfs') && redirect_changed) {
                err_msg = 'Active btrfs partition redirect found; if you ' +
                    'wish to change this redirect role first wipe the ' +
                    'partition and then re-assign. ' + redirect_support_msg;
                return false;
            }
            // check to see if an exiting btrfs partition exists and is not
            // the selected option after a change. As we default to whole disk
            // the 'after a change' clause allows for whole disk wipe.
            if ((disk_btrfs_uuid != null) && (partitions[redirect_role] != 'btrfs') && redirect_changed) {
                err_msg = 'Existing btrfs partition found; if you wish to ' +
                    'use the redirect role either select this btrfs partition ' +
                    'and import/use it, or wipe it (or the whole disk) and ' +
                    'then re-assign. ' + redirect_support_msg;
                return false;
            }
            return true;
        }, role_err_msg);

        $.validator.addMethod('validateDeleteTick', function (value) {
            var delete_tick = $('#delete_tick');
            var redirect_role = $('#redirect_part').val();
            if (delete_tick.prop('checked')) {
                if (redirect_role != current_redirect) {
                    err_msg = 'Please first submit your new Redirect Role ' +
                        'before selecting delete, or Cancel and start over.';
                    return false;
                } else {
                    // we have redirect_role == current_redirect
                    // now check if the device is in an active Rockstor pool
                    // Un-remark next line to test backend validation of same.
                    // disk_pool = null;
                    if (disk_pool != null) {
                        // device is part of Rockstor pool, reject wipe request
                        err_msg = 'Selected device is part of a Rockstor ' +
                            'managed pool. Use Pool resize to remove it from ' +
                            'the relevant pool which in turn will wipe it\'s ' +
                            'filesystem.';
                        return false;
                    }
                    if (is_luks && is_unlocked) {
                        // We block attempts to wipe unlocked LUKS containers
                        // as a safe guard, we have no direct way to know if
                        // they are backing any pool members but they are
                        // never-the-less active if open and a wipe would /
                        // should fail if we attempted it so just block and
                        // advise within the front end.
                        err_msg = 'Wiping an unlocked LUKS container is not ' +
                            'supported. First close the containers Open ' +
                            'LUKS Volume counterpart and ensure "No auto ' +
                            'unlock" is the active "Boot up configuration"';
                        return false;
                    }
                    // We shouldn't need this check but just in case our hide
                    // of the wipe link on the LUKS config page that lead the
                    // user hear has been circumvented.
                    if (current_crypttab_status !== false) {
                        err_msg = 'Wiping a LUKS container with an ' +
                            'existing crypttab entry is not supported. ' +
                            'First ensure "No auto unlock" is the active ' +
                            'selection on the LUKS configuration page.';
                        return false;
                    }
                }
            }
            return true;
        }, role_err_msg);

        $.validator.addMethod('validateLuksPassphrases', function (value) {
            var luks_tick = $('#luks_tick');
            var luks_pass_one = $('#luks_pass_one').val();
            var luks_pass_two = $('#luks_pass_two').val();
            if (luks_tick.prop('checked')) {
                if (luks_pass_one == '') {
                    err_msg = 'An empty LUKS passphrase is not supported';
                    return false;
                }
                if (luks_pass_one.length < 14) {
                    err_msg = 'LUKS passphrase should be at least 14 ' +
                        'characters long.';
                    return false;
                }
                if (luks_pass_one != luks_pass_two) {
                    err_msg = 'LUKS passphrases do not match, please try ' +
                        'again.';
                    return false;
                }
                // Reject non ASCII 7-bit & control characters ie only accept:
                // !"#$%&'()*+,-./0-9:;<=>?@A-Z[\]^_`a-z{|}~ plus space.
                // Equates to Decimal (32-126) or Hex (0x20-0x7E)
                // to include DEL (delete) char increase range to 7F.
                if (/^[\x20-\x7E]+$/.test(luks_pass_one) == false) {
                    err_msg = 'Invalid non ASCII(32-126) 7-bit character entered';
                    return false;
                }
            }
            return true;
        }, role_err_msg);

        this.$('#add-role-disk-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                redirect_part: 'validateRedirect',
                delete_tick: 'validateDeleteTick',
                luks_pass_one: 'validateLuksPassphrases'
            },

            submitHandler: function () {
                var button = $('#role-disk');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/disks/' + disk_id + '/role-drive';
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#add-role-disk-form').getJSON()),
                    success: function () {
                        enableButton(button);
                        _this.$('#add-role-disk-form :input').tooltip('hide');
                        app_router.navigate('disks', {trigger: true});
                    },
                    error: function (xhr, status, error) {
                        enableButton(button);
                    }
                });
                return false;
            }
        });
        this.delete_tick_toggle();
        this.redirect_part_changed();
        this.luks_tick_toggle();
        this.luks_options_show_hide();
    },

    delete_tick_toggle: function () {
        var delete_tick = this.$('#delete_tick');
        if (delete_tick.prop('checked')) {
            // show delete warning
            this.$('#delete_tick_warning').show();
            // un-tick and hide LUKS tick and passwords
            this.$('#luks_tick').removeAttr('checked');
            this.$('#luks_passwords').hide();
            this.$('#luks_options').hide();
        } else {
            // hide delete warning
            this.$('#delete_tick_warning').hide();
            // show LUKS options if appropriate
            // this.$('#luks_options').show();
            this.luks_options_show_hide();
        }
    },

    redirect_part_changed: function() {
        var part_selected = this.$('#redirect_part').val();
        var current_redirect = this.current_redirect;
        if (part_selected != current_redirect) {
            if (this.$('#delete_tick').prop('checked')) {
                // un-tick to reassure user & remove the warning via tick_toggle
                // Un-Remark the following line to test backend redirect
                // & wipe validation by enabling their combination in the UI.
                this.$('#delete_tick').removeAttr('checked');
                this.delete_tick_toggle();
            }
            // now disable delete_tick to avoid it being activated on an
            // as yet uninitialized / un-applied redirect.
            this.$('#delete_tick').attr('disabled', true);
        } else {
            // we are showing the current redirect so re-enable the delete_tick
            this.$('#delete_tick').removeAttr('disabled');
            this.delete_tick_toggle();
        }
    },

    luks_tick_toggle: function () {
        var luks_tick = this.$('#luks_tick');
        if (luks_tick.prop('checked')) {
            // un-tick delete and hide it
            this.$('#delete_tick').removeAttr('checked');
            this.$('#delete_tick_group').hide();
            // show password entry and delete warning
            this.$('#luks_passwords').show();
            this.$('#delete_tick_warning').show();
        } else {
            // show delete tick
            this.$('#delete_tick_group').show();
            // hide password entry and delete warning
            this.$('#luks_passwords').hide();
            this.$('#delete_tick_warning').hide();
        }
    },

    luks_options_show_hide: function () {
        var luks_tick = this.$('#luks_tick');
        // Only enable and show the LUKS formatting options if there are no
        // partitions and we have no existing btrfs, imported or otherwise.
        // The latter clause is to covers whole disk btrfs but doesn't cover
        // non btrfs whole disk filesystems (these are unusual).
        // Also guard against creating a LUKS container within an open LUKS
        // volume as this is both redundant and not supported as we would then
        // have a device that was both a LUKS volume and a LUKS container.
        // Confusing and unnecessary. Likewise we only show LUKS format
        // options is we are not already a LUKS container (is_luks). This
        // helps to avoid some potential confusion when re-formatting a LUKS
        // container as it forces a traditional wipe first.
        if (_.isEmpty(this.partitions) && this.disk_btrfs_uuid == null
            && this.is_open_luks !== true && this.is_luks !== true
            && this.is_lvm2member !== true) {
            luks_tick.removeAttr('disabled');
            this.$('#luks_options').show();
        } else {
            luks_tick.attr('disabled', true);
            this.$('#luks_options').hide();
        }
    },

    initHandlebarHelpers: function () {
        // helper to fill dropdown with drive partitions and their fstype
        // eg by generating dynamically lines of the following format:
        // <option value="virtio-serial-6-part-2">part2 (ntfs)</option>
        Handlebars.registerHelper('display_disk_partitions', function () {
            var html = '';
            // Add our 'use whole disk' option which will allow for an existing
            // redirect to be removed, preparing for whole disk btrfs.
            // Also serves to indicate no redirect role in operation.
            var whole_disk_fstype;
            if ((this.disk_btrfs_uuid != null) && (_.isEmpty(this.partitions))) {
                whole_disk_fstype = 'btrfs';
            } else if (this.is_luks) {
                whole_disk_fstype = 'LUKS';
            } else if (this.is_lvm2member) {
                whole_disk_fstype = 'LVM2_member';
            } else {
                whole_disk_fstype = 'None';
            }
            var selected = '';
            if (this.current_redirect == '') {
                selected = ' selected="selected"';
            }
            html += '<option value=""' + selected + '> Whole Disk (' + whole_disk_fstype + ')';
            // if no current redirect role then select whole disk entry and
            // give indication of this " - active"
            if (selected != '') {
                html += ' - active';
            }
            // close the "Whole Disk" option
            html += '</option>';
            // loop through this devices partitions and mark one as selected
            // if it equals the current redirect role, hence defaulting to the
            // partition of the current redirect settings.
            // for each partition in our partitions set our selector value as
            // the partition name and add it's value which is the fstype.
            // Default to the partition matching a current redirect, if any.
            for (var part in this.partitions) {
                var active_redirect = false;
                if (part == this.current_redirect) {
                    html += '<option value="' + part + '" selected="selected">';
                    active_redirect = true;
                } else {
                    html += '<option value="' + part + '">';
                }
                // add our fstype held as the value against this partition
                var partition_fstype = this.partitions[part];
                if (partition_fstype == '') {
                    partition_fstype = 'None';
                }
                // strip the last part of our by-id name to get our partition
                // ie virtio-serial-part2 but we want part2
                var short_part_name = part.split('-').slice(-1)[0];
                html += short_part_name + ' (' + partition_fstype + ')';
                // if this is our active setting then indicate in text
                if (active_redirect) {
                    html += ' - active';
                }
                // end this partition option
                html += '</option>';
            }
            return new Handlebars.SafeString(html);
        });
    },

    cancel: function (event) {
        event.preventDefault();
        this.$('#add-role-disk-form :input').tooltip('hide');
        app_router.navigate('disks', {trigger: true});
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

SetupSystemView = Backbone.View.extend({
    tagName: 'div',

    initialize: function() {
        this.template = window.JST.setup_system;
        this.sysinfo = this.options.sysinfo;
    },

    render: function() {
        this.renderSystemSetup();
        return this;
    },

    renderSystemSetup: function() {
        var _this = this;
        $(this.el).html(this.template({
            sysinfo: this.sysinfo
        }));
        this.$('#set-hostname-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                hostname: 'required'
            },
            submitHandler: function() {
                RockStorGlobals.hostname = _this.$('#hostname').val();
                return false;
            }
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

SFTPView = RockstorLayoutView.extend({
    events: {
        'switchChange.bootstrapSwitch': 'switchStatus',
        'click .delete-sftp-share': 'deleteSFTP'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.sftp_sftp;
        this.module_name = 'sftp';
        this.collection = new SFTPCollection();
        this.dependencies.push(this.collection);
        this.serviceName = 'sftp';
        this.service = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.service);
        this.shares = new ShareCollection();
        this.dependencies.push(this.shares);
        this.updateFreq = 5000;
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        this.fetch(this.renderSFTP, this);
        return this;
    },

    renderSFTP: function() {
        this.freeShares = this.shares.reject(function(share) {
            var s = this.collection.find(function(sftpShare) {
                return (sftpShare.get('share') == share.get('name'));
            });
            return !_.isUndefined(s);
        }, this);

        //check if there are shares in the system
        var sharesExistBool = false;
        if (this.shares.length > 0) {
            sharesExistBool = true;
        }
        //check if there are free shares not associated with afp.
        var freeSharesBool = false;
        if (this.freeShares) {
            freeSharesBool = true;
        }
        //set a variable to true if both conditions are satisfied
        var verifySharesBool = false;
        if (freeSharesBool && sharesExistBool) {
            verifySharesBool = true;
        }

        $(this.el).html(this.template({
            sftpShare: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            freeShares: this.freeShares,
            sharesNotEmpty: verifySharesBool,
            service: this.service
        }));

        this.renderDataTables();

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('input[name="sftp-service-checkbox"]').bootstrapSwitch('state', this.service.get('status'), true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        // Display NFS Export Service Warning
        if (!this.service.get('status')) {
            this.$('#sftp-warning').show();
        } else {
            this.$('#sftp-warning').hide();
        }

    },

    switchStatus: function(event, state) {
        if (state) {
            this.startService();
        } else {
            this.stopService();
        }
    },

    deleteSFTP: function(event) {
        var _this = this;
        if (event) event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Delete sftp entry ... Are you sure? ')) {
            disableButton(button);
            var id = $(event.currentTarget).data('id');

            $.ajax({
                url: '/api/sftp/' + id,
                type: 'DELETE',
                dataType: 'json',
                contentType: 'application/json',
                success: function() {
                    _this.render();
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                }
            });

        }
    },
    startService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/sftp/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#sftp-warning').hide();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('#sftp-warning').show();
            }
        });
    },

    stopService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/sftp/stop',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('#sftp-warning').show();
            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('#sftp-warning').hide();
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('displaySftpPermission', function(sftpEditable) {
            var html = '';
            if (sftpEditable == 'ro') {
                html += 'yes';
            } else {
                html += 'no';
            }
            return new Handlebars.SafeString(html);
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */
ShareDetailsLayoutView = RockstorLayoutView.extend({
    id: 'share-details-container',
    events: {
        'click #js-acl-edit': 'editAcl',
        'click #js-acl-save': 'saveAcl',
        'click #js-acl-cancel': 'cancelAcl',
        'click input[name=\'perms[]\']': 'showPermStr',
        'click #js-edit-compression': 'editCompression',
        'click #js-edit-compression-cancel': 'editCompressionCancel',
        'click #js-submit-compression': 'updateCompression',
        'click #js-delete': 'deleteShare',
        'click #js-cancel': 'cancel',
        'click #js-confirm-share-delete': 'confirmShareDelete'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.shareId = this.options.shareId;
        this.template = window.JST.share_share_details_layout;
        this.rollback_btn_template = window.JST.share_share_details_rollback_btn;
        this.shareAclTemplate = window.JST.share_share_acl;
        this.shareAclEditTemplate = window.JST.share_share_acl_edit;
        this.compression_info_template = window.JST.share_compression_info;
        this.compression_info_edit_template = window.JST.share_compression_info_edit;
        this.appliances = new ApplianceCollection();
        this.appliances.pageSize = RockStorGlobals.maxPageSize;

        // create models
        this.share = new Share({
            sid: this.shareId
        });
        this.snapshots = new SnapshotCollection([]);
        this.snapshots.setUrl(this.shareId);

        this.users = new UserCollection();
        this.users.pageSize = RockStorGlobals.maxPageSize;
        this.groups = new GroupCollection();
        this.groups.pageSize = RockStorGlobals.maxPageSize;
        // add dependencies
        this.dependencies.push(this.share);
        this.dependencies.push(this.snapshots);
        this.dependencies.push(this.users);
        this.dependencies.push(this.groups);
        this.dependencies.push(this.appliances);
        this.modify_choices = [{
            name: 'ro',
            value: 'ro'
        },
        {
            name: 'rw',
            value: 'rw'
        },
        ];
        this.sync_choices = [{
            name: 'async',
            value: 'async'
        },
        {
            name: 'sync',
            value: 'sync'
        },
        ];
        this.nsecurity_choices = [{
            name: 'secure',
            value: 'secure'
        },
        {
            name: 'insecure',
            value: 'insecure'
        },
        ];
        this.on('snapshotsModified', this.renderRollbackBtn, this);
        this.cOpts = {
            'no': 'Dont enable compression',
            'zlib': 'zlib',
            'lzo': 'lzo'
        };
        this.cView = this.options.cView;
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderSubViews, this);
        return this;
    },

    renderSubViews: function() {
        var current_appliance = this.appliances.find(function(appliance) {
            return appliance.get('current_appliance') == true;
        });
        var systemShare = false;
        if (parseInt(this.share.get('id')) < 3 && this.share.get('pool')['role'] == 'root') {
            systemShare = true;
        }
        this.subviews['share-usage'] = new ShareUsageModule({
            share: this.share
        });
        this.subviews['snapshots'] = new SnapshotsTableModule({
            snapshots: this.snapshots,
            share: this.share,
            parentView: this
        });
        this.share.on('change', this.subviews['share-usage'].render, this.subviews['share-usage']);
        $(this.el).html(this.template({
            share: this.share,
            shareName: this.share.get('name'),
            shareId: this.share.get('id'),
            shareUsage: humanize.filesize(this.share.get('rusage') * 1024),
            snapshots: this.snapshots,
            permStr: this.parsePermStr(this.share.get('perms')),
            modify_choices: this.modify_choices,
            sync_choices: this.sync_choices,
            nsecurity_choices: this.nsecurity_choices,
            isSystemShare: systemShare
        }));
        this.renderRollbackBtn();
        this.renderAcl();
        this.$('#ph-share-usage').html(this.subviews['share-usage'].render().el);
        this.$('#ph-snapshots').html(this.subviews['snapshots'].render().el);
        this.shareCompressBool = false;
        if (_.isNull(this.share.get('compression_algo')) || this.share.get('compression_algo') == 'no') {
            this.shareCompressBool = true;
        }
        if (!_.isUndefined(this.cView) && this.cView == 'edit') {
            this.$('#ph-compression-info').html(this.compression_info_edit_template({
                share: this.share,
                cOpts: this.cOpts
            }));
            this.showCompressionTooltips();
        } else {
            this.$('#ph-compression-info').html(this.compression_info_template({
                share: this.share,
                shareCompression: this.share.get('compression_algo'),
                shareCompressionNull: this.shareCompressBool
            }));
        }
        this.$('ul.nav.nav-tabs').tabs('div.css-panes > div');
        this.attachActions();
    },

    renderRollbackBtn: function() {
        var foundWritableSnapshot,
            rollbackBtnDisabler = false;
        if (!_.isUndefined(this.snapshots.find(function(s) {
            return s.get('writable') == true;
        }))) {
            foundWritableSnapshot = true;
        }
        if (this.snapshots.isEmpty() || !foundWritableSnapshot) {
            rollbackBtnDisabler = true;
        }
        this.$('#rollback-btn-ph').html(this.rollback_btn_template({
            foundWritableSnapshot: foundWritableSnapshot,
            shareId: this.share.get('id'),
            rollbackBtnDisabler: rollbackBtnDisabler
        }));

    },

    attachActions: function() {
        var _this = this;
        // attach overlays
        this.$('#js-access-control').overlay();
        // create snapshot form submit action
        this.$('#create-snapshot').click(function() {
            var button = _this.$('#create-snapshot');
            if (buttonDisabled(button)) return false;
            disableButton(button);
            $.ajax({
                url: '/api/shares/' + _this.share.get('id') + '/snapshots/' + $('#snapshot-name').val(),
                type: 'POST',
                dataType: 'json'
            }).done(function() {
                enableButton(button);
                _this.$('#js-snapshot-popup').overlay().close();
                _this.snapshots.fetch();
                //_this.$('#snapshots').empty().append(_this.snapshotsTableView.render().el);
            }).fail(function() {
                enableButton(button);
            });
        });
    },

    deleteShare: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        // show modal
        _this.$('#delete-share-modal').modal();
        return false;
    },

    confirmShareDelete: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var url = '/api/shares/' + _this.share.get('id');
        if ($('#force-delete').prop('checked')) {
            url += '/force';
        }
        $.ajax({
            url: url,
            type: 'DELETE',
            dataType: 'json',
            success: function() {
                enableButton(button);
                _this.$('#delete-share-modal').modal('hide');
                $('.modal-backdrop').remove();
                app_router.navigate('shares', {
                    trigger: true
                });
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    cancel: function(event) {
        if (event) event.preventDefault();
        app_router.navigate('shares', {
            trigger: true
        });
    },

    renderAcl: function() {
        this.$('#ph-access-control').html(this.shareAclTemplate({
            share: this.share,
            shareOwner: this.share.get('owner'),
            shareGroup: this.share.get('group'),
            sharePerms: this.share.get('perms'),
            permStr: this.parsePermStr(this.share.get('perms'))
        }));
    },

    editAcl: function(event) {
        event.preventDefault();
        this.$('#ph-access-control').html(this.shareAclEditTemplate({
            share: this.share.toJSON(),
            permStr: this.parsePermStr(this.share.get('perms')),
            users: this.users.toJSON(),
            groups: this.groups.toJSON(),
            sharePerms: this.share.get('perms')
        }));
    },

    saveAcl: function(event) {
        event.preventDefault();
        var _this = this;
        var button = _this.$('#js-acl-save');
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var permStr = this.createPermStr();
        var data = {
            owner: this.$('#share-owner').val(),
            group: this.$('#share-group').val(),
            perms: permStr
        };
        $.ajax({
            url: '/api/shares/' + this.share.get('id') + '/acl',
            type: 'POST',
            data: data,
            dataType: 'json',
            success: function() {
                enableButton(button);
                _this.share.fetch({
                    success: function() {
                        _this.renderAcl();
                    }
                });
            },
            error: function(request, status, error) {
                enableButton(button);
            }
        });
    },

    cancelAcl: function(event) {
        event.preventDefault();
        this.$('#ph-access-control').html(this.shareAclTemplate({
            share: this.share,
            permStr: this.parsePermStr(this.share.get('perms'))
        }));
    },

    parsePermStr: function(perms) {
        var p = '';
        for (var i = 0; i < 3; i++) {
            var tmp = parseInt(perms.charAt(i)).toString(2);
            p = (tmp.length == 3) ? p.concat(tmp) :
                (tmp.length == 2) ? p.concat('0').concat(tmp) :
                p.concat('00').concat(tmp);
        }
        return p;
    },

    createPermStr: function() {
        var perms = [];
        this.$('input[name=\'perms[]\']:checked').each(function() {
            perms.push($(this).val());
        });
        var us = ['owner', 'group', 'other'];
        var ps = ['r', 'w', 'x'];
        var permStr = '';
        _.each(us, function(u) {
            var t = '';
            _.each(ps, function(p) {
                var s = u + '-' + p;
                t = t + (perms.indexOf(s) != -1 ? '1' : '0');
            });
            permStr = permStr + parseInt(t, 2);
        });
        return permStr;
    },

    showPermStr: function() {
        this.$('#permStrEdit').html(this.createPermStr());
    },

    showCompressionTooltips: function() {
        this.$('#ph-compression-info #compression').tooltip({
            html: true,
            placement: 'top',
            title: 'Choose a compression algorithm for this Share. By default, parent pool\'s compression algorithm is applied.<br> If you like to set pool wide compression, don\'t choose anything here. If you want finer control of this particular Share\'s compression algorithm, you can set it here.<br><strong>zlib: </strong>slower than lzo but higher compression ratio.<br><strong>lzo: </strong>faster than zlib but lower compression ratio.'
        });
    },

    hideCompressionTooltips: function() {
        this.$('#ph-compression-info #compression').tooltip('hide');
    },

    editCompression: function(event) {
        event.preventDefault();
        this.$('#ph-compression-info').html(this.compression_info_edit_template({
            share: this.share,
            cOpts: this.cOpts
        }));
        this.showCompressionTooltips();
    },

    editCompressionCancel: function(event) {
        event.preventDefault();
        this.hideCompressionTooltips();
        this.$('#ph-compression-info').html(this.compression_info_template({
            share: this.share,
            shareCompression: this.share.get('compression_algo'),
            shareCompressionNull: this.shareCompressBool
        }));
    },

    updateCompression: function(event) {
        var _this = this;
        event.preventDefault();
        var button = this.$('#js-submit-compression');
        if (buttonDisabled(button)) return false;
        disableButton(button);
        $.ajax({
            url: '/api/shares/' + this.share.get('id'),
            type: 'PUT',
            dataType: 'json',
            data: {
                'compression': this.$('#compression').val()
            },
            success: function() {
                _this.hideCompressionTooltips();
                _this.share.fetch({
                    success: function(collection, response, options) {
                        _this.cView = 'view';
                        _this.renderSubViews();
                    }
                });
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_share_compressOptions', function() {
            var html = '',
                _this = this;
            _.each(_.keys(_this.cOpts), function(c) {
                if (_this.share.get('compression_algo') == c) {
                    html += '<option value="' + c + '" selected="selected">' + _this.cOpts[c] + '</option>';
                } else {
                    html += '<option value="' + c + '">' + _this.cOpts[c] + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('view_read_permissions', function() {
            var html = '';
            html += '<td>';
            if (this.permStr[0] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[3] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[6] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('view_write_permissions', function() {
            var html = '';
            html += '<td>';
            if (this.permStr[1] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[4] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[7] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('view_execute_permissions', function() {
            var html = '';
            html += '<td>';
            if (this.permStr[2] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[5] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[8] == '1') {
                html += '<input type="checkbox" checked="true" disabled>';
            } else {
                html += '<input type="checkbox" disabled>';
            }
            html += '</td>';
            return new Handlebars.SafeString(html);
        });


        Handlebars.registerHelper('showOwnerOption', function(userName, shareOwner) {
            if (userName == shareOwner) {
                return 'selected = "selected"';
            }
        });

        Handlebars.registerHelper('showGroupOption', function(groupName, shareGroup) {
            if (groupName == shareGroup) {
                return 'selected = "selected"';
            }
        });

        Handlebars.registerHelper('edit_read_permissions', function() {
            var html = '';
            html += '<td>';
            if (this.permStr[0] == '1') {
                html += '<input type="checkbox" name="perms[]" value="owner-r" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="owner-r">';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[3] == '1') {
                html += '<input type="checkbox" name="perms[]" value="group-r" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="group-r">';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[6] == '1') {
                html += '<input type="checkbox" name="perms[]" value="other-r" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="other-r">';
            }
            html += '</td>';
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('edit_write_permissions', function() {
            var html = '';
            html += '<td>';
            if (this.permStr[1] == '1') {
                html += '<input type="checkbox" name="perms[]" value="owner-w" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="owner-w">';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[4] == '1') {
                html += '<input type="checkbox" name="perms[]" value="group-w" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="group-w">';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[7] == '1') {
                html += '<input type="checkbox" name="perms[]" value="other-w" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="other-w">';
            }
            html += '</td>';
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('edit_execute_permissions', function() {
            var html = '';
            html += '<td>';
            if (this.permStr[2] == '1') {
                html += '<input type="checkbox" name="perms[]" value="owner-x" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="owner-x">';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[5] == '1') {
                html += '<input type="checkbox" name="perms[]" value="group-x" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="group-x">';
            }
            html += '</td>';
            html += '<td>';
            if (this.permStr[8] == '1') {
                html += '<input type="checkbox" name="perms[]" value="other-x" checked="true">';
            } else {
                html += '<input type="checkbox" name="perms[]" value="other-x">';
            }
            html += '</td>';
            return new Handlebars.SafeString(html);
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ShareUsageModule = RockstorModuleView.extend({
    events: {
        'click #js-resize': 'edit',
        'click #js-resize-save': 'save',
        'click #js-resize-cancel': 'cancel'
    },

    initialize: function() {
        this.template = window.JST.share_share_usage_module;
        this.editTemplate = window.JST.share_share_usage_edit;
        this.module_name = 'share-usage';
        this.share = this.options.share;
        this.initHandlebarHelpers();
    },

    render: function() {
        $(this.el).html(this.template({
            collection: this.collection,
            module_name: this.module_name,
            share: this.share,
            poolName: this.share.get('pool').name,
            pool_is_mounted: this.share.get('pool').is_mounted,
            pool_mount_status: this.share.get('pool').mount_status,
            pool_quotas_enabled: this.share.get('pool').quotas_enabled,
            share_is_mounted: this.share.get('is_mounted'),
            share_mount_status: this.share.get('mount_status'),
            pid: this.share.get('pool').id,
            shareCreatedDate: moment(this.share.get('toc')).format(RS_DATE_FORMAT)
        }));
        this.renderGraph();
        return this;
    },

    renderBar: function() {
        var _this = this;
        var w = 300;
        var h = 100;
        var padding = [10, 10, 10, 1];
        var barHeight = 50;

        total = parseInt(this.share.get('size') * 1024);
        used = parseInt(this.share.get('rusage') * 1024);
        free = total - used;
        var dataSet = [used, free];
        var data = [Math.round((used / total) * 100), Math.round((free / total) * 100)];
        var dataLabels = ['used', 'free'];
        var colors = {
            used: {
                fill: 'rgb(128,128,128)',
                stroke: 'rgb(221,221,221)'
            },
            free: {
                fill: 'rgb(168,247,171)',
                stroke: 'rgb(221,221,221)'
            },
        };

        var svg = d3.select(this.el).select('#chart')
            .append('svg')
            .attr('width', w + padding[1] + padding[3])
            .attr('height', h + padding[0] + padding[2]);

        var xScale = d3.scale.linear().domain([0, 100]).range([0, w]);
        var xOffset = function(i) {
            return i == 0 ? 0 : xScale(data[i - 1]);
        };

        var gridContainer = svg.append('g')
            .attr('transform', function(d, i) {
                return 'translate(' + padding[3] + ',' + padding[0] + ')';
            });
        gridContainer.selectAll('rect')
            .data(data)
            .enter()
            .append('rect')
            .attr('y', 0)
            .attr('height', barHeight)
            .attr('x', function(d, i) {
                return xOffset(i);
            })
            .attr('width', function(d) {
                return xScale(d);
            })
            .attr('fill', function(d, i) {
                return colors[dataLabels[i]].fill;
            })
            .attr('stroke', function(d, i) {
                return colors[dataLabels[i]].stroke;
            });

        var labels = gridContainer.selectAll('g.labels')
            .data(dataLabels)
            .enter()
            .append('g')
            .attr('transform', function(d, i) {
                return 'translate(0,' + (barHeight + 5 + i * 30) + ')';
            });

        labels.append('rect')
            .attr('width', 13)
            .attr('height', 13)
            .attr('fill', function(d, i) {
                return colors[d].fill;
            })
            .attr('stroke', function(d, i) {
                return colors[d].stroke;
            });

        labels.append('text')
            .attr('text-anchor', 'left')
            .attr('class', 'legend')
            .attr('transform', function(d, i) {
                return 'translate(16,13)';
            })
            .text(function(d, i) {
                return data[i] + '% ' + d + ' - ' + humanize.filesize(dataSet[i]);
            });
    },

    renderGraph: function() {
        var w = 350; //width
        h = 100; //height
        var outerRadius = 20;
        var innerRadius = 0;

        total = parseInt(this.share.get('size') * 1024);
        used = parseInt(this.share.get('rusage') * 1024);
        free = total - used;
        var dataset = [free, used];
        var dataLabels = ['free', 'used'];

        var svg = d3.select(this.el).select('#chart')
            .append('svg')
            .attr('width', w)
            .attr('height', h);

        displayUsagePieChart(svg, outerRadius, innerRadius, w, h, dataset, dataLabels, total);

    },

    edit: function(event) {
        event.preventDefault();
        $(this.el).html(this.editTemplate({
            share: this.share,
            newSizeVal: humanize.filesize(this.share.get('size') * 1024).replace(/[^0-9\.]+/g, '')
        }));
    },

    save: function(event) {
        var _this = this;
        event.preventDefault();
        var button = _this.$('#js-resize-save');
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var size = this.$('#new-size').val();

        var sizeFormat = $('#size_format').val();
        if (sizeFormat == 'KB') {
            size = size * 1;
        } else if (sizeFormat == 'MB') {
            size = size * 1024;
        } else if (sizeFormat == 'GB') {
            size = size * 1024 * 1024;
        } else if (sizeFormat == 'TB') {
            size = size * 1024 * 1024 * 1024;
        }
        $.ajax({
            url: '/api/shares/' + this.share.get('id'),
            type: 'PUT',
            dataType: 'json',
            data: {
                'size': size
            },
            success: function() {
                enableButton(button);
                _this.share.fetch({
                    success: function() {
                        _this.render();
                    }
                });
            },
            error: function(request, status, error) {
                enableButton(button);
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        this.render();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_shareResize_units', function() {
            var html = '';
            html += '<option';
            if (humanize.filesize(this.share.get('size') * 1024).match(/KB/g, '')) {
                html += ' selected="selected"';
            }
            html += '>KB</option>';
            html += '<option';
            if (humanize.filesize(this.share.get('size') * 1024).match(/MB/g, '')) {
                html += ' selected="selected"';
            }
            html += '>MB</option>';
            html += '<option ';
            if (humanize.filesize(this.share.get('size') * 1024).match(/GB/g, '')) {
                html += ' selected="selected"';
            }
            html += '>GB</option>';
            html += '<option ';
            if (humanize.filesize(this.share.get('size') * 1024).match(/TB/g, '')) {
                html += ' selected="selected"';
            }
            html += '>TB</option>';
            return new Handlebars.SafeString(html);
        });
    }


});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

/*
 * Shares View
 */

SharesView = RockstorLayoutView.extend({
    events: {
        'click a[data-action=delete]': 'deleteShare',
        'click #js-cancel': 'cancel',
        'click #js-confirm-share-delete': 'confirmShareDelete'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);

        this.template = window.JST.share_shares;
        this.shares_table_template = window.JST.share_shares_table;
        this.pools = new PoolCollection();
        this.collection = new ShareCollection();
        this.dependencies.push(this.pools);
        this.dependencies.push(this.collection);
        this.pools.on('reset', this.renderShares, this);
        this.collection.on('reset', this.renderShares, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderShares, this);
        return this;
    },

    renderShares: function() {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        if (!this.pools.fetched || !this.collection.fetched) {
            return false;
        }
        $(this.el).html(this.template({
            collection: this.collection,
            pools: this.pools
        }));
        this.$('#shares-table-ph').html(this.shares_table_template({
            collection: this.collection,
            shares: this.collection.toJSON(),
            collectionNotEmpty: !this.collection.isEmpty(),
            pools: this.pools,
            poolsNotEmpty: !this.pools.isEmpty()
        }));

        this.$('[rel=tooltip]').tooltip({placement: 'bottom'});

        var customs = {
            columnDefs: [
                { type: 'file-size', targets: 1 },
                { type: 'file-size', targets: 3 },
                { type: 'file-size', targets: 4 }
            ]
        };

        this.renderDataTables(customs);
    },

//	delete button handler
    deleteShare: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        shareName = button.attr('data-name');
        sid = button.attr('data-id');
        shareUsage = button.attr('data-usage');
		// set share name in confirm dialog
        _this.$('.pass-share-name').html(shareName);
        _this.$('#pass-share-usage').html(shareUsage);
		//show the dialog
        _this.$('#delete-share-modal').modal();
        return false;
    },

    confirmShareDelete: function(event) {
        var _this = this;
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var url = '/api/shares/' + sid;
        if($('#force-delete').prop('checked')){
            url += '/force';
        }
        $.ajax({
            url: url,
            type: 'DELETE',
            dataType: 'json',
            success: function() {
                _this.collection.fetch({reset: true});
                enableButton(button);
                _this.$('#delete-share-modal').modal('hide');
                $('.modal-backdrop').remove();
                app_router.navigate('shares', {trigger: true});
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },
    cancel: function(event) {
        if (event) event.preventDefault();
        app_router.navigate('shares', {trigger: true});
    },

    initHandlebarHelpers: function(){

        Handlebars.registerHelper('humanize_size', function(num) {
            return humanize.filesize(num * 1024);
        });

        Handlebars.registerHelper('displayCompressionAlgo', function(shareCompression,shareId) {
            var html = '';
            if (shareCompression && shareCompression != 'no') {
                html += shareCompression + ' ';
            } else {
                html += 'Same as Pool ';
            }
            html += '<a href="#shares/' + shareId + '/?cView=edit"' +
                'title="Edit share compression setting" rel="tooltip">' +
                '<i class="glyphicon glyphicon-pencil"></i></a>';
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('isSystemShare', function(id, pool_role) {

            //During Rockstor installation we create first pool with pool_id == 1
            //and root and home shares with id 1 and 2; this let us filter on ids
            //instead of share names
            if (pool_role == 'root' && parseInt(id) < 3) {
                return true;
            }
            return false;
        });

        Handlebars.registerHelper('checkUsage', function(size, btrfs_usage) {

            // We don't have share size enforcement with btrfs qgroup limit
            // but with this we help users to start gettting used to it.
            // Current warning levels are btrfs usage > 70% warning
            // btrfs usage > 80% alert
            var html, warning = '';
            var usage = (btrfs_usage / size).toFixed(4);
            if (usage >= 0.8) {
                warning = 'text-danger';
            } else if (usage >= 0.7){
                warning = 'text-warning';
            }
            if (warning !=='') {
                html = '<i class="fa fa-warning fa-lg ' + warning;
                html += '" title="Usage is ' + usage * 100 + '% of share size">';
                return new Handlebars.SafeString(html);
            }
        });
    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

ShellView = RockstorLayoutView.extend({
    events: {
        'switchChange.bootstrapSwitch': 'switchStatus',
        'click #fullscreen': 'FullScreenSwitch'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.shell_shell;
        this.serviceName = 'shellinaboxd';
        this.service = new Service({
            name: this.serviceName
        });
        this.dependencies.push(this.service);
    },

    render: function() {
        var _this = this;
        this.fetch(this.renderShell, this);
        return this;
    },

    renderShell: function() {

        $(this.el).html(this.template({
            service: this.service
        }));

        //initalize Bootstrap Switch
        this.$('[type=\'checkbox\']').bootstrapSwitch();
        this.$('input[name="shell-export-checkbox"]').bootstrapSwitch('state', this.service.get('status'), true);
        this.$('[type=\'checkbox\']').bootstrapSwitch('onColor', 'success'); //left side text color
        this.$('[type=\'checkbox\']').bootstrapSwitch('offColor', 'danger'); //right side text color

        // Display Shell In a Box Service Warning
        if (!this.service.get('status')) {
            this.$('#shell-warning').show();
            this.$('div[name="shell-container"]').show();
        } else {
            this.$('#rockstor-shell')[0].src = '/shell';
            this.$('#rockstor-shell').show();
            this.$('#fullscreen').show();
        }
    },

    FullScreenSwitch: function() {
        //nicely switch our console between normal size and fullscreen
        //fullscreen requires crossbrowser checks
        //Back to normal size just with ESC, as suggested by browser
        var rockstor_shell = this.$('#rockstor-shell')[0];
        if (rockstor_shell.requestFullscreen) {
            rockstor_shell.requestFullscreen();
        } else if (rockstor_shell.webkitRequestFullscreen) {
            rockstor_shell.webkitRequestFullscreen();
        } else if (rockstor_shell.mozRequestFullScreen) {
            rockstor_shell.mozRequestFullScreen();
        } else if (rockstor_shell.msRequestFullscreen) {
            rockstor_shell.msRequestFullscreen();
        }
    },

    switchStatus: function(event, state) {
        if (state) {
            this.startService();
        }
    },

    startService: function() {
        var _this = this;
        this.setStatusLoading(this.serviceName, true);
        $.ajax({
            url: '/api/sm/services/shellinaboxd/start',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.setStatusLoading(_this.serviceName, false);
                _this.$('div[name="shell-container"]').hide();
                _this.$('#shell-warning').hide();
                _this.$('#rockstor-shell')[0].src = '/shell';
                _this.$('#rockstor-shell').show();
                _this.$('#fullscreen').show();

            },
            error: function(xhr, status, error) {
                _this.setStatusError(_this.serviceName, xhr);
                _this.$('div[name="shell-container"]').show();
                _this.$('#shell-warning').show();
            }
        });
    },

    setStatusLoading: function(serviceName, show) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        if (show) {
            statusEl.html('<img src="/static/storageadmin/img/ajax-loader.gif"></img>');
        } else {
            statusEl.empty();
        }
    },

    setStatusError: function(serviceName, xhr) {
        var statusEl = this.$('div.command-status[data-service-name="' + serviceName + '"]');
        var msg = parseXhrError(xhr);
        // remove any existing error popups
        $('body').find('#' + serviceName + 'err-popup').remove();
        // add icon and popup
        statusEl.empty();
        var icon = $('<i>').addClass('icon-exclamation-sign').attr('rel', '#' + serviceName + '-err-popup');
        statusEl.append(icon);
        var errPopup = this.$('#' + serviceName + '-err-popup');
        var errPopupContent = this.$('#' + serviceName + '-err-popup > div');
        errPopupContent.html(msg);
        statusEl.click(function() {
            errPopup.overlay().load();
        });
    },

});

Cocktail.mixin(ShellView, PaginationMixin);
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

ShutdownView = RockstorLayoutView.extend({

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.common_navbar;
        this.paginationTemplate = window.JST.common_pagination;
        this.timeLeft = 180;
    },

    render: function() {
        var _this = this;
        $('#shutdown-modal').modal({
            keyboard: false,
            backdrop: 'static',
            show: false
        });
        if (confirm('Are you sure you want to Shutdown the system? All network access will be lost. Click OK to continue or Cancel to go back.')) {
            $('#shutdown-modal').modal('show');
            this.startForceRefreshTimer();

            $.ajax({
                url: '/api/commands/shutdown',
                type: 'POST',
                dataType: 'json',
                global: false, // dont show global loading indicator
                success: function(data, status, xhr) {
                    _this.checkIfUp();
                },
                error: function(xhr, status, error) {
                    _this.checkIfUp();
                }
            });
        } else {
            location.reload(history.go(-1));
        }
        return this;
    },

    checkIfUp: function() {
        var _this = this;
        this.isUpTimer = window.setInterval(function() {
            $.ajax({
                url: '/api/sm/sprobes/loadavg?limit=1&format=json',
                type: 'GET',
                dataType: 'json',
                global: false, // dont show global loading indicator
                success: function(data, status, xhr) {
                    // _this.reloadWindow();
                },
                error: function(xhr, status, error) {
                    _this.displayUserMsg2();
                }
            });
        }, 5000);
    },

    // countdown timeLeft seconds and then force a window reload
    startForceRefreshTimer: function() {
        var _this = this;
        this.forceRefreshTimer = window.setInterval(function() {
            _this.timeLeft = _this.timeLeft - 1;
            _this.showTimeRemaining();
            if (_this.timeLeft <= 0) {
                _this.reloadWindow();
            }
        }, 1000);
    },

    showTimeRemaining: function() {
        mins = Math.floor(this.timeLeft / 60);
        sec = this.timeLeft - (mins * 60);
        sec = sec >= 10 ? '' + sec : '0' + sec;
        $('#time-left').html(mins + ':' + sec);
        if (mins <= 1 && !this.userMsgDisplayed) {
            this.displayUserMsg();
            this.userMsgDisplayed = true;
        }
    },

    reloadWindow: function() {
        this.clearTimers();

    },

    clearTimers: function() {
        window.clearInterval(this.isUpTimer);
        window.clearInterval(this.forceRefreshTimer);
    },

    displayUserMsg: function() {
        $('#time-left').remove();
        $('#user-msg').show('highlight', null, 1000);
    },

    displayUserMsg2: function() {
        $('#message').remove();
        $('#timer').removeAttr('src');
        $('#time-left').remove();
        $('#user-msg').remove();
        $('#user-msg2').show('highlight', null, 1000);
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

SmartcustomDiskView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.disk_smartcustom_disks;
        this.disks = new DiskCollection();
        this.diskId = this.options.diskId;
        this.dependencies.push(this.disks);
    },

    render: function() {
        this.fetch(this.renderDisksForm, this);
        return this;
    },

    renderDisksForm: function() {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var _this = this;
        var disk_id = this.diskId;
        var disk_obj = this.disks.find(function(d) {
            return (d.get('id') == disk_id);
        });
        var serialNumber = disk_obj.get('serial');
        var currentSmartCustom = disk_obj.get('smart_options');
        var disk_name = disk_obj.get('name');

        $(this.el).html(this.template({
            diskName: disk_name,
            serialNumber: serialNumber,
            currentSmartCustom: currentSmartCustom
        }));

        this.$('#add-smartcustom-disk-form :input').tooltip({
            html: true,
            placement: 'right'
        });

        var err_msg = '';
        var smartcustom_err_msg = function() {
            return err_msg;
        };

        $.validator.addMethod('validateSmartCustom', function(value) {
            var smartcustom_options = $('#smartcustom_options').val().trim();
            var devOptions = ['auto', 'test', 'ata', 'scsi', 'sat', 'sat,12', 'sat,16', 'sat,auto', 'usbprolific', 'usbjmicron', 'usbjmicron,0', 'usbjmicron,p', 'usbjmicron,x', 'usbjmicron,x,1', 'usbcypress', 'usbsunplus'];
            var devOptionsRaid = ['3ware', 'areca', 'hpt', 'cciss', 'megaraid', 'aacraid'];
            var toleranceOptions = ['normal', 'conservative', 'permissive', 'verypermissive'];
            // RegExp patters for the following RAID target devices:
            // 3ware /dev/twe, /dev/twa, /dev/twl followed by 0-15
            // Areca sata /dev/sg[2-9] but for hpahcisr and hpsa drivers /dev/sg[0-9]* (lsscsi -g to help)
            // so we still have an issue there.
            // HP Smart array with cciss driver uses /dev/cciss/c[0-9]d0
            // HighPoint RocketRaid SATA RAID controller (hpt), LSI MegaRAID SAS RAID controller Dell PERC 5/i,6/i controller (megaraid)
            // and Adaptec SAS RAID controller (​aacraid) all expect /dev/sd[a-z] type raid device targets.
            var raidTargetRegExp = [/\/dev\/tw[e|a|l][0-9][0-5]{0,1}$/, /\/dev\/sg[0-9]$/, /\/dev\/cciss\/c[0-9]d0$/, /\/dev\/sd[a-z]$/, /autodev$/];
            // Initial cascade of syntactic checks.
            if (smartcustom_options.length == 0) {
                // allow zero length (empty) entry to remove existing options
                return true;
            }
            if (/^[A-Za-z0-9,-/ ]+$/.test(smartcustom_options) == false) {
                err_msg = 'Invalid character found, expecting only letters, numbers, and \'-\',\'/\' and \'space.\'';
                return false;
            }
            if ((!smartcustom_options.includes('-d ')) && (!smartcustom_options.includes('-T '))) {
                err_msg = 'Must contain either -d or -T options or both.';
                return false;
            }
            if (smartcustom_options.length > 64) {
                err_msg = 'S.M.A.R.T options must not exceed 64 characters.';
                return false;
            }
            // By now we have valid characters that include "-d " and or "-T " and
            // less than 64 of them (including spaces) - the max db field length.
            // Move to repeat and semantic checks
            //
            // Check for only one instance of "-d ".
            var first_d_option = smartcustom_options.indexOf('-d ');
            if (first_d_option != -1 && smartcustom_options.lastIndexOf('-d') != first_d_option) {
                err_msg = 'Only one occurrence of the -d switch is permitted.';
                return false;
            }
            // Note that multiple instances of -T are valid.
            // Validate each option.
            // Find elements of given options via split by space.
            var option_array = smartcustom_options.split(' ');
            if ((option_array[0] != '-d') && (option_array[0] != '-T')) {
                err_msg = 'Please begin with either \'-d \' or \'-T \'';
                return false;
            }
            // true if option is Device switch "-d"
            function isDevSwitch(option) {
                return (option == '-d');
            }

            // true if option is Tolerance switch ie "-T"
            function isToleranceSwitch(option) {
                return (option == '-T');
            }

            // true if not recognized as a dev option (non Raid)
            function isNotDevOption(option) {
                return (devOptions.indexOf(option) == -1);
            }

            // true if not recognized as a type option
            function isNotToleranceOption(option) {
                return (toleranceOptions.indexOf(option) == -1);
            }

            // true if not recognized as a RAID option
            // Consider improving to use string.match(regexp) to match whole option.
            // Currently only validates pre ',' in for example 3ware,5
            function isNotRaidOption(option) {
                var without_values = option.substring(0, option.indexOf(','));
                return (devOptionsRaid.indexOf(without_values) == -1);
            }

            // true if not recognized as a RAID target device
            function isNotRaidTarget(option) {
                // assumed not a raid controller target until found otherwise
                target_found = false;
                // for (var pattern of raidTargetRegExp) { // possible js version ?
                for (index = 0; index < raidTargetRegExp.length; index++) {
                    var pattern = raidTargetRegExp[index]; // more compatible.
                    if (pattern.test(option) == true) {
                        target_found = true;
                        // match found so look no further.
                        break;
                    }
                }
                return !target_found;
            }

            // rogue spaces are empty array elements after split so test for them
            function isRogueSpace(option) {
                return (option.toString() == '');
            }

            // test for any rogue spaces
            if (option_array.filter(isRogueSpace).length != 0) {
                err_msg = 'One or more rouge spaces found, please re-check input';
                return false;
            }
            // Categorize all entered options individually, forEach is order safe.
            var dev_options_found = [];
            var tol_options_found = [];
            var unknown_options_found = [];
            var option_type = '';
            var unknown_switches_found = [];
            var dev_switch_found = false;
            var tol_switch_found = false;
            option_array.forEach(function(option) {
                // filter our various options before assessing them as valid.
                if (option.charAt(0) == '-') { // option is a switch
                    if (isDevSwitch(option)) {
                        option_type = 'dev';
                        dev_switch_found = true;
                    } else if (isToleranceSwitch(option)) {
                        option_type = 'tol';
                        tol_switch_found = true;
                    } else { // unknown switch
                        option_type = 'unknown';
                        unknown_switches_found.push(option);
                    }
                } else if (option_type == 'dev') {
                    // collect all options proceeded by a -d option
                    dev_options_found.push(option);
                } else if (option_type == 'tol') {
                    // collect all options proceeded by a -T option
                    tol_options_found.push(option);
                } else {
                    // collect all other options proceeded by an unknown switch.
                    unknown_options_found.push(option);
                }
            });
            // Report any unknown switches.
            if (unknown_switches_found != '') {
                err_msg = 'One or more unknown switches found: \'' + unknown_switches_found.toString() + '\', supported switches are \'-d\' and \'-T\'';
                return false;
            }
            // Report any options of unknown type.
            // Note this should never trigger as the last unknown_switches_found
            // should trigger first. We have a later one to catch unknown options
            // after known triggers.
            if (unknown_options_found != '') {
                err_msg = 'The following options of an unknown type were entered:' +
                    ' \'' + unknown_options_found.toString() + '\', supported ' +
                    'options are ' + devOptions.toString() + '\n' +
                    devOptionsRaid.toString() + toleranceOptions.toString();
                return false;
            }
            // Filter out unknown options on known switches ie "-d notanoption"
            // Filter our dev options first by absolute known / allowed options
            // filter the resulting array by the less strict known raid options
            var unknown_dev_options_found = dev_options_found.filter(isNotDevOption).filter(isNotRaidOption).filter(isNotRaidTarget);
            if (unknown_dev_options_found != '') {
                err_msg = 'The following unknown \'-d\' options were found \'' +
                    unknown_dev_options_found.toString() + '\'';
                return false;
            }
            // Filter out unknown Tolerance options
            var unknown_tol_options_found = tol_options_found.filter(isNotToleranceOption);
            if (unknown_tol_options_found != '') {
                err_msg = 'The following unknown \'-T\' options were found \'' +
                    unknown_tol_options_found.toString() + '\'. Available options' +
                    ' are ' + toleranceOptions.toString();
                return false;
            }
            // Check we have at least one Tolerance option
            if (tol_switch_found && tol_options_found.length < 1) {
                // no Tolerance options found
                err_msg = 'Tolerance switch \'-T\' found without valid options';
                return false;
            }
            // Finally check if more than one -d option is given
            if (dev_options_found.length > 1) {
                // only legitimate -d option with 2 parameters is raid + raid target
                if (dev_options_found.length == 2) {
                    if ((!isNotRaidOption(dev_options_found[0])) && (!isNotRaidTarget(dev_options_found[1]))) {
                        // we have a raid option followed by a raid target dev
                        return true;
                    }
                }
                err_msg = 'Only one \'-d\' option is supported';
                return false;
            }
            // not otherwise found to be invalid or valid so assume valid by now.
            return true;
        }, smartcustom_err_msg);

        this.$('#add-smartcustom-disk-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                smartcustom_options: 'validateSmartCustom',
            },

            submitHandler: function() {
                var button = $('#smartcustom-disk');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/disks/' + disk_id + '/smartcustom-drive';
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#add-smartcustom-disk-form').getJSON()),
                    success: function() {
                        enableButton(button);
                        _this.$('#add-smartcustom-disk-form :input').tooltip('hide');
                        app_router.navigate('disks', {
                            trigger: true
                        });
                    },

                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    cancel: function(event) {
        event.preventDefault();
        this.$('#add-smartcustom-disk-form :input').tooltip('hide');
        app_router.navigate('disks', {
            trigger: true
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */
SnapshotsView = SnapshotsCommonView.extend({
    events: {
        'click #js-snapshot-add': 'add',
        'click #js-snapshot-cancel': 'cancel',
        'click .js-snapshot-delete': 'deleteSnapshot',
        'click .js-snapshot-clone': 'cloneSnapshot',
        'click .js-snapshot-select': 'selectSnapshot',
        'click .js-snapshot-select-all': 'selectAllSnapshots',
        'click #js-snapshot-delete-multiple': 'deleteMultipleSnapshots'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.share_snapshots;
        this.addTemplate = window.JST.share_snapshot_add_template;
        this.module_name = 'snapshots';
        this.snapshots = this.options.snapshots;
        this.collection = new SnapshotsCollection();
        this.shares = new ShareCollection();
        this.dependencies.push(this.shares);
        this.dependencies.push(this.collection);
        this.selectedSnapshots = [];
        this.replicaShareMap = {};
        this.snapShares = [];

        this.modify_choices = [{
            name: 'yes',
            value: 'yes'
        },
        {
            name: 'no',
            value: 'no'
        },
        ];
        this.parentView = this.options.parentView;
        this.collection.on('reset', this.renderSnapshots, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderSnapshots, this);
        return this;
    },


    renderSnapshots: function() {
        var _this = this;
        $(this.el).empty();

        var snapshots = _this.collection.toJSON();
        for (var i = 0; i < snapshots.length; i++) {
            var shareMatch = _this.shares.find(function(share) {
                return share.get('id') == snapshots[i].share;
            });
            snapshots[i].share_name = shareMatch.get('name');
            snapshots[i].share_is_mounted = shareMatch.get('is_mounted');
            snapshots[i].share_mount_status = shareMatch.get('mount_status');
        }
        $(this.el).append(_this.template({
            snapshots: snapshots,
            snapshotsNotEmpty: !_this.collection.isEmpty(),
            collection: _this.collection
        }));

        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });

        var customs = {
            columnDefs: [
                { type: 'file-size', targets: 6 },
                { type: 'file-size', targets: 7 }
            ]
        };

        this.renderDataTables(customs);

        return this;
    },

    // may be redundant
    setShareName: function(shareName) {
        this.collection.setUrl(shareName);
    },

    // it may be this method is redundant if, instead, we retrieve share id
    // via added template attribute data-share-id sourced from snapshots array
    // and move to shareID as value in share drop down (snapshot_add_template).
    // See other TODOs in this file.
    getShareId: function(shareName) {
        var shareMatch = this.shares.find(function(share) {
            return share.get('name') == shareName;
        });
        return shareMatch.get('id');
    },

    add: function(event) {
        var _this = this;
        event.preventDefault();
        $(this.el).html(this.addTemplate({
            snapshots: this.collection
        }));
        this.$('#shares').select2();
        var err_msg = '';
        var name_err_msg = function() {
            return err_msg;
        };

        $.validator.addMethod('validateSnapshotName', function(value) {
            var snapshot_name = $('#snapshot_name').val();
            if (/^[A-Za-z0-9_.-]+$/.test(snapshot_name) == false) {
                err_msg = 'Please enter a valid snapshot name.';
                return false;
            }
            return true;
        }, name_err_msg);

        this.$('#add-snapshot-form :input').tooltip({
            placement: 'right'
        });
        this.validator = this.$('#add-snapshot-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                snapshot_name: 'validateSnapshotName',
                shares: 'required'
            },
            submitHandler: function() {
                var button = _this.$('#js-snapshot-save');
                // TODO: if handlebars helper show_shares_dropdown moves to
                // passing value of shareId then the following line could be:
                // var shareId = $('#shares').val();
                // making the existing shareID def redundant and removes the
                // need to call getShareID: assuming shareName is not needed.
                var shareName = $('#shares').val();
                var shareId = _this.getShareId(shareName);
                if (buttonDisabled(button)) return false;
                disableButton(button);
                $.ajax({
                    url: '/api/shares/' + shareId + '/snapshots/' + _this.$('#snapshot_name').val(),
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#add-snapshot-form').getJSON()),
                    success: function() {
                        _this.$('#add-snapshot-form :input').tooltip('hide');
                        enableButton(button);
                        _this.collection.fetch({
                            success: function(collection, response, options) {}
                        });
                    },
                    error: function(xhr, status, error) {
                        _this.$('#add-snapshot-form :input').tooltip('hide');
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    deleteSnapshot: function(event) {
        event.preventDefault();
        var _this = this;
        var name = $(event.currentTarget).attr('data-name');
        var shareName = $(event.currentTarget).attr('data-share-name');
        // TODO: consider moving next line to:
        // var shareId = $(event.currentTarget).attr('data-share-id');
        var shareId = _this.getShareId(shareName);
        var esize = $(event.currentTarget).attr('data-size');
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Deleting snapshot(' + name + ') deletes ' + esize + ' of data permanently. Do you really want to delete it?')) {
            disableButton(button);
            $.ajax({
                url: '/api/shares/' + shareId + '/snapshots/' + name,
                type: 'DELETE',
                success: function() {
                    enableButton(button);
                    _this.$('[rel=tooltip]').tooltip('hide');
                    _this.selectedSnapshots = [];
                    _this.collection.fetch({
                        reset: true
                    });

                },
                error: function(xhr, status, error) {
                    enableButton(button);
                    _this.$('[rel=tooltip]').tooltip('hide');
                }
            });
        }
    },

    cloneSnapshot: function(event) {
        if (event) event.preventDefault();
        // Remove current tooltips to prevent them hanging around
        // even after new page has loaded.
        this.$('[rel=tooltip]').tooltip('hide');
        var name = $(event.currentTarget).attr('data-name');
        var shareName = $(event.currentTarget).attr('data-share-name');
        // TODO: consider moving next line to:
        // var shareId = $(event.currentTarget).attr('data-share-id');
        var shareId = this.getShareId(shareName);
        var url = 'shares/' + shareId + '/snapshots/' +
            name + '/create-clone';
        app_router.navigate(url, {
            trigger: true
        });

    },

    deleteMultipleSnapshots: function(event) {
        var _this = this;
        event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (this.selectedSnapshots.length == 0) {
            alert('Select at least one snapshot to delete');
        } else {
            var confirmMsg = null;
            if (this.selectedSnapshots.length == 1) {
                confirmMsg = 'Deleting snapshot ';
            } else {
                confirmMsg = 'Deleting snapshots ';
            }
            var snapNames = _.reduce(this.selectedSnapshots, function(str, snap) {
                return str + snap.get('name') + ',';
            }, '', this);
            snapNames = snapNames.slice(0, snapNames.length - 1);

            var snapIds = _.reduce(this.selectedSnapshots, function(str, snap) {
                return str + snap.id + ',';
            }, '', this);
            snapIds = snapIds.slice(0, snapIds.length - 1);

            var totalSize = _.reduce(this.selectedSnapshots, function(sum, snap) {
                return sum + snap.get('eusage');
            }, 0, this);

            var totalSizeStr = humanize.filesize(totalSize * 1024);

            if (confirm(confirmMsg + snapNames + ' deletes ' + totalSizeStr + ' of data. Are you sure?')) {
                disableButton(button);

                _.each(this.selectedSnapshots, function(s) {
                    var name = s.get('name');

                    _this.shares.each(function(share, index) {
                        if (s.get('share') == share.get('id')) {
                            var shareId = share.get('id');
                            $.ajax({
                                url: '/api/shares/' + shareId + '/snapshots/' + name,
                                type: 'DELETE',
                                success: function() {
                                    enableButton(button);
                                    _this.$('[rel=tooltip]').tooltip('hide');
                                    _this.selectedSnapshots = [];
                                    _this.collection.fetch({
                                        reset: true
                                    });

                                },
                                error: function(xhr, status, error) {
                                    enableButton(button);
                                    _this.$('[rel=tooltip]').tooltip('hide');
                                }
                            });

                        }
                    });
                });
            }
        }
    },

    selectedContains: function(name) {
        return _.find(this.selectedSnapshots, function(snap) {
            return snap.get('name') == name;
        });
    },

    addToSelected: function(name) {
        this.selectedSnapshots.push(this.collection.find(function(snap) {
            return snap.get('name') == name;
        }));
    },

    removeFromSelected: function(name) {
        var i = _.indexOf(_.map(this.selectedSnapshots, function(snap) {
            return snap.get('name');
        }), name);
        this.selectedSnapshots.splice(i, 1);
    },

    cancel: function(event) {
        event.preventDefault();
        this.render();
    },

    initHandlebarHelpers: function() {
        var _this = this;
        Handlebars.registerHelper('checkboxValue', function(snapName) {
            var html = '';
            if (RockstorUtil.listContains(_this.selectedSnapshots, 'name', snapName)) {
                html += 'checked="checked"';
            } else {
                html += '';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('getToc', function(toc) {
            return moment(toc).format(RS_DATE_FORMAT);
        });

        Handlebars.registerHelper('getSize', function(size) {
            return humanize.filesize(size * 1024);
        });

        //Create Snapshot Template Helpers
        Handlebars.registerHelper('show_shares_dropdown', function() {
            var html = '';
            _this.shares.each(function(share, index) {
                var shareName = share.get('name');
                // var shareId = share.get('id');
                // TODO: consider above shareId as value: avoids getShareId() use.
                html += '<option value="' + shareName + '">' + shareName + '</option>';
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('display_writeable_options', function() {
            var html = '';
            _.each(_this.modify_choices, function(c) {
                html += '<label class="radio-inline">';
                if (c.value == 'yes') {
                    html += '<input type="radio" name="writable" value="rw" checked>' + c.name;
                } else {
                    html += '<input type="radio" name="writable" value="ro" title="Note that (1)read-only snapshots cannot be cloned and (2)Shares cannot be rolled back to read-only snapshots" >' + c.name;
                }
                html += '</label>';
            });
            return new Handlebars.SafeString(html);
        });

    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

SnapshotsTableModule = SnapshotsCommonView.extend({
    events: {
        'click #js-snapshot-add': 'add',
        'click #js-snapshot-cancel': 'cancel',
        'click .js-snapshot-delete': 'deleteSnapshot',
        'click .js-snapshot-clone': 'cloneSnapshot',
        'click .js-snapshot-select': 'selectSnapshot',
        'click .js-snapshot-select-all': 'selectAllSnapshots',
        'click #js-snapshot-delete-multiple': 'deleteMultipleSnapshots'
    },

    initialize: function() {
        this.template = window.JST.share_snapshots_table_template;
        this.addTemplate = window.JST.share_snapshot_add;
        this.module_name = 'snapshots';
        this.share = this.options.share;
        this.snapshots = this.options.snapshots;
        this.collection = this.options.snapshots;
        this.collection.on('reset', this.render, this);
        this.selectedSnapshots = [];
        this.parentView = this.options.parentView;
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        $(this.el).empty();
        $(this.el).append(this.template({
            snapshots: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
            selectedSnapshots: this.selectedSnapshots,
            share: this.share
        }));
        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });
        this.$('#snapshots-table').tablesorter({
            headers: {
                0: {
                    sorter: false
                }
            }
        });
        return this;
    },

    setShareName: function(shareName) {
        this.collection.setUrl(shareName);
    },

    add: function(event) {
        var _this = this;
        event.preventDefault();
        $(this.el).html(this.addTemplate({
            snapshots: this.collection,
            share: this.share

        }));

        var err_msg = '';
        var name_err_msg = function() {
            return err_msg;
        };

        $.validator.addMethod('validateSnapshotName', function(value) {
            var snapshot_name = $('#snapshot-name').val();
            if (/^[A-Za-z0-9_.-]+$/.test(snapshot_name) == false) {
                err_msg = 'Please enter a valid snapshot name.';
                return false;
            }
            return true;
        }, name_err_msg);

        this.$('#add-snapshot-form :input').tooltip();
        this.validator = this.$('#add-snapshot-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                snapshot_name: 'validateSnapshotName'
            },
            submitHandler: function() {
                var button = _this.$('#js-snapshot-save');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                $.ajax({
                    url: '/api/shares/' + _this.share.get('id') + '/snapshots/' + _this.$('#snapshot-name').val(),
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(_this.$('#add-snapshot-form').getJSON()),
                    success: function() {
                        _this.$('#add-snapshot-form :input').tooltip('hide');
                        enableButton(button);
                        _this.collection.fetch({
                            success: function(collection, response, options) {
                                _this.parentView.trigger('snapshotsModified');
                            }
                        });
                    },
                    error: function(xhr, status, error) {
                        _this.$('#add-snapshot-form :input').tooltip('hide');
                        enableButton(button);
                    }
                });
                return false;
            }
        });
    },

    deleteSnapshot: function(event) {
        event.preventDefault();
        var _this = this;
        var name = $(event.currentTarget).attr('data-name');
        var esize = $(event.currentTarget).attr('data-size');
        var share_id = this.share.get('id');
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        if (confirm('Deleting snapshot(' + name + ') deletes ' + esize + ' of data permanently. Do you really want to delete it?')) {
            disableButton(button);
            $.ajax({
                url: '/api/shares/' + share_id + '/snapshots/' + name,
                type: 'DELETE',
                success: function() {
                    enableButton(button);
                    _this.$('[rel=tooltip]').tooltip('hide');
                    _this.selectedSnapshots = [];
                    _this.collection.fetch({
                        success: function(collection, response, options) {
                            _this.parentView.trigger('snapshotsModified');
                        }
                    });
                },
                error: function(xhr, status, error) {
                    enableButton(button);
                    _this.$('[rel=tooltip]').tooltip('hide');
                }
            });
        }
    },

    cloneSnapshot: function(event) {
        if (event) event.preventDefault();
        // Remove current tooltips to prevent them hanging around
        // even after new page has loaded.
        this.$('[rel=tooltip]').tooltip('hide');
        var name = $(event.currentTarget).attr('data-name');
        var url = 'shares/' + this.share.get('id') + '/snapshots/' +
            name + '/create-clone';
        app_router.navigate(url, {
            trigger: true
        });

    },

    deleteMultipleSnapshots: function(event) {
        var _this = this;
        event.preventDefault();
        var button = $(event.currentTarget);
        if (buttonDisabled(button)) return false;
        var share_id = this.share.get('id');
        if (this.selectedSnapshots.length == 0) {
            alert('Select at least one snapshot to delete');
        } else {
            var confirmMsg = null;
            if (this.selectedSnapshots.length == 1) {
                confirmMsg = 'Deleting snapshot ';
            } else {
                confirmMsg = 'Deleting snapshots ';
            }
            var snapNames = _.reduce(this.selectedSnapshots, function(str, snap) {
                return str + snap.get('name') + ',';
            }, '', this);
            snapNames = snapNames.slice(0, snapNames.length - 1);
            var snapIds = _.reduce(this.selectedSnapshots, function(str, snap) {
                return str + snap.id + ',';
            }, '', this);
            snapIds = snapIds.slice(0, snapIds.length - 1);
            var totalSize = _.reduce(this.selectedSnapshots, function(sum, snap) {
                return sum + snap.get('eusage');
            }, 0, this);
            var totalSizeStr = humanize.filesize(totalSize * 1024);
            if (confirm(confirmMsg + snapNames + ' deletes ' + totalSizeStr + ' of data. Are you sure?')) {
                disableButton(button);
                $.ajax({
                    url: '/api/shares/' + share_id + '/snapshots?id=' + snapIds,
                    type: 'DELETE',
                    success: function() {
                        enableButton(button);
                        _this.$('[rel=tooltip]').tooltip('hide');
                        // reset selected snapshots
                        _this.selectedSnapshots = [];
                        // reset to prev page if not on first page
                        // to handle the case of the last page being deleted
                        if (_this.collection.pageInfo().prev) {
                            _this.collection.prevPage();
                        } else {
                            _this.collection.fetch({
                                success: function(collection, response, options) {
                                    _this.parentView.trigger('snapshotsModified');
                                }
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                        _this.$('[rel=tooltip]').tooltip('hide');
                        _this.selectedSnapshots = [];
                        _this.collection.fetch();
                    }
                });
            }
        }
    },

    selectedContains: function(name) {
        return _.find(this.selectedSnapshots, function(snap) {
            return snap.get('name') == name;
        });
    },

    addToSelected: function(name) {
        this.selectedSnapshots.push(this.collection.find(function(snap) {
            return snap.get('name') == name;
        }));
    },

    removeFromSelected: function(name) {
        var i = _.indexOf(_.map(this.selectedSnapshots, function(snap) {
            return snap.get('name');
        }), name);
        this.selectedSnapshots.splice(i, 1);
    },

    cancel: function(event) {
        event.preventDefault();
        this.render();
    },

    initHandlebarHelpers: function() {

        Handlebars.registerHelper('printCheckboxes', function(snapName, snapId) {
            var html = '';
            if (RockstorUtil.listContains(this.selectedSnapshots, 'name', snapName)) {
                html += '<input class="js-snapshot-select inline" type="checkbox" name="snapshot-select" data-name="' + snapName + '" data-id=' + snapId + ' checked="checked"></input>';
            } else {
                html += '<input class="js-snapshot-select inline" type="checkbox" name="snapshot-select" data-name="' + snapName + '" data-id=' + snapId + ' ></input>';
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('getToc', function(toc) {
            return moment(toc).format(RS_DATE_FORMAT);
        });

        Handlebars.registerHelper('getSize', function(size) {
            return humanize.filesize(size * 1024);
        });

    }
});

//Add pagination
Cocktail.mixin(SnapshotsTableModule, PaginationMixin);

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

SpindownDiskView = RockstorLayoutView.extend({
    events: {
        'click #cancel': 'cancel'
    },

    initialize: function() {
        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.disk_spindown_disks;
        this.disks = new DiskCollection();
        this.diskId = this.options.diskId;
        this.dependencies.push(this.disks);
        this.tickFormatter = function(d) {
            var formatter = d3.format(',.0f');
            if (d > 254.4) {
                return formatter(d) + ' off';
            }
            if (d < 0.5) {
                return 'none';
            }
            return formatter(d);
        };
        this.tickFormatterText = function(d) {
            var formatter = d3.format(',.0f');
            return formatter(d);
        };
        this.slider = null;
        // update the text box apm_value when ever the slider is moved.
        this.sliderCallback = function(slider) {
            var value = slider.value();
            _this.$('#apm_value').val(_this.tickFormatterText(value));
        };
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderDisksForm, this);
        return this;
    },

    renderDisksForm: function() {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var _this = this;
        var disk_id = this.diskId;
        var spindownTimes = {
            '30 seconds': 6,
            '1 minute': 12,
            '5 minutes': 60,
            '10 minutes': 120,
            '20 minutes': 240,
            '30 minutes': 241,
            '1 hour': 242,
            '2 hours': 244,
            '4 hours': 248,
            'Vendor defined (8-12h)': 253,
            'No spin down': 0,
            'Remove config': -1
        };
        _this.spindownTimes = spindownTimes;
        var diskObj = this.disks.find(function(d) {
            return (d.get('id') == disk_id);
        });
        var serialNumber = diskObj.get('serial');
        var hdparmSetting = diskObj.get('hdparm_setting');
        var apmLevel = diskObj.get('apm_level');
        var disk_name = diskObj.get('name');

        $(this.el).html(this.template({
            diskName: disk_name,
            serialNumber: serialNumber,
            spindownTimes: spindownTimes,
            hdparmSetting: hdparmSetting,
            apmLevel: apmLevel
        }));

        this.$('#add-spindown-disk-form :input').tooltip({
            html: true,
            placement: 'right'
        });

        var err_msg = '';
        var spindown_err_msg = function() {
            return err_msg;
        };

        $.validator.addMethod('validateApmValue', function(value) {
            var apm_value = $('#apm_value').val();
            if (apm_value == '') {
                err_msg = 'Please enter an APM value (1-255), or 0 to not apply an APM settings.';
                return false;
            }
            if (/^[0-9\b]+$/.test(apm_value) == false) {
                err_msg = 'Invalid APM value: please enter a number in the range 0-255.';
                return false;
            }
            if (apm_value < 0 || apm_value > 255) {
                err_msg = 'The APM setting must be between 0 (no setting) and 255 (disabled).';
                return false;
            }
            return true;
        }, spindown_err_msg);

        this.$('#enable_apm').click(function() {
            // $('#apm_value').prop('disable', !this.checked); // disable apm text
            //$('#slide_lower_half').prop('disable', !this.checked);
            //$('#slide_upper_half').prop('disable', !this.checked);
            //$('#slide_disabled').prop('disable', !this.checked);
            if (this.checked) {
                $('#slider-entry').show();
                $('#slider-key').show();
                $('#apm_value').val(apmLevel);
            } else {
                $('#slider-entry').hide();
                $('#slider-key').hide();
            }
        });

        // apmLevel = the current sensed level from the drive
        if (apmLevel == 0) {
            // we have a device that doesn't support APM or there was an error
            // reading it's current level so disable / hide our APM settings.
            //this.$('#enable_apm').attr('checked', 'true');
            this.$('#enable_apm').removeAttr('checked');
            this.$('#enable_apm').attr('disabled', 'true');
            //this.$('#slider').hide();
            this.$('#slider-entry').hide();
            this.$('#slider-key').hide();
        } else {
            // we can't disable the slider this way:
            // this.$('#slider').attr('disabled', 'true');
            // the apm_value text box is greyed but the slider still updates it's
            // contents.
            // disable on the text box works a treat given the above
            // this.$('#apm_value').attr('disabled', 'true');

            _this.renderSlider();
            // apmLevel = the current sensed level from the drive
            // apm_value = the text box and it's entered value
            // update the slider when the apm_value text box is changed
            //_this.$('#apm_value').focusout(function () {
            _this.$('#apm_value').change(function() {
                var our_value = this.value;
                // avoid passing NaN value to slider, leaving them to be
                // validated by our forms validateApmValue
                if (!isNaN(our_value)) {
                    _this.slider.setValue((our_value));
                }
            });
            // set the text box to show the current sensed APM level
            _this.$('#apm_value').val(apmLevel);
            // now call the change event on text box apm_value to update the slider
            _this.$('#apm_value').change();
            //_this.$('#enable_apm').click();
        }

        this.$('#add-spindown-disk-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                spindown_time: 'required',
                apm_value: 'validateApmValue'
                //slider: {
                //    required: "#enable_apm:checked" // slider required only if
                //    // APM settings tickbox enabled.
                //},
            },

            submitHandler: function() {
                var button = $('#spindown-disk');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var submitmethod = 'POST';
                var posturl = '/api/disks/' + disk_id + '/spindown-drive';
                var data = _this.$('#add-spindown-disk-form').getJSON();
                var selected_time = data.spindown_time;
                var spindown_text = 'no message';
                // look through spindownTimes to find the selected value
                for (var time_string in _this.spindownTimes) {
                    if (_this.spindownTimes[time_string] == selected_time) {
                        // value found so set our text to it's key.
                        spindown_text = time_string;
                        break;
                    }
                }
                // safeguard against setting -B (APM) option if enable_apm is
                // unticked.
                if (data.enable_apm != true) {
                    data.apm_value = 0;
                }
                data.spindown_message = spindown_text;
                $.ajax({
                    url: posturl,
                    type: submitmethod,
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function() {
                        enableButton(button);
                        _this.$('#add-spindown-disk-form :input').tooltip('hide');
                        app_router.navigate('disks', {
                            trigger: true
                        });
                    },

                    error: function(xhr, status, error) {
                        enableButton(button);
                    }
                });

                return false;
            }
        });
    },

    initHandlebarHelpers: function() {
        // helper to fill dropdown with drive spindown values
        // eg by generating dynamicaly lines of the following
        // <option value="240">20 minutes</option>
        Handlebars.registerHelper('display_spindown_time', function() {
            var html = '';
            if (this.hdparmSetting == null) {
                // if there is no previous setting then default to 20 minutes
                this.hdparmSetting = '20 minutes';
            }
            for (var timeString in this.spindownTimes) {
                // Get the last setting by reading it from systemd file's
                // comment line as neither smart or hdparm can retrieve it.
                if (timeString == this.hdparmSetting) {
                    // we have found our current setting so mark it selected
                    html += '<option value="' + this.spindownTimes[timeString] + '" selected="selected">';
                    html += timeString + '</option>';
                } else {
                    html += '<option value="' + this.spindownTimes[timeString] + '">' + timeString + '</option>';
                }
            }
            return new Handlebars.SafeString(html);
        });
    },

    renderSlider: function() {
        // Callback used to broadcast our changing value.
        this.$('#slider').empty();
        this.slider = d3.slider2().min(0).max(255).ticks(10).tickFormat(this.tickFormatter).value(0).reclaimable(127).used(0.5).callback(this.sliderCallback);
        d3.select('#slider').call(this.slider);
    },

    cancel: function(event) {
        event.preventDefault();
        this.$('#add-spindown-disk-form :input').tooltip('hide');
        app_router.navigate('disks', {
            trigger: true
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

TasksView = RockstorLayoutView.extend({
    events: {},

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        // set template
        this.template = window.JST.scheduled_tasks_tasks;
        // add dependencies
        this.taskDefId = this.options.taskDefId;
        this.taskDef = new TaskDef({
            id: this.taskDefId
        });
        this.dependencies.push(this.taskDef);
        this.collection = new TaskCollection(null, {
            taskDefId: this.taskDefId
        });
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderTasks, this);
        // has the replica been fetched? prevents renderReplicaTrails executing
        // (because of collection reset) before replica has been fetched
        this.taskDefFetched = false;
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.firstFetch, this);
        return this;
    },

    firstFetch: function() {
        this.taskDefFetched = true;
        this.renderTasks();
    },

    renderTasks: function() {
        if (!this.taskDefFetched) return false;
        var _this = this;
        $(this.el).html(this.template({
            taskDef: this.taskDef,
            taskName: this.taskDef.get('name'),
            taskColl: this.collection.toJSON(),
            collection: this.collection,
            collectionNotEmpty: !this.collection.isEmpty(),
        }));
        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });

        this.renderDataTables();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_snapshot_scrub', function() {
            var html = '';
            if (this.taskDef.get('task_type') == 'snapshot') {
                html += 'Snapshot of Share (<a href="#shares/';
                // TODO: fix this to go direct to Snapshots tab.
                html += JSON.parse(this.taskDef.get('json_meta')).share + '">';
                html += this.taskDef.get('share_name');
                html += '</a>): see "Snapshots" tab for details.';
            } else if (this.taskDef.get('task_type') == 'scrub'){
                html += 'Scrub of Pool (<a href="#pools/';
                // TODO: fix this to go direct to Scrubs tab.
                html += JSON.parse(this.taskDef.get('json_meta')).pool + '">';
                html += this.taskDef.get('pool_name');
                html += '</a>): see "Scrubs" tab for details.';
            } else {
                html += this.taskDef.get('task_type');
            }
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('dateFormat', function(taskTime) {
            return moment(taskTime).format(RS_DATE_FORMAT);
        });
    }

});

//Add pagination
Cocktail.mixin(TasksView, PaginationMixin);
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

UpdateCertificateView = RockstorLayoutView.extend({
    events: {
        'click #update-certificate': 'renderCertificateForm',
        'click #cancel': 'cancel'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.updatetemplate = window.JST.setup_update_certificate;
        this.template = window.JST.setup_certificate_desc;
        this.certificate = new Certificate();
        this.certificates = new Certificate();
        this.dependencies.push(this.certificates);
        this.initHandlebarHelpers();
    },

    render: function() {
        var _this = this;
        this.fetch(this.renderCertificate, this);
        return this;
    },

    renderCertificate: function() {
        var cert = _.first(this.certificates.get('results'));
        this.certificate.set(cert);
        this.renderCertificateDescription();
    },

    renderCertificateDescription: function() {
        var cname = this.certificate.get('name');
        $(this.el).html(this.template({
            'name': cname
        }));
    },

    cancel: function(event) {
        $(this.el).empty();
        var cname = this.certificate.get('name');
        $(this.el).html(this.template({
            'name': cname
        }));
    },

    renderCertificateForm: function() {
        var _this = this;
        $(this.el).html(this.updatetemplate());
        this.$('#update-certificate-form :input').tooltip({
            placement: 'right'
        });
        this.$('#group').chosen();

        this.validator = this.$('#update-certificate-form').validate({
            onfocusout: false,
            onkeyup: false,
            rules: {
                certificatename: 'required',
                certificate: 'required',
                privatekey: 'required'
            },
            submitHandler: function() {
                var button = $('#save-certificate');
                if (buttonDisabled(button)) return false;
                disableButton(button);
                var certificateName = $('#certificatename').val();
                var certificate = $('#certificate').val();
                var privatekey = $('#privatekey').val();
                var certData = JSON.stringify({
                    'name': certificateName,
                    'cert': certificate,
                    'key': privatekey
                });
                $.ajax({
                    url: '/api/certificate',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: certData,
                    success: function() {
                        enableButton(button);
                        _this.$('#update-certificate-form :input').tooltip('hide');
                        _this.certificate.set({
                            'name': certificateName
                        });
                        alert('Certificate update successfully. It will take effect now.');
                        location.reload();
                        _this.renderCertificateDescription();
                    },
                    error: function(xhr, status, error) {
                        enableButton(button);
                        _this.$('#update-certificate-form :input').tooltip('hide');
                        var msg = parseXhrError(xhr.responseText);
                        _this.$('.messages').html(msg);
                    },
                });
            }
        });
        return this;
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_message', function() {
            var html = '';
            if (_.isEmpty(name)) {
                html += 'A self signed Certificate created during installation is in use by default.';
            } else {
                html += 'Admin provided Certificate<strong>(' + name + ')</strong> is currently in use.';
            }
            return new Handlebars.SafeString(html);
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 * 
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 * 
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 * 
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 * 
 */

UsersView = RockstorLayoutView.extend({
    events: {
        'click .delete-user': 'deleteUser',
        'click .edit-user': 'editUser',
        'click .add-pincard': 'addPincard',
        'hidden.bs.modal #pincard-modal': 'PincardModalClose'
    },

    initialize: function() {
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.users_users;
        this.collection = new UserCollection();
        this.dependencies.push(this.collection);
        this.collection.on('reset', this.renderUsers, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.collection.fetch();
        return this;
    },

    renderUsers: function() {
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }

        this.rockstorUsers = this.collection.filter(function(grp) {
            return (grp.get('admin'));
        });
        this.otherSystemUsers = this.collection.filter(function(grp) {
            return (!grp.get('admin'));
        });

        $(this.el).html(this.template({
            collection: this.collection,
            rockstorUsers: this.rockstorUsers,
            otherSystemUsers: this.otherSystemUsers,
        }));

        this.$('[rel=tooltip]').tooltip({
            placement: 'bottom'
        });
        this.renderDataTables();
    },

    deleteUser: function(event) {
        event.preventDefault();
        var _this = this;
        var username = $(event.currentTarget).attr('data-username');
        if (confirm('Delete user:  ' + username + '. Are you sure?')) {
            $.ajax({
                url: '/api/users/' + username,
                type: 'DELETE',
                dataType: 'json',
                success: function() {
                    _this.collection.fetch();
                },
                error: function(xhr, status, error) {}
            });
        } else {
            return false;
        }
    },

    editUser: function(event) {
        if (event) event.preventDefault();
        if (this.$('[rel=tooltip]')) {
            this.$('[rel=tooltip]').tooltip('hide');
        }
        var username = $(event.currentTarget).attr('data-username');
        app_router.navigate('users/' + username + '/edit', {
            trigger: true
        });
    },

    addPincard: function(event) {
        event.preventDefault();
        var uid = $(event.currentTarget).attr('data-uid');
        var username = $(event.currentTarget).attr('data-username');
        RockStorSocket.pincardManager = io.connect('/pincardmanager', {
            'secure': true,
            'force new connection': true
        });
        $('#pincard_user').text(username);
        RockStorSocket.addListener(this.renderPincard, this, 'pincardManager:newpincard');
        RockStorSocket.pincardManager.emit('generatepincard', uid);
    },

    renderPincard: function(data) {

        //Define start and default values 
        var pins_array = data;
        var pin_cells_start = {
            'x': 7,
            'y': 18
        };
        var pin_cells_dimensions = {
            'x': 45,
            'y': 30
        };
        var pin_indexes_start = {
            'x': 28,
            'y': 15
        };
        var pin_texts_start = {
            'x': 30,
            'y': 38
        };
        var pincard_objects_slide = {
            'x': 53,
            'y': 46
        };
        var Pincard_canvas = $('#Pincard_canvas')[0];
        var ctx = Pincard_canvas.getContext('2d');
        //Clear Pincard canvas
        ctx.clearRect(0, 0, 324, 204);
        //Create canvas shape and fill will black background
        ctx.fillStyle = 'black';
        ctx.strokeStyle = 'black';
        ctx.moveTo(12, 0);
        ctx.lineTo(312, 0);
        ctx.arcTo(324, 0, 324, 12, 12);
        ctx.lineTo(324, 192);
        ctx.arcTo(324, 204, 312, 204, 12);
        ctx.lineTo(12, 204);
        ctx.arcTo(0, 204, 0, 192, 12);
        ctx.lineTo(0, 12);
        ctx.arcTo(0, 0, 12, 0, 12);
        ctx.fill();
        //Add Rockstor watermark image then render pins cells, indexes and pins values
        var background_image = $('#canvas_background')[0];
        //Reduce opacity for background image
        ctx.globalAlpha = 0.3;
        ctx.drawImage(background_image, 32, 2, 260, 208);
        //Back to normal opacity for pin cells, indexes and values
        ctx.globalAlpha = 1;
        ctx.strokeStyle = 'white';
        ctx.lineWidth = '2';
        ctx.fillStyle = 'white';
        ctx.textAlign = 'center';
        var pin_index, x_delta, y_delta, pin_cell_x, pin_cell_y,
            pin_index_x, pin_index_y, pin_text_x, pin_text_y;
        var pins_string = '<table class="table table-condensed table-bordered"><tbody>';

        for (var y = 0; y <= 3; y++) {
            //Loop through Pincard rows and calculate y deltas for every object
            y_delta = y * pincard_objects_slide['y'];
            pin_cell_y = pin_cells_start['y'] + y_delta;
            pin_index_y = pin_indexes_start['y'] + y_delta;
            pin_text_y = pin_texts_start['y'] + y_delta;
            pins_string += '<tr>';

            for (var x = 0; x <= 5; x++) {
                //Loop through Pincard columns and calculate
                //x deltas for every object and current pin index value
                pin_index = (x + 1) + y * 6;
                x_delta = x * pincard_objects_slide['x'];
                pin_cell_x = pin_cells_start['x'] + x_delta;
                pin_index_x = pin_indexes_start['x'] + x_delta;
                pin_text_x = pin_texts_start['x'] + x_delta;
                //Render Pin cell
                ctx.strokeRect(pin_cell_x, pin_cell_y, pin_cells_dimensions.x, pin_cells_dimensions.y);
                //Render Pin index
                ctx.font = 'bold 13px Courier New';
                ctx.fillText(pin_index, pin_index_x, pin_index_y);
                //Render Pin value
                ctx.font = 'bold 14px Courier New';
                ctx.fillText(pins_array[pin_index - 1], pin_text_x, pin_text_y);
                pins_string += '<td>' + $('<div/>').text(pins_array[pin_index - 1]).html() + '</td>';
            }
            pins_string += '</tr>';
        }
        pins_string += '</tbody></table>';
        $('#pins_list').html('Selectable Pincard pins:<br/>' + pins_string);
        $('#pincard-modal').modal({
            keyboard: false,
            show: false,
            backdrop: 'static'
        });
        $('#pincard-modal').modal('show');
    },

    PincardModalClose: function() {

        RockStorSocket.removeOneListener('pincardManager');
        RockStorSocket.pincardManager.disconnect();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_users_table', function(adminBool) {
            var html = '';
            var filteredCollection = null;
            if (adminBool) {
                filteredCollection = this.rockstorUsers;
            } else {
                filteredCollection = this.otherSystemUsers;
            }
            if (filteredCollection == null) {
                html += 'No groups exist';
            } else {
                for (var i = 0; i < filteredCollection.length; i++) {
                    var has_pincard = filteredCollection[i].get('has_pincard');
                    var pincard_allowed = filteredCollection[i].get('pincard_allowed');

                    html += '<tr>';
                    html += '<td><i class="glyphicon glyphicon-user"></i> ' + filteredCollection[i].get('username') + '</td>';
                    html += '<td>' + filteredCollection[i].get('uid') + '</td>';
                    html += '<td>' + filteredCollection[i].get('groupname') + '</td>';
                    html += '<td>' + filteredCollection[i].get('gid') + '</td>';
                    html += '<td>';
                    if (filteredCollection[i].get('shell') != null) {
                        html += filteredCollection[i].get('shell');
                    }
                    html += '</td>';
                    html += '<td>';
                    if (filteredCollection[i].get('managed_user')) {
                        html += '<a href="#" class="edit-user" data-username="' + filteredCollection[i].get('username') + '" rel="tooltip" title="Edit user"><i class="glyphicon glyphicon-pencil"></i></a>&nbsp;';
                        html += '<a href="#" class="delete-user" data-username="' + filteredCollection[i].get('username') + '" rel="tooltip" title="Delete user"><i class="glyphicon glyphicon-trash"></i></a>&nbsp;';
                    }
                    if (has_pincard && pincard_allowed == 'yes') {
                        html += '<a href="#" class="add-pincard" data-username="' + filteredCollection[i].get('username') + '" data-uid="' + filteredCollection[i].get('uid') + '" rel="tooltip" title="Pincard already present - Click to generate a new Pincard"><i class="fa fa-credit-card text-success" aria-hidden="true"></i></a>';
                    } else {
                        switch (pincard_allowed) {
                        case 'yes':
                            html += '<a href="#" class="add-pincard" data-username="' + filteredCollection[i].get('username') + '" data-uid="' + filteredCollection[i].get('uid') + '" rel="tooltip" title="Click to generate a new Pincard"><i class="fa fa-credit-card text-success" aria-hidden="true"></i></a>';
                            break;
                        case 'otp':
                            html += '<a href="#email" rel="tooltip" title="Pincard+OTP (One Time Password) via mail required, Email Alerts not enabled, click to procede"><i class="fa fa-credit-card text-warning" aria-hidden="true"></i></a>';
                            break;
                        }
                    }
                    html += '</td>';
                    html += '</tr>';
                }
            }
            return new Handlebars.SafeString(html);
        });
    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

VersionView = RockstorLayoutView.extend({
    events: {
        'click #update': 'update',
        'click #donateYes': 'donateYes',
        'click #autoUpdateSwitch': 'autoUpdateSwitch',
        'click #enableAuto': 'enableAutoUpdate',
        'click #disableAuto': 'disableAutoUpdate',
        'click #stable-modal': 'showStableModal',
        'click #testing-modal': 'showTestingModal',
        'click #activateStable': 'activateStable',
        'click #activateTesting': 'activateTesting'
    },

    initialize: function() {
        // call initialize of base
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.update_version_info;
        this.timeLeft = 300;
        this.subscriptions = new UpdateSubscriptionCollection();
        this.dependencies.push(this.subscriptions);
        this.appliances = new ApplianceCollection();
        this.dependencies.push(this.appliances);
        this.initHandlebarHelpers();
    },

    render: function() {
        this.fetch(this.renderUpdates, this);
        return this;
    },

    renderUpdates: function() {
        var _this = this;
        $('.modal-backdrop').remove();
        $.ajax({
            url: '/api/commands/update-check',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.currentVersion = data[0];
                _this.mostRecentVersion = data[1];
                _this.changeList = data[2];
                _this.checkAutoUpdateStatus();
            },
            error: function(xhr, status, error) {}
        });
        return this;
    },

    checkAutoUpdateStatus: function() {
        var _this = this;
        $.ajax({
            url: '/api/commands/auto-update-status',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.autoUpdateEnabled = data.enabled;
                _this.renderVersionInfo();
            },
            error: function(xhr, status, error) {}
        });
        return this;
    },

    renderVersionInfo: function() {

        var stableSub = null;
        var defaultSub = null;
        this.subscriptions.each(function(s) {
            if (s.get('name') == 'Stable') {
                stableSub = s.toJSON();
            }
            if (s.get('name') == 'Testing') {
                defaultSub = s.toJSON();
            }
        });
        var currentAppliance = this.appliances.find(function(a) {
            return a.get('current_appliance') == true;
        });

        $(this.el).html(this.template({
            currentVersion: this.currentVersion,
            mostRecentVersion: this.mostRecentVersion,
            changeList: this.changeList,
            changeMap: this.changeLog(this.changeList),
            autoUpdateEnabled: this.autoUpdateEnabled,
            stableSub: stableSub,
            defaultSub: defaultSub,
            applianceId: currentAppliance.get('uuid')
        }));
        this.$('#update-modal').modal({
            keyboard: false,
            backdrop: 'static',
            show: false
        });
    },

    donateYes: function() {
        var contrib = 0;
        this.$('input[name="amount"]').val(contrib);
        this.$('#contrib-form').submit();
    },

    update: function() {
        this.$('#update-modal').modal('show');
        this.startForceRefreshTimer();
        $.ajax({
            url: '/api/commands/update',
            type: 'POST',
            dataType: 'json',
            global: false, // dont show global loading indicator
            success: function(data, status, xhr) {
                _this.checkIfUp();
            },
            error: function(xhr, status, error) {
                _this.checkIfUp();
            }
        });
    },

    checkIfUp: function() {
        var _this = this;
        this.isUpTimer = window.setInterval(function() {
            $.ajax({
                url: '/api/sm/sprobes/loadavg?limit=1&format=json',
                type: 'GET',
                dataType: 'json',
                global: false, // dont show global loading indicator
                success: function(data, status, xhr) {
                    _this.reloadWindow();
                },
                error: function(xhr, status, error) {
                    // server is not up, continue checking
                }
            });
        }, 5000);
    },

    // countdown timeLeft seconds and then force a window reload
    startForceRefreshTimer: function() {
        var _this = this;
        this.forceRefreshTimer = window.setInterval(function() {
            _this.timeLeft = _this.timeLeft - 1;
            _this.showTimeRemaining();
            if (_this.timeLeft <= 0) {
                _this.reloadWindow();
            }
        }, 1000);
    },

    showTimeRemaining: function() {
        mins = Math.floor(this.timeLeft / 60);
        sec = this.timeLeft - (mins * 60);
        sec = sec >= 10 ? '' + sec : '0' + sec;
        this.$('#time-left').html(mins + ':' + sec);
        if (mins <= 1 && !this.userMsgDisplayed) {
            this.displayUserMsg();
            this.userMsgDisplayed = true;
        }
    },

    reloadWindow: function() {
        this.clearTimers();
        this.$('#update-modal').modal('hide');
        location.reload(true);
    },

    clearTimers: function() {
        window.clearInterval(this.isUpTimer);
        window.clearInterval(this.forceRefreshTimer);
    },

    displayUserMsg: function() {
        this.$('#user-msg').show('highlight', null, 1000);
    },

    autoUpdateSwitch: function() {
        $('#auto-update-modal').modal({
            keyboard: false,
            show: false,
            backdrop: 'static'
        });
        $('#auto-update-modal').modal('show');
    },

    enableAutoUpdate: function() {
        return this.toggleAutoUpdate('enable-auto-update');
    },

    disableAutoUpdate: function() {
        return this.toggleAutoUpdate('disable-auto-update');
    },

    toggleAutoUpdate: function(updateFlag) {
        var _this = this;
        $.ajax({
            url: '/api/commands/' + updateFlag,
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.reloadWindow();
            },
            error: function(xhr, status, error) {
                // server is not up, continue checking
            }
        });
    },

    changeLog: function(logArray) {
        var changeLogArray = [];
        var issues = [];
        var nextString = [];
        var changeDescription = [];
        var contributors = [];

        for (var i = 0; i < logArray.length; i++) {
            var hashIndex = logArray[i].indexOf('#');
            var atRateIndex = logArray[i].indexOf('@');
            issues[i] = logArray[i].substring(hashIndex + 1, atRateIndex - 1);
            var namesNum = logArray[i].indexOf('@') + 1;
            changeDescription[i] = logArray[i].substring(0, hashIndex - 1);
            nextString[i] = logArray[i].substring(namesNum, logArray[i].length);
            contributors[i] = nextString[i].split(' @');
        }
        for (var k = 0; k < changeDescription.length; k++) {
            var cl = changeDescription[k];
            cl += '<a href="https://github.com/rockstor/rockstor-core/issues/';
            cl += issues[k];
            cl += '" target="_blank"> #';
            cl += issues[k];
            cl += '</a>';

            for (var j = 0; j < contributors[k].length; j++) {
                cl += '<a href="https://github.com/';
                cl += contributors[k][j];
                cl += '" target="_blank"> @';
                cl += contributors[k][j];
                cl += '</a>';
            }
            changeLogArray.push(new Handlebars.SafeString(cl));
        }
        return changeLogArray;
    },

    showStableModal: function() {
        this.$('#activate-stable').modal('show');
    },

    showTestingModal: function() {
        this.$('#activate-testing').modal('show');
    },

    activateStable: function() {
        var button = this.$('activateStable');
        if (buttonDisabled(button)) return false;
        disableButton(button);
        var activationCode = this.$('#activation-code').val();
        var _this = this;
        $.ajax({
            url: '/api/update-subscriptions/activate-stable',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify({
                'activation_code': activationCode
            }),
            success: function(data, status, xhr) {
                _this.reloadWindow();
            },
            error: function(xhr, status, error) {
                enableButton(button);
            }
        });
    },

    activateTesting: function() {
        var _this = this;
        var button = this.$('activateTesting');
        if (buttonDisabled(button)) return false;
        disableButton(button);
        console.log('Inactive testing');
        $.ajax({
            url: '/api/update-subscriptions/activate-testing',
            type: 'POST',
            dataType: 'json',
            success: function(data, status, xhr) {
                _this.reloadWindow();
            }
        });
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('is_sub_active', function(sub, options) {
            if (sub && sub.status == 'active') {
                return options.fn(this);
            }
            return options.inverse(this);
        });
        Handlebars.registerHelper('no_sub_active', function(options) {
            if (!this.defaultSub && !this.stableSub) {
                return options.fn(this);
            }
            return options.inverse(this);
        });
        Handlebars.registerHelper('update_available', function(options) {
            if (this.currentVersion != this.mostRecentVersion) {
                return options.fn(this);
            }
            return options.inverse(this);
        });
    }
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */


PoolAddDisks = RockstorWizardPage.extend({

    events: {
        'click #checkAll': 'selectAllCheckboxes',
        'click [class="diskid"]': 'clickCheckbox'
    },

    initialize: function () {
        this.disks = new DiskCollection();
        this.disks.setPageSize(100);
        this.template = window.JST.pool_resize_add_disks;
        this.disks_template = window.JST.common_disks_table;
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.disks.on('reset', this.renderDisks, this);
        this.initHandlebarHelpers();
    },

    render: function () {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        $(this.el).html(this.template({
            model: this.model.toJSON(),
            raidLevel: this.model.get('pool').get('raid')
        }));
        this.disks.fetch();
        return this;
    },

    renderDisks: function () {
        var disks = this.disks.filter(function (disk) {
            return disk.available() && disk.isSerialUsable() && disk.isRoleUsable();
        }, this);
        //convert the array elements which are backbone models/collections to JSON object
        for (var i = 0; i < disks.length; i++) {
            disks[i] = disks[i].toJSON();
        }
        this.$('#ph-disks-table').html(this.disks_template({disks: disks}));
        this.$('#add-disks-form').validate({
            rules: {
                'raid-level': {
                    required: true
                }
            },
            messages: {
                'raid-level': 'Please select a RAID level'
            }
        });
    },

    selectAllCheckboxes: function (event) {
        $('#checkAll').change(function () {
            $('input:checkbox').prop('checked', $(this).prop('checked'));
            $('input:checkbox').closest('tr').toggleClass('row-highlight', this.checked);
        });
    },

    clickCheckbox: function (event) {
        $('input:checkbox').change(function () {
            $(this).closest('tr').toggleClass('row-highlight', this.checked);
        });
    },

    /* valid() can be applied on any form element but validate() has to applied on the form.
     * valid calls validate function internally
     */
    save: function () {
        var valid = this.$('#add-disks-form').valid();
        if(!valid){
            return $.Deferred().reject();
        }
        var _this = this;
        var checked = this.$('.diskid:checked').length;
        var diskIds = [];
        this.$('.diskid:checked').each(function (i) {
            diskIds.push($(this).val());
        });
        this.model.set('diskIds', diskIds);
        if (this.model.get('raidChange')) {
            this.model.set('raidLevel', this.$('#raid-level').val());
        }
        return $.Deferred().resolve();
    },

    initHandlebarHelpers: function () {

        asJSON = function (role) {
            // Simple wrapper to test for not null and JSON compatibility,
            // returns the json object if both tests pass, else returns false.
            if (role == null) { // db default
                return false;
            }
            // try json conversion and return false if it fails
            // @todo not sure if this is redundant?
            try {
                return JSON.parse(role);
            } catch (e) {
                return false;
            }
        };

        // Identify Open LUKS container by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isRootDevice'
        Handlebars.registerHelper('isOpenLuks', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('openLUKS')) {
                // Once a LUKS container is open it has a type of crypt
                // and we attribute it the role of 'openLUKS' as a result.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        Handlebars.registerHelper('display_raid_levels', function(){
            var html = '';
            var _this = this;
            var levels = ['single', 'raid0', 'raid1', 'raid10', 'raid5', 'raid6'];
            _.each(levels, function(level) {
                if (_this.raidLevel != level) {
                    html += '<option value="' + level + '">' + level + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });

        Handlebars.registerHelper('mathHelper', function (value, options) {
            return parseInt(value) + 1;
        });

        Handlebars.registerHelper('humanReadableSize', function (diskSize) {
            return humanize.filesize(diskSize * 1024);
        });
    }
});

;PoolAddDisksRaid = RockstorWizardPage.extend({

    initialize: function() {
        this.template = window.JST.pool_resize_add_disks_raid;
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.initHandlebarHelpers();
    },

    save: function() {
        var _this = this;
        var json = this.$('#raid-change-form').getJSON();
        if (json.raidChange == 'yes') {
            this.model.set('raidChange', true);
        } else {
            this.model.set('raidChange', false);
        }
        return $.Deferred().resolve();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_poolName_raidLevel', function() {
            var html = '';
            html += this.model.get('pool').get('name') + ' is ' + this.model.get('pool').get('raid');
            return new Handlebars.SafeString(html);
        });

    }
});
;PoolResizeChoice = RockstorWizardPage.extend({

    initialize: function() {
        this.template = window.JST.pool_resize_choice;
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.initHandlebarHelpers();
    },

    events: {
        'click #change-raid': 'changeRaid',
        'click #add-disks': 'addDisks',
        'click #remove-disks': 'removeDisks'
    },

    changeRaid: function() {
        this.model.set('choice', 'raid');
        this.evAgg.trigger('nextPage');
        return false;
    },

    addDisks: function() {
        this.model.set('choice', 'add');
        this.evAgg.trigger('nextPage');
        return false;
    },

    removeDisks: function() {
        this.model.set('choice', 'remove');
        this.parent.nextPage();
        return false;
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_poolName', function() {
            var poolName = '';
            poolName = this.model.get('pool').get('name');
            return new Handlebars.SafeString(poolName);
        });

    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PoolResizeWizardView = WizardView.extend({
    initialize: function() {
        WizardView.prototype.initialize.apply(this, arguments);
        this.pages = [];
    },

    setCurrentPage: function() {
        var choice = this.model.get('choice');
        var page = null;
        if (_.isUndefined(this.pages[this.currentPageNum]) ||
            _.isNull(this.pages[this.currentPageNum])) {
            if (_.isUndefined(choice)) {
                this.pages[0] = PoolResizeChoice;
            } else if (choice == 'add') {
                this.pages[1] = PoolAddDisksRaid;
                this.pages[2] = PoolAddDisks;
                this.pages[3] = PoolResizeSummary;
                this.pages[4] = PoolRemoveDisksComplete;
            } else if (choice == 'remove') {
                this.pages[1] = PoolRemoveDisks;
                this.pages[2] = PoolResizeSummary;
                this.pages[3] = PoolRemoveDisksComplete;
            } else if (choice == 'raid') {
                this.pages[1] = PoolRaidChange;
                this.pages[2] = PoolResizeSummary;
                this.pages[3] = PoolRemoveDisksComplete;
            }
        }
        this.currentPage = new this.pages[this.currentPageNum]({
            model: this.model,
            parent: this,
            evAgg: this.evAgg
        });
    },

    lastPage: function() {
        return ((this.pages.length > 1) &&
            ((this.pages.length - 1) == this.currentPageNum));
    },

    modifyButtonText: function() {
        switch (this.currentPageNum) {
        case 0:
            this.$('#ph-wizard-buttons').hide();
            this.model.unset('choice');
            this.pages = [];
            this.setCurrentPage();
            break;
        default:
            this.$('#ph-wizard-buttons').show();
            break;
        }
        if (this.pages[this.currentPageNum] == PoolResizeSummary) {
            this.$('#next-page').html('Resize');
        } else if (this.lastPage()) {
            this.$('#prev-page').hide();
            this.$('#next-page').html('Finish');
        } else {
            this.$('#next-page').html('Next');
        }
    },

    finish: function() {
        this.parent.$('#pool-resize-raid-overlay').overlay().close();
        this.parent.render();
    },

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2015 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PoolRaidChange = RockstorWizardPage.extend({

    initialize: function() {
        this.disks = new DiskCollection();
        this.disks.setPageSize(100);
        this.template = window.JST.pool_resize_raid_change;
        this.disks_template = window.JST.common_disks_table;
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.disks.on('reset', this.renderDisks, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        $(this.el).html(this.template({
            model: this.model,
            raidLevel: this.model.get('pool').get('raid')
        }));
        this.disks.fetch();
        return this;
    },

    renderDisks: function() {
        var _this = this;
        var disks = this.disks.filter(function(disk) {
            return disk.available();
        }, this);
        this.$('#raid-change-form').validate({
            rules: {
                'raid-level': {
                    required: true
                }
            },
            messages: {
                'raid-level': 'Please select a RAID level'
            }
        });
    },

    save: function() {
        var valid = $('#raid-change-form').valid();
        if (valid) {
            var raidLevel = this.$('#raid-level').val();
            this.model.set('raidLevel', raidLevel);
            return $.Deferred().resolve();
        }
        return $.Deferred().reject();
    },


    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_raid_levels', function() {
            var html = '';
            var _this = this;
            var levels = ['single', 'raid0', 'raid1', 'raid10', 'raid5', 'raid6'];
            _.each(levels, function(level) {
                if (_this.raidLevel != level) {
                    html += '<option value="' + level + '">' + level + '</option>';
                }
            });
            return new Handlebars.SafeString(html);
        });
    }

});

;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2015 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PoolRemoveDisks = RockstorWizardPage.extend({
    events: {
        'click #checkAll': 'selectAllCheckboxes',
        'click [class="diskid"]': 'clickCheckbox'
    },

    initialize: function() {
        this.disks = new DiskCollection();
        this.disks.setPageSize(100);
        this.template = window.JST.pool_resize_remove_disks;
        this.disks_template = window.JST.common_disks_table;
        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.disks.on('reset', this.renderDisks, this);
        this.initHandlebarHelpers();
    },

    render: function() {
        RockstorWizardPage.prototype.render.apply(this, arguments);
        this.disks.fetch();
        return this;
    },

    renderDisks: function() {
        var disks = this.disks.filter(function(disk) {
            return disk.get('pool_name') == this.model.get('pool').get('name');
        }, this);
        //convert the array elements which are backbone models/collections to JSON object
        for (var i = 0; i < disks.length; i++) {
            disks[i] = disks[i].toJSON();
        }
        this.$('#ph-disks-table').html(this.disks_template({
            disks: disks
        }));
    },

    selectAllCheckboxes: function(event) {
        $('#checkAll').change(function() {
            $('input:checkbox').prop('checked', $(this).prop('checked'));
            $('input:checkbox').closest('tr').toggleClass('row-highlight', this.checked);
        });
    },

    clickCheckbox: function(event) {
        $('input:checkbox').change(function() {
            $(this).closest('tr').toggleClass('row-highlight', this.checked);
        });
    },

    save: function() {
        var _this = this;
        var checked = this.$('.diskid:checked').length;
        var diskIds = [];
        this.$('.diskid:checked').each(function(i) {
            diskIds.push($(this).val());
        });
        this.model.set('diskIds', diskIds);
        return $.Deferred().resolve();
    },

    initHandlebarHelpers: function() {

        asJSON = function (role) {
            // Simple wrapper to test for not null and JSON compatibility,
            // returns the json object if both tests pass, else returns false.
            if (role == null) { // db default
                return false;
            }
            // try json conversion and return false if it fails
            // @todo not sure if this is redundant?
            try {
                return JSON.parse(role);
            } catch (e) {
                return false;
            }
        };

        // Identify Open LUKS container by return of true / false.
        // Works by examining the Disk.role field. Based on sister handlebars
        // helper 'isRootDevice'
        Handlebars.registerHelper('isOpenLuks', function (role) {
            var roleAsJson = asJSON(role);
            if (roleAsJson == false) return false;
            // We have a json string ie non legacy role info so we can examine:
            if (roleAsJson.hasOwnProperty('openLUKS')) {
                // Once a LUKS container is open it has a type of crypt
                // and we attribute it the role of 'openLUKS' as a result.
                return true;
            }
            // In all other cases return false.
            return false;
        });

        Handlebars.registerHelper('mathHelper', function(value, options) {
            return parseInt(value) + 1;
        });
        Handlebars.registerHelper('humanReadableSize', function(diskSize) {
            return humanize.filesize(diskSize * 1024);
        });
    }
});

;PoolRemoveDisksComplete = RockstorWizardPage.extend({
    initialize: function() {
        this.template = window.JST.pool_resize_remove_disks_complete;
        this.initHandlebarHelpers();
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_breadCrumbs', function() {
            var html = '';
            if (this.model.get('choice') == 'add') {
                html += '<div>Change RAID level?</div><div>Select disks to add</div>';
            } else if (this.model.get('choice') == 'remove') {
                html += '<div>Select disks to remove</div>';
            } else if (this.model.get('choice') == 'raid') {
                html += '<div>Select RAID level and add disks</div>';
            }
            return new Handlebars.SafeString(html);
        });

    }

});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2015 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */


PoolResizeSummary = RockstorWizardPage.extend({

    initialize: function() {
        this.template = window.JST.pool_resize_summary;
        var choice = this.model.get('choice');
        var raidLevel = null;
        var diskIdtoNameMap = new Map();
        // Extract the selected disks ids and names.
        var selectedDiskIds = [];
        if (!_.isUndefined(this.model.get('diskIds'))) {
            this.model.get('diskIds').forEach(function (diskInfo) {
                var diskInfoAsObj = JSON.parse(diskInfo);
                diskIdtoNameMap.set(diskInfoAsObj.id, diskInfoAsObj.name);
                selectedDiskIds.push(diskInfoAsObj.id);
            });
        }
        this.model.set('selectedDiskIds', selectedDiskIds);
        var poolDiskIds = _.map(this.model.get('pool').get('disks'), function(disk) {
            diskIdtoNameMap.set(disk.id, disk.name);
            return disk.id;
        });
        this.model.set('diskIdtoNameMap', diskIdtoNameMap)
        if (choice == 'add') {
            this.newRaidLevel = this.model.get('raidChange') ? this.model.get('raidLevel') :
                this.model.get('pool').get('raid');
            this.proposedDiskIds = _.union(poolDiskIds, selectedDiskIds);
        } else if (choice == 'remove') {
            this.newRaidLevel = this.model.get('pool').get('raid');
            this.proposedDiskIds = _.difference(poolDiskIds, selectedDiskIds);
        } else if (choice == 'raid') {
            this.newRaidLevel = this.model.get('raidLevel');
            this.proposedDiskIds = _.union(poolDiskIds, selectedDiskIds);
        }
        // Retrieve proposed disk names from proposedDiskIds
        var proposedDisksByName = [];
        this.proposedDiskIds.forEach(function(diskId) {
            proposedDisksByName.push(diskIdtoNameMap.get(diskId))
        });

        this.newDisks = proposedDisksByName;

        RockstorWizardPage.prototype.initialize.apply(this, arguments);
        this.initHandlebarHelpers();
    },

    render: function() {
        $(this.el).html(this.template({
            model: this.model,
            poolName: this.model.get('pool').get('name'),
            raidLevel: this.model.get('pool').get('raid'),
            newRaidLevel: this.newRaidLevel,
            newDisks: this.newDisks
        }));
        return this;
    },

    save: function() {
        var _this = this;
        document.getElementById('next-page').disabled = true;
        var choice = this.model.get('choice');
        var raidLevel = null;
        if (choice == 'add') {
            raidLevel = this.model.get('raidChange') ? this.model.get('raidLevel') :
                this.model.get('pool').get('raid');
            return $.ajax({
                url: '/api/pools/' + this.model.get('pool').get('id') + '/add',
                type: 'PUT',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({
                    'disks': this.model.get('selectedDiskIds'),
                    'raid_level': raidLevel
                }),
                success: function() {
                    document.getElementById('next-page').disabled = false;
                },
                error: function(request, status, error) {}
            });
        } else if (choice == 'remove') {
            return $.ajax({
                url: '/api/pools/' + this.model.get('pool').get('id') + '/remove',
                type: 'PUT',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({
                    'disks': this.model.get('selectedDiskIds'),
                    'raid_level': this.model.get('pool').get('raid')
                }),
                success: function() {
                    document.getElementById('next-page').disabled = false;
                },
                error: function(request, status, error) {}
            });
        } else if (choice == 'raid') {
            return $.ajax({
                url: '/api/pools/' + this.model.get('pool').get('id') + '/add',
                type: 'PUT',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({
                    'disks': this.model.get('selectedDiskIds'),
                    'raid_level': this.model.get('raidLevel')
                }),
                success: function() {
                    document.getElementById('next-page').disabled = false;
                },
                error: function(request, status, error) {}
            });
        }
    },

    initHandlebarHelpers: function() {
        Handlebars.registerHelper('display_diskSet', function() {
            var html = '';
            html += _.map(this.model.get('pool').get('disks'), function(disk) {
                return disk.name;
            }).join(',');
            return new Handlebars.SafeString(html);
        });

        // potentially a display_diskSet_proposed handlebars helper

        Handlebars.registerHelper('display_breadCrumbs', function() {
            var html = '';
            if (this.model.get('choice') == 'add') {
                html += '<div>Change RAID level?</div><div>Select disks to add</div>';
            } else if (this.model.get('choice') == 'remove') {
                html += '<div>Select disks to remove</div>';
            } else if (this.model.get('choice') == 'raid') {
                html += '<div>Select RAID level and add disks</div>';
            }
            return new Handlebars.SafeString(html);
        });

    }
});

;/*
 *
 * @licstart  The following is the entire license notice for the 
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */


CpuUsageWidget = RockStorWidgetView.extend({

    initialize: function() {
        RockStorSocket.cpuWidget = io.connect('/cpu_widget', {
            'secure': true,
            'force new connection': true
        });
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.dashboard_widgets_cpuusage;
        // maximized size for shapeshift
        this.maxCols = 10;
        this.maxRows = 2;
        this.numSamples = 60;
        this.maxCpus = 8;
        this.modes = ['smode', 'umode', 'umode_nice', 'idle'];
        this.colors = ['255, 140, 0', '152, 171, 197', '138, 137, 166', '255, 255, 255'];

        this.AllCpuChart = null;
        this.AllCpuChartOptions = {
            title: {
                display: true,
                text: 'Individual CPU Usage (%)',
                padding: 5,
            },
            showLines: true,
            legend: {
                display: true,
                position: 'bottom',
                labels: {
                    boxWidth: 10,
                    padding: 10
                }
            },
            tooltips: {
                enabled: false
            },
            scales: {
                yAxes: [{
                    stacked: true,
                    ticks: {
                        fontSize: 10,
                        max: 100,
                        min: 0,
                        stepSize: 25,
                        callback: function(value) {
                            return value + '%';
                        }
                    },
                    gridLines: {
                        drawTicks: false
                    }
                }],
                xAxes: [{
                    stacked: true,
                    gridLines: {
                        display: false,
                        drawTicks: false
                    },
                    ticks: {
                        fontSize: 10,
                        maxRotation: 0,
                        autoSkip: false
                    }
                }]
            },
        };
        this.AllCpuChartData = {
            labels: [],
            datasets: [{
                label: 'smode',
                backgroundColor: [],
                borderColor: [],
                borderWidth: 1,
                data: []
            }, {
                label: 'umode',
                backgroundColor: [],
                borderColor: [],
                borderWidth: 1,
                data: []
            }, {
                label: 'umode_nice',
                backgroundColor: [],
                borderColor: [],
                borderWidth: 1,
                data: []
            }]
        };

        this.AvgCpuChart = null;
        this.AvgCpuChartOptions = {
            showLines: true,
            animation: {
                duration: 1250,
                easing: 'linear'
            },
            responsive: true,
            title: {
                display: true,
                text: 'Average CPU Usage (%)',
                padding: 5
            },
            legend: {
                display: false,
                position: 'top',
                labels: {
                    boxWidth: 10,
                    padding: 2
                }
            },
            tooltips: {
                enabled: false
            },
            scales: {
                yAxes: [{
                    id: 'cpu',
                    position: 'left',
                    gridLines: {
                        drawTicks: false
                    },
                    ticks: {
                        fontSize: 10,
                        max: 100,
                        min: 0,
                        stepSize: 25,
                        callback: function(value) {
                            return value + '%';
                        }
                    }
                }, {
                    id: 'empty',
                    position: 'right',
                    ticks: {
                        fontSize: 9,
                        beginAtZero: true,
                        min: 0,
                        max: 100,
                        stepSize: 50,
                        callback: function(value) {
                            return null;
                        }
                    },
                    gridLines: {
                        drawTicks: false
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        fontSize: 11,
                        labelString: 'Time'
                    },
                    gridLines: {
                        display: true,
                        drawTicks: false
                    },
                    ticks: {
                        fontSize: 10,
                        maxRotation: 0,
                        autoSkip: false,
                        callback: function(value) {
                            return (value.toString().length > 0 ? value : null);
                        }
                    }
                }]
            }
        };
        this.AvgCpuChartData = {
            labels: [],
            datasets: [{
                label: '',
                yAxisID: 'cpu',
                fill: false,
                lineTension: 0.2,
                backgroundColor: 'rgba(75,192,192,0.4)',
                borderColor: 'rgba(75,192,192,1)',
                borderCapStyle: 'butt',
                borderDash: [],
                borderDashOffset: 0.0,
                borderWidth: 1,
                borderJoinStyle: 'miter',
                pointBorderColor: 'rgba(75,192,192,1)',
                pointBackgroundColor: '#fff',
                pointBorderWidth: 1,
                pointHoverRadius: 0,
                pointHoverBackgroundColor: 'rgba(75,192,192,1)',
                pointHoverBorderColor: 'rgba(220,220,220,1)',
                pointHoverBorderWidth: 0,
                pointRadius: 0,
                pointHitRadius: 10,
                data: [],
            }]
        };

        this.margin = {
            top: 20,
            right: 20,
            bottom: 20,
            left: 30
        };
        this.padding = {
            top: 0,
            right: 0,
            bottom: 20,
            left: 0
        };

        if (this.maximized) {
            this.width = 500 - this.margin.left - this.margin.right;
            this.height = 200 - this.margin.top - this.margin.bottom;
        } else {
            this.width = 250 - this.margin.left - this.margin.right;
            this.height = 100 - this.margin.top - this.margin.bottom;
        }

        //Generate empty data/labels on avg cpu and all charts
        this.genAvgCpuInitData(this.numSamples);
        this.genAllCpuInitData(this.maxCpus);

    },

    genAvgCpuInitData: function(numSamples) {
        var _this = this;
        for (var i = 0; i < numSamples; i++) {
            //Create initial empty data required to have line chart right alligned
            _this.AvgCpuChartData.labels.push('');
            _this.AvgCpuChartData.datasets[0].data.push(null);
        }
    },

    genAllCpuInitData: function(maxCpus) {
        var _this = this;
        for (var i = 0; i < maxCpus; i++) {
            _this.AllCpuChartData.labels.push('');
            var current_color = '';
            _.each(_this.AllCpuChartData.datasets, function(dataset, i) {
                //define each barchar rectangle with relative modes colors
                current_color = 'rgba(' + _this.colors[_.indexOf(_this.modes, dataset.label)] + ', 0.3)';
                dataset.backgroundColor.push(current_color);
                dataset.borderColor.push(current_color);
                dataset.data.push(null);
            });

        }
    },

    render: function() {
        this.constructor.__super__.render.apply(this, arguments);
        var _this = this;
        $(this.el).html(this.template({
            modes: this.modes,
            colors: this.colors,
            height: this.defaultHeight,
            width: this.defaultWidth,
            displayName: this.displayName,
            maximized: this.maximized
        }));
        RockStorSocket.addListener(this.getData, this, 'cpuWidget:cpudata');
        return this;
    },

    getData: function(data) {
        var _this = this;
        data = data.results;

        //If our charts on first load render them on page with empty data
        if (!_this.graphRendered) {
            _this.initGraphs();
            _this.graphRendered = true;
        }

        _this.updateAvgCpuGraph(data);
        _this.updateAllCpuGraph(data);
    },

    initGraphs: function() {
        var _this = this;

        _this.AvgCpuChart = new Chart(this.$('#cpuusage-avg-chart'), {
            type: 'line',
            data: _this.AvgCpuChartData,
            options: _this.AvgCpuChartOptions
        });

        _this.AllCpuChart = new Chart(this.$('#cpuusage-all-chart'), {
            type: 'bar',
            data: _this.AllCpuChartData,
            options: _this.AllCpuChartOptions
        });
    },

    updateAvgCpuGraph: function(data) {
        var _this = this;
        //We use old getAvgCpuUsage function then
        //delete first line chart element and push new one
        //If current time is multiple of 15 secs render it
        var avgcpu = _this.getAvgCpuUsage(data);
        _this.AvgCpuChartData.datasets[0].data.shift();
        _this.AvgCpuChartData.labels.shift();
        var csecs = moment(avgcpu[0].ts).format('s');
        var label = '';
        if (csecs % 15 === 0) {
            label = csecs == '0' ? moment(avgcpu[0].ts).format('HH:mm') : moment(avgcpu[0].ts).format(':ss');
        }
        _this.AvgCpuChartData.datasets[0].data.push(100 - avgcpu[0].idle);
        _this.AvgCpuChartData.labels.push(label);
        _this.AvgCpuChart.update();
    },

    updateAllCpuGraph: function(data) {
        var _this = this;
        //If we don't have already cpu names, get it!
        if (_this.AllCpuChartData.labels[0] === '') {
            _.each(data, function(cpu, k) {
                _this.AllCpuChartData.labels[k] = cpu.name;
            });
        }
        //Loop on the bar chart dataset and update every cpu mode val for every cpu found
        _.each(_this.AllCpuChartData.datasets, function(dataset, i) {
            _.each(data, function(cpu, k) {
                dataset.data[k] = cpu[dataset.label];
            });

        });
        _this.AllCpuChart.update();
    },

    getAvgCpuUsage: function(data) {
        var _this = this;
        var tmp = _.groupBy(data, function(d) {
            return d.ts;
        });
        return _.map(_.keys(tmp), function(key) {
            var ds = tmp[key];
            if (ds.length > 0) {
                var s = _.reduce(ds, function(sum, d) {
                    return d.idle + sum;
                }, 0);
                var avg = s / ds.length;
                return {
                    idle: avg,
                    ts: key
                };
            } else {
                return {
                    idle: 0,
                    ts: key
                };
            }
        });
    },

    resize: function(event) {
        this.constructor.__super__.resize.apply(this, arguments);
        if (this.maximized) {
            this.width = 500 - this.margin.left - this.margin.right;
            this.height = 200 - this.margin.top - this.margin.bottom;

        } else {
            this.width = 250 - this.margin.left - this.margin.right;
            this.height = 100 - this.margin.top - this.margin.bottom;
        }
        this.AvgCpuChart.resize();
        this.AllCpuChart.resize();
    },

    cleanup: function() {
        if (!_.isUndefined(this.timeoutId)) {
            window.clearTimeout(this.timeoutId);
        }
        RockStorSocket.removeOneListener('cpuWidget');
    }

});

// Default configuration for cpu widget
RockStorWidgets.widgetDefs.push({
    name: 'cpuusage',
    displayName: 'CPU',
    view: 'CpuUsageWidget',
    description: 'CPU Utilization',
    defaultWidget: true,
    rows: 1,
    cols: 5,
    maxRows: 2,
    maxCols: 10,
    category: 'Compute',
    position: 3
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */


DiskUtilizationWidget = RockStorWidgetView.extend({

    initialize: function() {

        RockStorSocket.diskWidget = io.connect('/disk_widget', {
            'secure': true,
            'force new connection': true
        });
        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.dashboard_widgets_disk_utilization;
        this.diskUtilSelect = window.JST.dashboard_widgets_disk_util_select;

        Chart.defaults.global.tooltips.enabled = false;
        Chart.defaults.global.elements.line.tension = 0.2;
        Chart.defaults.global.elements.line.borderCapStyle = 'butt';
        Chart.defaults.global.elements.line.borderDash = [];
        Chart.defaults.global.elements.line.borderDashOffset = 0.0;
        Chart.defaults.global.elements.line.borderWidth = 1;
        Chart.defaults.global.elements.line.borderJoinStyle = 'miter';
        Chart.defaults.global.elements.line.fill = false;
        Chart.defaults.global.elements.point.radius = 0;
        Chart.defaults.global.elements.point.hoverRadius = 0;

        this.numTop = this.maximized ? 5 : 3;
        this.dataLength = 300;
        this.Disksfields = ['ms_ios', 'sectors_written', 'writes_completed', 'ms_writing', 'ms_reading', 'reads_completed', 'sectors_read'];
        this.Diskslabels = ['ms on I/Os', 'kB written', 'Writes', 'ms writing', 'ms reading', 'Reads', 'kB read'];
        this.TopDiskscolors = ['242, 0, 0', '36, 229, 84', '41, 108, 232', '232, 200, 41', '146, 41, 232'];
        this.SingleDiskcolors = ['7, 233, 7', '21, 124, 217', '255, 184, 7', '255, 25, 7'];

        // disks data is a map of diskname to array of values of length
        // dataLength
        // each value is of the format of the data returned by the api
        // see genEmptyDiskData for an example of this format
        this.disksData = {};
        this.disks = new DiskCollection();
        this.disks.pageSize = RockStorGlobals.maxPageSize;

        this.topDisks = [];
        this.selectedDisk = null;

        this.best_draftSort = ['reads_completed', 'writes_completed', 'sectors_read', 'sectors_written', 'ms_ios', 'ms_writing', 'ms_reading'];
        this.selectedAttr = 'best_draft';

        this.SingleDiskChart = null;
        this.SingleDiskChartOptions = {
            animation: false,
            responsive: false,
            title: {
                display: true,
                text: '',
                padding: 5,
                fontSize: 11
            },
            legend: {
                display: true,
                position: 'bottom',
                labels: {
                    boxWidth: 10,
                    padding: 5,
                    fontSize: 10
                }
            },
            scales: {
                yAxes: [{
                    id: 'IOs',
                    position: 'left',
                    scaleLabel: {
                        display: false
                    },
                    ticks: {
                        fontSize: 9,
                        beginAtZero: true,
                        min: 0
                    },
                    gridLines: {
                        drawTicks: true
                    }
                }, {
                    id: 'Data',
                    position: 'right',
                    scaleLabel: {
                        display: false
                    },
                    ticks: {
                        fontSize: 9,
                        beginAtZero: true,
                        min: 0,
                        callback: function(value) {
                            return humanize.filesize(value);
                        }
                    },
                    gridLines: {
                        drawTicks: false
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        fontSize: 11,
                        labelString: 'Time'
                    },
                    gridLines: {
                        display: true,
                        drawTicks: false
                    },
                    ticks: {
                        fontSize: 9,
                        maxRotation: 0,
                        autoSkip: false,
                        callback: function(value) {
                            return (value.toString().length > 0 ? value : null);
                        }
                    }
                }]
            }
        };
        this.SingleDiskChartData = {
            labels: [],
            datasets: [{
                label: this.Diskslabels[5],
                yAxisID: 'IOs',
                backgroundColor: 'rgba(' + this.SingleDiskcolors[0] + ', 0.4)',
                borderColor: 'rgba(' + this.SingleDiskcolors[0] + ', 1)',
                data: []
            }, {
                label: this.Diskslabels[2],
                yAxisID: 'IOs',
                backgroundColor: 'rgba(' + this.SingleDiskcolors[1] + ', 0.4)',
                borderColor: 'rgba(' + this.SingleDiskcolors[1] + ', 1)',
                data: []
            }, {
                label: this.Diskslabels[6],
                yAxisID: 'Data',
                backgroundColor: 'rgba(' + this.SingleDiskcolors[2] + ', 0.4)',
                borderColor: 'rgba(' + this.SingleDiskcolors[2] + ', 1)',
                data: []
            }, {
                label: this.Diskslabels[1],
                yAxisID: 'Data',
                backgroundColor: 'rgba(' + this.SingleDiskcolors[3] + ', 0.4)',
                borderColor: 'rgba(' + this.SingleDiskcolors[3] + ', 1)',
                data: []
            }]
        };

        this.TopDisksChart = null;
        this.TopDisksChartOptions = {
            animation: {
                duration: 1500,
                easing: 'linear'
            },
            responsive: true,
            legend: {
                display: true,
                position: 'bottom',
                labels: {
                    boxWidth: 10,
                    padding: 5,
                    fontSize: 10
                }
            },
            scale: {
                ticks: {
                    display: false,
                    min: 0,
                    max: 100,
                    stepSize: 20
                }
            }
        };
        this.TopDisksChartData = {
            labels: this.Diskslabels,
            datasets: []
        };

        this.initHandlebarHelpers();
    },

    render: function() {

        var _this = this;
        // call render of base
        this.constructor.__super__.render.apply(this, arguments);
        $(this.el).html(this.template({
            module_name: this.module_name,
            displayName: this.displayName,
            maximized: this.maximized
        }));
        if (this.maximized) this.$('#top-disks-container').css('width', '60%');

        this.$('#attr-select').change(function(event) {
            var cbox = $(event.currentTarget);
            var v = cbox.val();
            _this.selectedAttr = v;
        });

        this.disks.fetch({
            success: function(collection, response, options) {
                _this.initializeDisksData();
                _this.initTopDisksData();
                _this.initSingleDiskData();
                RockStorSocket.addListener(_this.getData, _this, 'diskWidget:top_disks');
            }
        });

        return this;
    },

    // initialize disksData with disk names and empty value arrays
    initializeDisksData: function() {

        var _this = this;
        this.disks.each(function(disk) {
            var name = disk.get('name');
            _this.disksData[name] = [];
            for (var i = 0; i < _this.dataLength; i++) {
                _this.disksData[name].push(_this.genEmptyDiskData());
            }
        });
        if (this.maximized) {
            // initialize disk-select
            this.$('#disk-details-ph').html(this.diskUtilSelect({
                disks: this.disks.toJSON()
            }));
            if (this.selectedDisk) {
                this.$('#disk-select').val(this.selectedDisk);
            }
            this.$('#disk-select').change(function(event) {
                _this.selectedDisk = _this.$('#disk-select').val();
            });
        } else {
            this.$('#disk-details-ph').html('<a href="#" class="resize-widget">Expand</a> for details');
        }

    },

    initTopDisksData: function() {

        var _this = this;
        var num_disks = Object.keys(_this.disksData).length < _this.numTop ? Object.keys(_this.disksData).length : _this.numTop;
        for (var i = 0; i < num_disks; i++) {
            var dataset = {
                label: '',
                borderWidth: 1,
                fill: true,
                borderColor: 'rgba(' + _this.TopDiskscolors[i] + ', 1)',
                backgroundColor: 'rgba(' + _this.TopDiskscolors[i] + ', 0.1)',
                pointBackgroundColor: 'rgba(' + _this.TopDiskscolors[i] + ', 1)',
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: 'rgba(' + _this.TopDiskscolors[i] + ', 1)',
                data: [0, 0, 0, 0, 0, 0, 0]
            };
            _this.TopDisksChartData.datasets.push(dataset);
        }
    },

    resizeTopDisksData: function() {

        var _this = this;
        var num_disks = Object.keys(_this.disksData).length < _this.numTop ? Object.keys(_this.disksData).length : _this.numTop;
        var disks_delta = num_disks - _this.TopDisksChartData.datasets.length;
        // When resizing Disks widget we check if expected disks number is greater
        // then current disks on chart, if so we push data to chart array else
        // we slice data
        if (disks_delta > 0) {
            var current_disks = _this.TopDisksChartData.datasets.length;
            for (var i = 0; i < disks_delta; i++) {
                var disk_index = current_disks + i;
                var dataset = {
                    label: '',
                    borderWidth: 1,
                    fill: true,
                    borderColor: 'rgba(' + _this.TopDiskscolors[disk_index] + ', 1)',
                    backgroundColor: 'rgba(' + _this.TopDiskscolors[disk_index] + ', 0.1)',
                    pointBackgroundColor: 'rgba(' + _this.TopDiskscolors[disk_index] + ', 1)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgba(' + _this.TopDiskscolors[disk_index] + ', 1)',
                    data: [0, 0, 0, 0, 0, 0, 0]
                };
                _this.TopDisksChartData.datasets.push(dataset);
            }
        } else {
            _this.TopDisksChartData.datasets = _this.TopDisksChartData.datasets.slice(0, num_disks);
        }
    },

    initSingleDiskData: function() {

        var _this = this;
        for (var i = 0; i < _this.dataLength; i++) {
            _.each(_this.SingleDiskChartData.datasets, function(dataset) {
                dataset.data.push(null);
            });
            _this.SingleDiskChartData.labels.push('');
        }
    },

    getData: function(data) {

        var _this = this;
        _this.update(data);
    },

    update: function(data) {

        var _this = this;
        _this.updateDisksData(data);
        _this.sortDisks();

        if (!_this.TopDisksgraphRendered) {
            _this.initTopDisksGraph();
            _this.TopDisksgraphRendered = true;
        }
        _this.updateTopDisksChart();

        if (_this.maximized) {
            if (!_this.SingleDiskgraphRendered) {
                _this.initSingleDiskGraph();
                _this.SingleDiskgraphRendered = true;
            }
            _this.updateSingleDiskChart();
        }
    },

    initTopDisksGraph: function() {

        var _this = this;
        _this.TopDisksChart = new Chart(this.$('#top-disks-chart'), {
            type: 'radar',
            data: _this.TopDisksChartData,
            options: _this.TopDisksChartOptions
        });
    },

    initSingleDiskGraph: function() {

        var _this = this;
        _this.SingleDiskChart = new Chart(this.$('#single-disk-chart'), {
            type: 'line',
            data: _this.SingleDiskChartData,
            options: _this.SingleDiskChartOptions
        });
    },

    updateTopDisksChart: function() {

        var _this = this;
        //If avail disks < numTop, use only avail disks
        var num_disks = Object.keys(_this.disksData).length < _this.numTop ? Object.keys(_this.disksData).length : _this.numTop;
        for (var i = 0; i < num_disks; i++) {
            var data = [];
            _.each(_this.Disksfields, function(field) {
                data.push(_this.normalizeData(field, _this.topDisks[i][field]));
            });
            _this.TopDisksChartData.datasets[i].data = data;
            _this.TopDisksChartData.datasets[i].label = _this.topDisks[i].name;
        }
        _this.TopDisksChart.update();
    },

    updateSingleDiskChart: function() {

        var _this = this;
        if (!_this.selectedDisk) {
            if (_this.topDisks.length > 0) {
                _this.selectedDisk = _this.topDisks[0].name;
            } else {
                _this.selectedDisk = _this.disks.at(0).get('name');
            }
            this.$('#disk-select').val(_this.selectedDisk);
        }
        var current_disk = _this.disksData[_this.selectedDisk];
        if (current_disk) {
            var singlediskdata = {
                reads_completed: [],
                writes_completed: [],
                sectors_read: [],
                sectors_written: [],
                ms_ios: [],
                ms_writing: [],
                ms_reading: []
            };
            var singledisklabels = [];

            for (var i = 0; i < _this.dataLength; i++) {
                _.each(singlediskdata, function(dataval, datakey) {
                    var multiplier = datakey.indexOf('sectors') > -1 ? 512 : 1;
                    singlediskdata[datakey].push(current_disk[i][datakey] * multiplier);
                });
                var csecs = moment(current_disk[i].ts).format('s');
                var label = '';
                if (csecs % 60 === 0) {
                    label = moment(current_disk[i].ts).format('HH:mm');
                }
                singledisklabels.push(label);
            }
            var msios = _.reduce(singlediskdata.ms_ios, function(s, n) {
                return s + n;
            }, 0) / singlediskdata.ms_ios.length;
            var msw = _.reduce(singlediskdata.ms_writing, function(s, n) {
                return s + n;
            }, 0) / singlediskdata.ms_writing.length;
            var msr = _.reduce(singlediskdata.ms_reading, function(s, n) {
                return s + n;
            }, 0) / singlediskdata.ms_reading.length;
            var title = ': Avg I/Os: ' + msios.toFixed(2) + 'ms - ';
            title += 'Avg writing: ' + msw.toFixed(2) + 'ms - ';
            title += 'Avg reading: ' + msr.toFixed(2) + 'ms :';
            delete singlediskdata.ms_ios;
            delete singlediskdata.ms_writing;
            delete singlediskdata.ms_reading;
            _.each(_.values(singlediskdata), function(val, index) {
                _this.SingleDiskChartData.datasets[index].data = val;
            });
            _this.SingleDiskChart.options.title.text = title;
            _this.SingleDiskChartData.labels = singledisklabels;
            _this.SingleDiskChart.update();
        }
    },

    //Chart.js radar chart don't have multiple scales
    //so we have to normalize our data
    //data normalization has new_x = (x - x_min) / (x_max -x_min) and returns x [0..1]
    //we assume our x_min = 0, so new_x = x /x_max
    normalizeData: function(field, val) {

        var _this = this;
        var val_max = _.max(_.pluck(_this.topDisks, field));
        var new_val = val == 0 ? 0 : (val * 100 / val_max).toFixed(2); //we use a 0..100 range with 2 decimals
        return new_val;
    },

    sortDisks: function() {

        var _this = this;
        var tmp = _.map(_.keys(_this.disksData), function(k) {
            return _this.disksData[k][_this.dataLength - 1];
        });

        var sort_attr = _this.selectedAttr;
        if (sort_attr == 'best_draft') {
            var selected_top = [];
            for (var i = 0; i < Object.keys(tmp).length; i++) {
                _.each(_this.best_draftSort, function(d) {
                    var sorted = _.sortBy(tmp, function(k) {
                        return k[d];
                    }).reverse();
                    if (!_.contains(selected_top, sorted[i].name) && selected_top.length < _this.numTop) {
                        selected_top.push(sorted[i].name);
                    }
                });
            }
            var local_topdisks = [];
            _.each(selected_top, function(disk) {
                _.each(tmp, function(d) {
                    if (d.name == disk) local_topdisks.push(d);
                });
            });
            _this.topDisks = local_topdisks;
        } else {
            _this.topDisks = _.sortBy(tmp, function(d) {
                return d[sort_attr];
            }).reverse();
        }
    },

    updateDisksData: function(data) {

        var _this = this;
        _.each(data, function(d) {
            _this.disksData[d.name].push(d);
            _this.disksData[d.name].shift();
        });
    },

    genEmptyDiskData: function() {
        // empty disk data
        return {
            'reads_completed': 0,
            'reads_merged': 0,
            'sectors_read': 0,
            'ms_reading': 0,
            'writes_completed': 0,
            'writes_merged': 0,
            'sectors_written': 0,
            'ms_writing': 0,
            'ios_progress': 0,
            'ms_ios': 0,
            'weighted_ios': 0,
            'ts': ''
        };
    },

    resize: function(event) {

        var _this = this;
        this.constructor.__super__.resize.apply(this, arguments);
        // maximum number of top disks to display
        this.numTop = this.maximized ? 5 : 3;
        if (this.maximized) {
            this.$('#disk-details-ph').html(this.diskUtilSelect({
                disks: this.disks.toJSON()
            }));
            if (this.selectedDisk) {
                this.$('#disk-select').val(this.selectedDisk);
            }
            this.$('#disk-select').change(function(event) {
                _this.selectedDisk = _this.$('#disk-select').val();
            });
            this.$('#top-disks-container').css('width', '60%');
            this.$('#single-disk-chart').css('width', '100%');
            this.$('#single-disk-chart').css('height', '100%');
            this.$('#single-disk-chart').width = this.$('#single-disk-chart').offsetWidth;
            this.$('#single-disk-chart').height = this.$('#single-disk-chart').offsetHeight;
        } else {
            this.$('#top-disks-container').css('width', '70%');
            _this.SingleDiskgraphRendered = false;
            this.$('#disk-details-ph').html('<a href="#" class="resize-widget">Expand</a> for details');
        }
        _this.resizeTopDisksData();
        _this.TopDisksChart.resize();
    },

    cleanup: function() {

        RockStorSocket.removeOneListener('diskWidget');
    },

    initHandlebarHelpers: function() {

        var _this = this;

        Handlebars.registerHelper('genAttrSelect', function() {

            var html = '<option value="best_draft" selected>Best Draft</option>';
            _.each(_this.Disksfields, function(field, index) {
                html += '<option value="' + field + '">' + _this.Diskslabels[index] + '</option>';
            });
            return new Handlebars.SafeString(html);
        });
    }

});

RockStorWidgets.widgetDefs.push({
    name: 'disk_utilization',
    displayName: 'Disk Activity',
    view: 'DiskUtilizationWidget',
    description: 'Display disk activity',
    defaultWidget: true,
    rows: 1,
    cols: 5,
    maxRows: 2,
    maxCols: 10,
    category: 'Storage',
    position: 1
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

MemoryUtilizationWidget = RockStorWidgetView.extend({

    initialize: function() {
        RockStorSocket.memoryWidget = io.connect('/memory_widget', {
            'secure': true,
            'force new connection': true
        });
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.dashboard_widgets_memory_utilization;
        this.numSamples = 60;
        this.modes = ['used', 'cached', 'buffers', 'free'];
        this.colors = ['251, 106, 74', '252, 187, 61', '123, 204, 196', '204, 235, 197', '4, 214, 214'];

        //Chart.js Network Widget default options
        Chart.defaults.global.tooltips.enabled = false;
        Chart.defaults.global.elements.line.tension = 0.2;
        Chart.defaults.global.elements.line.borderCapStyle = 'butt';
        Chart.defaults.global.elements.line.borderDash = [];
        Chart.defaults.global.elements.line.borderDashOffset = 0.0;
        Chart.defaults.global.elements.line.borderWidth = 1;
        Chart.defaults.global.elements.rectangle.borderWidth = 1;
        Chart.defaults.global.elements.line.borderJoinStyle = 'miter';
        Chart.defaults.global.elements.point.radius = 0;
        Chart.defaults.global.elements.point.hoverRadius = 0;

        //Define MemoryChart object with options and data structure
        this.MemoryChart = null;

        this.MemoryChartOptions = {
            showLines: true,
            animation: {
                duration: 1250,
                easing: 'linear'
            },
            responsive: true,
            title: {
                display: true,
                text: 'Memory Usage (%)',
                padding: 5,
            },
            legend: {
                display: true,
                position: 'bottom',
                labels: {
                    boxWidth: 10,
                    padding: 5,
                    fontSize: 10
                }
            },
            scales: {
                yAxes: [{
                    id: 'memory',
                    position: 'left',
                    stacked: true,
                    ticks: {
                        fontSize: 10,
                        beginAtZero: true,
                        min: 0,
                        max: 100,
                        stepSize: 50,
                        callback: function(value) {
                            return value + ' %';
                        }
                    },
                    gridLines: {
                        drawTicks: false
                    }
                }, {
                    id: 'empty',
                    position: 'right',
                    ticks: {
                        fontSize: 9,
                        beginAtZero: true,
                        min: 0,
                        max: 100,
                        stepSize: 50,
                        callback: function(value) {
                            return null;
                        }
                    },
                    gridLines: {
                        drawTicks: false
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        fontSize: 11,
                        labelString: 'Time'
                    },
                    gridLines: {
                        display: false,
                        drawTicks: false,
                        tickMarkLength: 2
                    },
                    ticks: {
                        fontSize: 10,
                        maxRotation: 0,
                        autoSkip: false,
                        callback: function(value) {
                            return (value.toString().length > 0 ? value : null);
                        }
                    }
                }]
            }
        };

        this.MemoryChartData = {
            labels: [],
            datasets: [{
                label: this.modes[0],
                yAxisID: 'memory',
                fill: true,
                backgroundColor: 'rgba(' + this.colors[0] + ', 1)',
                borderColor: 'rgba(' + this.colors[0] + ', 1)',
                data: []
            }, {
                label: this.modes[1],
                yAxisID: 'memory',
                fill: true,
                backgroundColor: 'rgba(' + this.colors[1] + ', 1)',
                borderColor: 'rgba(' + this.colors[1] + ', 1)',
                data: []
            }, {
                label: this.modes[2],
                yAxisID: 'memory',
                fill: true,
                backgroundColor: 'rgba(' + this.colors[2] + ', 1)',
                borderColor: 'rgba(' + this.colors[2] + ', 1)',
                data: []
            }, {
                label: this.modes[3],
                yAxisID: 'memory',
                fill: true,
                backgroundColor: 'rgba(' + this.colors[3] + ', 1)',
                borderColor: 'rgba(' + this.colors[3] + ', 1)',
                data: []
            }]
        };

        this.SwapChart = null;

        this.SwapChartOptions = {
            title: {
                display: true,
                text: 'Swap Usage',
                padding: 5,
            },
            showLines: true,
            legend: {
                display: true,
                position: 'bottom',
                labels: {
                    boxWidth: 10,
                    padding: 5,
                    fontSize: 10
                }
            },
            tooltips: {
                enabled: false
            },
            scales: {
                yAxes: [{
                    ticks: {
                        fontSize: 10,
                        callback: function(value) {
                            return null;
                        }
                    },
                    gridLines: {
                        display: false,
                        zeroLineWidth: 0,
                        drawTicks: false,
                        padding: 0
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: false,
                        fontSize: 1,
                        labelString: ''
                    },
                    gridLines: {
                        display: false,
                        drawTicks: false,
                        tickMarkLength: 0
                    },
                    ticks: {
                        fontSize: 10,
                        min: 0,
                        maxTicksLimit: 2,
                        autoSkip: false,
                        padding: 0,
                        callback: function(value) {
                            return (value > 0 ? humanize.filesize(value) : null);
                        }
                    }
                }]
            },
        };

        this.SwapChartData = {
            labels: [''],
            datasets: [{
                label: '',
                backgroundColor: 'rgba(' + this.colors[4] + ', 0.2)',
                borderColor: 'rgba(' + this.colors[4] + ', 1)',
                data: [0]
            }]
        };

        this.margin = {
            top: 20,
            right: 20,
            bottom: 20,
            left: 30
        };
        this.padding = {
            top: 0,
            right: 0,
            bottom: 20,
            left: 0
        };

        if (this.maximized) {
            this.width = 500 - this.margin.left - this.margin.right;
            this.height = 200 - this.margin.top - this.margin.bottom;
        } else {
            this.width = 250 - this.margin.left - this.margin.right;
            this.height = 100 - this.margin.top - this.margin.bottom;
        }
    },

    render: function() {

        this.constructor.__super__.render.apply(this, arguments);
        $(this.el).html(this.template({
            module_name: this.module_name,
            displayName: this.displayName,
            maximized: this.maximized
        }));
        RockStorSocket.addListener(this.getData, this, 'memoryWidget:memory');
        return this;
    },

    getData: function(data) {

        var _this = this;
        data = data.results[0];
        if (!_this.graphRendered) {
            _this.genMemoryInitData(data);
            _this.initGraph();
            _this.graphRendered = true;
        } else {
            _this.updateMemoryChart(data);
            _this.updateSwapChart(data);
        }

    },

    genMemoryInitData: function(data) {
        var _this = this;
        for (var i = 0; i < _this.numSamples; i++) {
            _.each(_this.MemoryChartData.datasets, function(d) {
                d.data.push(null);
            });
            _this.MemoryChartData.labels.push('');
        }
    },

    initGraph: function() {

        var _this = this;

        _this.MemoryChart = new Chart(this.$('#memory-chart'), {
            type: 'line',
            data: _this.MemoryChartData,
            options: _this.MemoryChartOptions
        });

        _this.SwapChart = new Chart(this.$('#swap-chart'), {
            type: 'horizontalBar',
            data: _this.SwapChartData,
            options: _this.SwapChartOptions
        });
    },

    dataToPercent: function(data) {

        var _this = this;
        var newdata = [];
        _.each(_this.modes, function(d) {
            newdata.push(data[d] * 100 / data.total);
        });
        newdata[0] = 100 - newdata[1] - newdata[2] - newdata[3];
        return newdata;
    },

    updateMemoryChart: function(data) {

        var _this = this;
        var newMemoryvalues = _this.dataToPercent(data);
        _.each(_this.modes, function(d, i) {
            _this.MemoryChartData.datasets[i].data.shift();
            _this.MemoryChartData.datasets[i].data.push(newMemoryvalues[i]);
            _this.MemoryChartData.datasets[i].label = d + ' ' + newMemoryvalues[i].toFixed(2) + ' %';
        });
        var csecs = moment(data.ts).format('s');
        var label = '';
        if (csecs % 15 === 0) {
            label = csecs == '0' ? moment(data.ts).format('HH:mm') : moment(data.ts).format(':ss');
        }
        _this.MemoryChartData.labels.shift();
        _this.MemoryChartData.labels.push(label);
        _this.MemoryChart.update();
    },

    updateSwapChart: function(data) {

        var _this = this;
        var swap_free = data.swap_free * 1024;
        var swap_total = data.swap_total * 1024;
        var swap_used = swap_total - swap_free;
        var swap_used_per = (swap_used * 100 / swap_total).toFixed(2);
        var swap_label = 'Used ' + swap_used_per + ' % (' + humanize.filesize(swap_used) + ' / ' + humanize.filesize(swap_total) + ')';

        _this.SwapChartData.datasets[0].data = [swap_used];
        _this.SwapChartData.datasets[0].label = swap_label;
        _this.SwapChart.config.options.scales.xAxes[0].ticks.max = swap_total;
        _this.SwapChart.update();

    },

    cleanup: function() {

        RockStorSocket.removeOneListener('memoryWidget');
    },

    resize: function() {

        this.constructor.__super__.resize.apply(this, arguments);
        if (this.maximized) {
            this.width = 500 - this.margin.left - this.margin.right;
            this.height = 240 - this.margin.top - this.margin.bottom;
        } else {
            this.width = 250 - this.margin.left - this.margin.right;
            this.height = 120 - this.margin.top - this.margin.bottom;
        }

        this.MemoryChart.resize();
        this.SwapChart.resize();

    }

});

RockStorWidgets.widgetDefs.push({
    name: 'memory_utilization',
    displayName: 'Memory',
    view: 'MemoryUtilizationWidget',
    description: 'Display memory utilization',
    defaultWidget: true,
    rows: 1,
    cols: 5,
    maxRows: 2,
    maxCols: 10,
    category: 'Compute',
    position: 4
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

NetworkUtilizationWidget = RockStorWidgetView.extend({

    initialize: function() {
        RockStorSocket.networkWidget = io.connect('/network_widget', {
            'secure': true,
            'force new connection': true
        });
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.dashboard_widgets_network_utilization;
        this.valuesTemplate = window.JST.dashboard_widgets_network_util_values;
        this.InterfacesBuffers = {};
        this.networkInterfaces = new NetworkDeviceCollection();
        this.networkInterfaces.on('reset', this.getInitialData, this);
        this.selectedInterface = null;
        this.numSamples = 180;
        this.colors = ['18, 36, 227', '242, 88, 5', '4, 214, 214', '245, 204, 115'];
        this.netDataFields = ['kb_rx', 'kb_tx', 'packets_rx', 'packets_tx'];
        this.netDataLabels = ['Data rec', 'Data sent', 'Packets rec', 'Packets sent'];

        //Chart.js Network Widget default options
        Chart.defaults.global.tooltips.enabled = false;
        Chart.defaults.global.elements.line.tension = 0.2;
        Chart.defaults.global.elements.line.borderCapStyle = 'butt';
        Chart.defaults.global.elements.line.borderDash = [];
        Chart.defaults.global.elements.line.borderDashOffset = 0.0;
        Chart.defaults.global.elements.line.borderWidth = 1;
        Chart.defaults.global.elements.line.borderJoinStyle = 'miter';
        Chart.defaults.global.elements.line.fill = false;
        Chart.defaults.global.elements.point.radius = 0;
        Chart.defaults.global.elements.point.hoverRadius = 0;

        //Ddefine NetworkChart object with options and data structure
        this.NetworkChart = null;

        this.NetworkChartOptions = {
            showLines: true,
            animation: false,
            responsive: true,
            legend: {
                display: false,
                position: 'bottom',
                labels: {
                    boxWidth: 8,
                    padding: 2,
                    fontSize: 10
                }
            },
            scales: {
                yAxes: [{
                    id: 'Data',
                    position: 'left',
                    scaleLabel: {
                        display: true,
                        fontSize: 11,
                        labelString: 'Data'
                    },
                    ticks: {
                        fontSize: 9,
                        beginAtZero: true,
                        min: 0,
                        callback: function(value) {
                            return humanize.filesize(value);
                        }
                    },
                    gridLines: {
                        drawTicks: false
                    }
                }, {
                    id: 'Packets',
                    position: 'right',
                    scaleLabel: {
                        display: true,
                        fontSize: 11,
                        labelString: 'Packets'
                    },
                    ticks: {
                        fontSize: 9,
                        beginAtZero: true,
                        min: 0
                    },
                    gridLines: {
                        drawTicks: false
                    }
                }],
                xAxes: [{
                    scaleLabel: {
                        display: true,
                        fontSize: 11,
                        labelString: 'Time'
                    },
                    gridLines: {
                        display: true,
                        drawTicks: false
                    },
                    ticks: {
                        fontSize: 9,
                        maxRotation: 0,
                        autoSkip: false,
                        callback: function(value) {
                            return (value.toString().length > 0 ? value : null);
                        }
                    }
                }]
            }
        };

        this.NetworkChartData = {
            labels: [],
            datasets: [{
                label: this.netDataLabels[0],
                yAxisID: 'Data',
                backgroundColor: 'rgba(' + this.colors[0] + ', 0.4)',
                borderColor: 'rgba(' + this.colors[0] + ', 1)',
                data: []
            }, {
                label: this.netDataLabels[1],
                yAxisID: 'Data',
                backgroundColor: 'rgba(' + this.colors[1] + ', 0.4)',
                borderColor: 'rgba(' + this.colors[1] + ', 1)',
                data: []
            }, {
                label: this.netDataLabels[2],
                yAxisID: 'Packets',
                backgroundColor: 'rgba(' + this.colors[2] + ', 0.4)',
                borderColor: 'rgba(' + this.colors[2] + ', 1)',
                data: []
            }, {
                label: this.netDataLabels[3],
                yAxisID: 'Packets',
                backgroundColor: 'rgba(' + this.colors[3] + ', 0.4)',
                borderColor: 'rgba(' + this.colors[3] + ', 1)',
                data: []
            }]
        };

    },

    getInitialData: function() {

        var _this = this;
        var niselect = this.$('#interface-select');
        this.networkInterfaces.each(function(ni, i) {
            var opt = $('<option/>');
            opt.val(ni.get('name'));
            opt.text(ni.get('name'));
            if (i == 0) {
                opt.attr({
                    selected: 'selected'
                });
            }
            niselect.append(opt);
        });
        _this.genEmptyNetworkChartData(this.numSamples);
        this.selectedInterface = this.networkInterfaces.at(0).get('name');
        //Create Interfaces Buffers and set initial data to empty vals
        _this.networkInterfaces.each(function(ni) {
            _this.InterfacesBuffers[ni.get('name')] = [];
        });
        _.each(_.keys(_this.InterfacesBuffers), function(d) {
            for (var k = 0; k < _this.numSamples; k++) {
                _this.InterfacesBuffers[d].push(_this.genEmptyDataBuffer());
            }
        });
        _this.InterfacesBuffers.labels = _this.NetworkChartData.labels;
        RockStorSocket.addListener(_this.getData, _this, 'networkWidget:network');
    },

    render: function() {

        var _this = this;
        this.constructor.__super__.render.apply(this, arguments);
        $(this.el).html(this.template({
            module_name: this.module_name,
            displayName: this.displayName,
            maximized: this.maximized
        }));
        if (this.maximized) {
            this.$('#network-util-values-ph').html(this.valuesTemplate());
        }
        this.$('#interface-select').change(function(event) {
            _this.selectedInterface = $(event.currentTarget).val();
        });
        _this.networkInterfaces.fetch();
        return this;
    },

    getData: function(data) {

        var _this = this;
        if (!_this.graphRendered) {
            _this.initGraphs();
            _this.graphRendered = true;
        }

        _.each(data.results, function(d, index) {
            _this.InterfacesBuffers[d.device].shift();
            _this.InterfacesBuffers[d.device].push(d);
        });

        var interfaceBuffer = _this.InterfacesBuffers[_this.selectedInterface];
        _this.updateNetworkChart(interfaceBuffer);

    },

    initGraphs: function() {

        var _this = this;
        _this.NetworkChart = new Chart(this.$('#network-chart'), {
            type: 'line',
            data: _this.NetworkChartData,
            options: _this.NetworkChartOptions
        });
        this.$('#network-util-legend').html(_this.genNetworkChartLegend());
    },

    updateNetworkChart: function(interfaceBuffer) {

        var _this = this;
        var newData = _this.clearInterfaceData(interfaceBuffer);
        _.each(newData, function(val, i) {
            _this.NetworkChartData.datasets[i].data = newData[i];
        });

        var currentData = null;
        if (interfaceBuffer.length > 0) {
            currentData = interfaceBuffer[interfaceBuffer.length - 1];
        }

        _this.InterfacesBuffers.labels.shift();
        var csecs = moment(currentData.ts).format('s');
        var label = '';
        if (csecs % 60 === 0) {
            label = csecs == '0' ? moment(currentData.ts).format('HH:mm') : moment(currentData.ts).format(':ss');
        }
        _this.InterfacesBuffers.labels.push(label);
        _this.NetworkChartData.labels = _this.InterfacesBuffers.labels;
        _this.NetworkChart.update();

        if (this.maximized) {
            this.$('#data-rec').html(humanize.filesize(currentData['kb_rx']));
            this.$('#packets-rec').html(currentData['packets_rx']);
            this.$('#errors-rec').html(currentData['errs_rx']);
            this.$('#drop-rec').html(currentData['drop_rx']);
            this.$('#data-sent').html(humanize.filesize(currentData['kb_tx']));
            this.$('#packets-sent').html(currentData['packets_tx']);
            this.$('#errors-sent').html(currentData['errs_tx']);
            this.$('#drop-sent').html(currentData['drop_tx']);
        }
    },

    clearInterfaceData: function(interfaceBuffer) {
        var _this = this;
        var new_data = [];
        var kb_rx = [];
        var kb_tx = [];
        var packets_rx = [];
        var packets_tx = [];
        _.each(interfaceBuffer, function(d, i) {
            kb_rx.push(d['kb_rx']);
            kb_tx.push(d['kb_tx']);
            packets_rx.push(d['packets_rx']);
            packets_tx.push(d['packets_tx']);
        });

        new_data.push(kb_rx);
        new_data.push(kb_tx);
        new_data.push(packets_rx);
        new_data.push(packets_tx);

        return new_data;
    },

    genEmptyNetworkChartData: function(numSamples) {

        var _this = this;
        //Create initial empty data required to have line chart right alligned
        for (var i = 0; i < numSamples; i++) {
            _this.NetworkChartData.labels.push('');
            for (var x = 0; x < _this.NetworkChartData.datasets.length; x++) {
                _this.NetworkChartData.datasets[x].data.push(null);
            }
        }
    },

    genNetworkChartLegend: function() {

        var _this = this;
        var legend = '<ul style="list-style-type: none; display: inline;">';
        _.each(_this.NetworkChartData.datasets, function(dataset, index) {
            legend += '<li style="float: left;"><span style="background-color: ' + dataset.backgroundColor + '; ';
            legend += 'border-style: solid; border-color: ' + dataset.borderColor + '; ';
            legend += 'border-width: 1px; display: inline; width: 10px; height: 10px; float: left; margin: 2px;"></span>';
            legend += dataset.label + '</li>';
            if (index == 1) {
                legend += '<br/>';
            }
        });
        legend += '</ul>';
        return legend;
    },

    genEmptyDataBuffer: function() {

        return {
            'id': 0,
            'kb_rx': null,
            'packets_rx': null,
            'errs_rx': 0,
            'drop_rx': 0,
            'fifo_rx': 0,
            'frame': 0,
            'compressed_rx': 0,
            'multicast_rx': 0,
            'kb_tx': null,
            'packets_tx': null,
            'errs_tx': 0,
            'drop_tx': 0,
            'fifo_tx': 0,
            'colls': 0,
            'carrier': 0,
            'compressed_tx': 0,
            'ts': ''
        };
    },

    resize: function(event) {
        this.constructor.__super__.resize.apply(this, arguments);
        if (this.maximized) {
            this.$('#network-util-values-ph').html(this.valuesTemplate());
        } else {
            this.$('#network-util-values-ph').empty();
        }
        this.NetworkChart.resize();
    },

    cleanup: function() {
        RockStorSocket.removeOneListener('networkWidget');
    }

});

RockStorWidgets.widgetDefs.push({
    name: 'network',
    displayName: 'Network',
    view: 'NetworkUtilizationWidget',
    description: 'Display network utilization',
    defaultWidget: true,
    rows: 1,
    cols: 5,
    maxRows: 2,
    maxCols: 10,
    category: 'Network',
    position: 5
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2013-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

PoolUsageWidget = RockStorWidgetView.extend({

    initialize: function() {

        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.dashboard_widgets_pool_usage;
        this.pools = new PoolCollection();
        this.pools.pageSize = RockStorGlobals.maxPageSize;
        this.numTop = 10;
    },

    render: function() {

        var _this = this;
        // call render of base
        this.constructor.__super__.render.apply(this, arguments);
        $(this.el).html(this.template({
            module_name: this.module_name,
            displayName: this.displayName,
            maximized: this.maximized
        }));
        this.pools.fetch({
            success: function(collection, response, options) {

                _this.setData();
                _this.setGraphDimensions();
                _this.renderPools();
            }
        });

        return this;
    },

    setData: function() {

        var _this = this;
        _this.data = this.pools.sortBy(function(p) {
            return p.get('name');
        }).slice(0, this.numTop);
        _this.data.map(function(d) {
            var size = d.get('size');
            var bytesFree = d.get('free');
            var bytesUsed = size - bytesFree;
            var percentUsed = 100 * bytesUsed / size;
            d.set({
                'bytesFree': bytesFree,
                'bytesUsed': bytesUsed,
                'percentUsed': percentUsed
            });
        });
    },

    setGraphDimensions: function() {

        var _this = this;
        _this.barHeight = _this.maximized ? 40 : 18;
        _this.barWidth = _this.maximized ? 440 : 190;
        _this.valign = _this.maximized ? 10 : 0;
    },

    renderPools: function() {

        var _this = this;
        _.each(_this.data, function(d) {
            var html = _this.buildProgressbar();
            this.$('#pool-usage-graph').append(html);
        });

        this.$('.pused').each(function(index) {
            $(this).text(_this.data[index].get('percentUsed').toFixed(2) + '%');
        });
        var truncate = _this.maximized ? 100 : 12;
        this.$('.progress-animate').each(function(index) {
            $(this).find('span')
                .text(humanize.truncatechars(_this.data[index].get('name'), truncate) +
                    '(' + humanize.filesize(_this.data[index].get('bytesUsed') * 1024) +
                    '/' + humanize.filesize(_this.data[index].get('bytesFree') * 1024) +
                    ')');
            $(this).animate({
                width: _this.data[index].get('percentUsed').toFixed(2) + '%'
            }, 1000);
        });
    },

    buildProgressbar: function() {

        var _this = this;
        var percent_div = {
            class: 'pused',
            style: 'font-size: 10px; text-align: right; padding-right: 5px; display: table-cell; width: 50px; vertical-align: middle;'
        };
        var progressbar_container = {
            class: 'progress',
            style: 'display: inline-block; margin: 0px; position: relative; height: ' + _this.barHeight + 'px; width: ' + _this.barWidth + 'px;'
        };
        var progressbars_defaults = {
            class: 'progress-bar progress-animate',
            role: 'progressbar',
            style: 'width: 0%; -webkit-transition: none !important; transition: none !important;'
        };
        var progressbar_span = {
            style: 'font-size: 10px; position: absolute; color: black; right: 5px; top: ' + _this.valign + 'px'
        };

        var html = '<div style="display: table;"><div class="' + percent_div['class'] + '" style="' + percent_div['style'] + '"></div>';
        html += '<div class="' + progressbar_container['class'] + '" style="' + progressbar_container['style'] + '">';
        html += '<div class="' + progressbars_defaults['class'] + '" style="' + progressbars_defaults['style'] + '" ';
        html += 'role="' + progressbars_defaults['role'] + '">';
        html += '<span style="' + progressbar_span['style'] + '"></span></div></div></div>';

        return html;
    },

    resize: function(event) {

        var _this = this;
        this.constructor.__super__.resize.apply(this, arguments);
        _this.$('#pool-usage-graph').empty();
        _this.setGraphDimensions();
        _this.renderPools();
    }
});

RockStorWidgets.widgetDefs.push({
    name: 'pool_usage',
    displayName: 'Pool Capacity and Usage',
    view: 'PoolUsageWidget',
    description: 'Display pool usage',
    defaultWidget: true,
    rows: 1,
    cols: 5,
    maxRows: 2,
    maxCols: 10,
    category: 'Storage',
    position: 3,
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

StorageMetricsWidget = RockStorWidgetView.extend({

    initialize: function() {

        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.dashboard_widgets_storage_metrics;
        this.legendTemplate = window.JST.dashboard_widgets_storage_metrics_legend;
        // Dependencies
        this.disks = new DiskCollection();
        this.pools = new PoolCollection();
        this.shares = new ShareCollection();
        this.disks.pageSize = RockStorGlobals.maxPageSize;
        this.shares.pageSize = RockStorGlobals.maxPageSize;
        this.pools.pageSize = RockStorGlobals.maxPageSize;
        this.dependencies.push(this.disks);
        this.dependencies.push(this.pools);
        this.dependencies.push(this.shares);

        this.data = [];
        this.colors = [{
            Used: '250, 198, 112',
            Allocated: '11, 214, 227',
            Provisioned: '145, 191, 242'
        }, {
            Capacity: '250, 232, 202',
            'Raid Overhead': '176, 241, 245',
            Free: '228, 237, 247'
        }];

        //Chart.js Storage Metrics Widget default options
        Chart.defaults.global.tooltips.enabled = false;
        Chart.defaults.global.elements.rectangle.borderWidth = 1;

        this.StorageMetricsChart = null;
        this.StorageMetricsChartOptions = {
            title: {
                display: false,
            },
            showLines: false,
            legend: {
                display: false,
            },
            tooltips: {
                enabled: false
            },
            hover: {
                animationDuration: 0
            },
            animation: {
                duration: 1000,
                onComplete: function() {

                    var ctx = this.chart.ctx;
                    var font_size = 12;
                    var labels = ['Shares', 'Pools', 'Disks'];
                    ctx.font = Chart.helpers.fontString(font_size,
                        Chart.defaults.global.defaultFontStyle,
                        Chart.defaults.global.defaultFontFamily);
                    ctx.fillStyle = '#000000';
                    ctx.textBaseline = 'top';
                    _.each(this.data.datasets, function(dataset, index, datasets) {
                        ctx.textAlign = (index % 2 === 0) ? 'left' : 'right';

                        for (var i = 0; i < dataset.data.length; i++) {
                            var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;
                            var x_pos = (index % 2 === 0) ? model.base + 1 : model.x - 1;
                            var y_pos = (index % 2 === 0) ? model.y + model.height / 2 - font_size - 2 : model.y - model.height / 2 + 2;
                            var label = humanize.filesize(dataset.data[i]);
                            if (index % 2 === 0) {
                                var pct = datasets[0].data[i] * 100 / (datasets[0].data[i] + datasets[1].data[i]);
                                label += ' (' + pct.toFixed(2) + '%)';
                                ctx.save();
                                ctx.textAlign = 'center';
                                ctx.translate(model.base - font_size, model.y);
                                ctx.rotate(-0.5 * Math.PI);
                                ctx.fillText(labels[i], 0, 0);
                                ctx.restore();
                            }
                            ctx.fillText(label, x_pos, y_pos);

                        }
                    });
                }
            },
            scales: {
                yAxes: [{
                    stacked: true,
                    ticks: {
                        fontSize: 9,
                        minRotation: 60,
                    },
                    gridLines: {
                        display: false,
                        zeroLineWidth: 0,
                        drawTicks: true,
                        offsetGridLines: true
                    }
                }],
                xAxes: [{
                    stacked: true,
                    gridLines: {
                        display: false,
                        drawTicks: false,
                        tickMarkLength: 0
                    },
                    ticks: {
                        fontSize: 10,
                        min: 0,
                        maxTicksLimit: 2,
                        autoSkip: false,
                        padding: 0,
                        callback: function(value) {
                            return (value > 0 ? humanize.filesize(value) : null);
                        }
                    }
                }]
            },
        };

        this.StorageMetricsChartData = {
            labels: ['', '', ''],
            datasets: [{
                fill: true,
                backgroundColor: this.setColors(0, 0.8),
                borderColor: this.setColors(0, 1),
                data: []
            }, {
                fill: true,
                backgroundColor: this.setColors(1, 0.8),
                borderColor: this.setColors(1, 1),
                data: []
            }]
        };
    },

    setColors: function(index, alpha) {

        var _this = this;
        var color_array = [];
        _.each(_this.colors[index], function(val) {
            color_array.push('rgba(' + val + ', ' + alpha + ')');
        });
        return color_array;
    },

    initGraph: function() {

        var _this = this;
        _this.StorageMetricsChart = new Chart(this.$('#metrics-chart'), {
            type: 'horizontalBar',
            data: _this.StorageMetricsChartData,
            options: _this.StorageMetricsChartOptions
        });
    },

    render: function() {

        var _this = this;
        this.constructor.__super__.render.apply(this, arguments);
        $(this.el).html(this.template({
            module_name: this.module_name,
            displayName: this.displayName,
            maximized: this.maximized
        }));
        this.fetch(function() {
            _this.setData();
            _this.updateStorageMetricsChart();
            _this.initGraph();
            this.$('#metrics-legend').html(this.legendTemplate());
            _this.genStorageMetricsChartLegend();
        }, this);
        return this;
    },

    setData: function() {

        var _this = this;
        _this.raw = this.disks.reduce(function(sum, disk) {
            sum += disk.get('size');
            return sum;
        }, 0);
        _this.provisioned = _this.disks.reduce(function(sum, disk) {
            sum = disk.get('pool') != null ? sum + disk.get('size') : sum;
            return sum;
        }, 0);
        _this.free = _this.raw - _this.provisioned;

        _this.pool = _this.pools.reduce(function(sum, pool) {
            sum += pool.get('size');
            return sum;
        }, 0);
        _this.raidOverhead = _this.provisioned - _this.pool;
        _this.share = _.map(_this.shares.groupBy(function(model) {
            return model.get('pool').name;
        }), function(val, key) {
            return {
                pool_name: key,
                pool_size: _.reduce(val, function(v, k) {
                    return k.get('pool').size;
                }, 0),
                shares_size: _.reduce(val, function(v, k) {
                    return v + k.get('size');
                }, 0)
            };
        }).reduce(function(sum, share) {
            sum += share.shares_size < share.pool_size ? share.shares_size : share.pool_size;
            return sum;
        }, 0);
        _this.usage = _this.shares.reduce(function(sum, share) {
            sum += share.get('rusage');
            return sum;
        }, 0);
        _this.sharesfree = _this.share - _this.usage;

        _this.data.push([_this.usage * 1024, _this.pool * 1024, _this.provisioned * 1024]);
        _this.data.push([_this.sharesfree * 1024, _this.raidOverhead * 1024, _this.free * 1024]);

    },

    updateStorageMetricsChart: function() {

        var _this = this;
        _.each(_this.data, function(dataset, index) {
            _this.StorageMetricsChartData.datasets[index].data = dataset;
        });
        _this.StorageMetricsChartOptions.scales.xAxes[0].ticks.max = _.max(_.union(_this.StorageMetricsChartData.datasets[0].data, _this.StorageMetricsChartData.datasets[1].data));
    },

    genStorageMetricsChartLegend: function() {

        var _this = this;
        var dataset = _this.StorageMetricsChartData.datasets;
        _.each(_this.colors, function(color, index) {
            _.each(_.keys(color), function(key, i) {
                var legend = '';
                legend += '<span style="background-color: ' + dataset[index].backgroundColor[i] + '; ';
                legend += 'border-style: solid; border-color: ' + dataset[index].borderColor[i] + '; ';
                legend += 'border-width: 1px; display: inline; width: 10px; height: 10px; float: left; margin: 2px;"></span> ';
                legend += key;
                this.$('#metrics-legend table tr:eq(' + index + ') td:eq(' + i + ')').html(legend);
            });
        });
    },

    resize: function(event) {

        this.constructor.__super__.resize.apply(this, arguments);
        this.StorageMetricsChart.resize();
    }

});

RockStorWidgets.widgetDefs.push({
    name: 'storage_metrics',
    displayName: 'Total Capacity, Allocation and Usage',
    view: 'StorageMetricsWidget',
    description: 'Display capacity and usage',
    defaultWidget: true,
    rows: 1,
    cols: 5,
    maxRows: 2,
    maxCols: 10,
    category: 'Storage',
    position: 6
});
;/*
 *
 * @licstart  The following is the entire license notice for the
 * JavaScript code in this page.
 *
 * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>
 * This file is part of RockStor.
 *
 * RockStor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * RockStor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

TopSharesWidget = RockStorWidgetView.extend({

    initialize: function() {

        var _this = this;
        this.constructor.__super__.initialize.apply(this, arguments);
        this.template = window.JST.dashboard_widgets_top_shares;
        this.shares = new ShareCollection();
        this.shares.pageSize = RockStorGlobals.maxPageSize;
        this.numTop = 10;
    },

    render: function() {

        var _this = this;
        // call render of base
        this.constructor.__super__.render.apply(this, arguments);
        $(this.el).html(this.template({
            module_name: this.module_name,
            displayName: this.displayName,
            maximized: this.maximized
        }));
        this.shares.fetch({
            success: function(collection, response, options) {

                _this.setData();
                _this.setGraphDimensions();
                _this.renderTopShares();
            }
        });

        return this;
    },

    setData: function() {

        var _this = this;
        _this.data = this.shares.sortBy(function(s) {
            return ((s.get('pqgroup_rusage') / s.get('size')) * 100);
        }).reverse().slice(0, this.numTop);
        _this.data.map(function(d) {
            d.set({
                'pUsed': ((d.get('rusage') / d.get('size')) * 100)
            });
            d.set({
                'pOverUsed': (((d.get('pqgroup_rusage') - d.get('rusage')) / d.get('size')) * 100)
            });
        });
    },

    setGraphDimensions: function() {

        var _this = this;
        _this.barHeight = _this.maximized ? 40 : 18;
        _this.barWidth = _this.maximized ? 440 : 190;
        _this.valign = _this.maximized ? 10 : 0;
    },

    renderTopShares: function() {

        var _this = this;
        _this.buildTitle();
        _.each(_this.data, function(d) {
            var html = _this.buildProgressbar();
            this.$('#top-shares-graph').append(html);
        });

        this.$('.pused').each(function(index) {
            var btrfs_size = (_this.data[index].get('pUsed') + _this.data[index].get('pOverUsed')).toFixed(2);
            $(this).text(btrfs_size + '%');
        });
        var truncate = _this.maximized ? 100 : 12;
        this.$('.progress-animate').not('.progress-bar-info').each(function(index) {
            $(this).find('span')
                .text(humanize.truncatechars(_this.data[index].get('name'), truncate) +
                    '(' + humanize.filesize(_this.data[index].get('pqgroup_rusage') * 1024) +
                    '/' + humanize.filesize(_this.data[index].get('size') * 1024) +
                    ')');
            $(this).animate({
                width: _this.data[index].get('pUsed').toFixed(2) + '%'
            }, 1000);
        });
        this.$('.progress-bar-info').each(function(index) {
            $(this).animate({
                width: _this.data[index].get('pOverUsed').toFixed(2) + '%'
            }, 1000);
        });
    },

    buildTitle: function() {

        var _this = this;
        _this.$('#top-shares-title').text('Top ' + _this.data.length + ' shares sorted by % used');
    },

    buildProgressbar: function() {

        var _this = this;
        var percent_div = {
            class: 'pused',
            style: 'font-size: 10px; text-align: right; padding-right: 5px; display: table-cell; width: 50px; vertical-align: middle;'
        };
        var progressbar_container = {
            class: 'progress',
            style: 'display: inline-block; margin: 0px; position: relative; height: ' + _this.barHeight + 'px; width: ' + _this.barWidth + 'px;'
        };
        var progressbars_defaults = {
            class: 'progress-bar progress-animate',
            role: 'progressbar',
            style: 'width: 0%; -webkit-transition: none !important; transition: none !important;'
        };
        var progressbar_span = {
            style: 'font-size: 10px; position: absolute; color: black; right: 5px; top: ' + _this.valign + 'px'
        };

        var html = '<div style="display: table;"><div class="' + percent_div['class'] + '" style="' + percent_div['style'] + '"></div>';
        html += '<div class="' + progressbar_container['class'] + '" style="' + progressbar_container['style'] + '">';
        html += '<div class="' + progressbars_defaults['class'] + '" style="' + progressbars_defaults['style'] + '" ';
        html += 'role="' + progressbars_defaults['role'] + '">';
        html += '<span style="' + progressbar_span['style'] + '"></span></div>';
        html += '<div class="' + progressbars_defaults['class'] + ' progress-bar-info" style="' + progressbars_defaults['style'] + '" ';
        html += 'role="' + progressbars_defaults['role'] + '"></div>';
        html += '</div></div>';

        return html;
    },

    resize: function(event) {

        var _this = this;
        this.constructor.__super__.resize.apply(this, arguments);
        _this.$('#top-shares-graph').empty();
        _this.setGraphDimensions();
        _this.renderTopShares();
    }

});

RockStorWidgets.widgetDefs.push({
    name: 'top_shares',
    displayName: 'Top Shares by Usage',
    view: 'TopSharesWidget',
    description: 'Display top shares by usage',
    defaultWidget: true,
    rows: 1,
    cols: 5,
    maxRows: 2,
    maxCols: 10,
    category: 'Storage',
    position: 2,
});
window.JST = window.JST || {};

window.JST['access_keys_access_keys'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2014 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<h3>Access Keys</h3>\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <!-- Content -->\n    <div class="messages"></div>\n    <div id="access-keys-table-ph">\n    {{#if collectionNotEmpty}}\n        <table id="access-keys-table" class="table table-bordered table-striped data-table">\n          <thead>\n          <tr>\n            <th>Name</th>\n            <th>Access Key ID</th>\n            <th>Secret Access Key</th>\n            <th></th>\n          </tr>\n          </thead>\n          <tbody>\n          {{#each accessKeys}}\n            <tr>\n            <td>{{this.name}}</td>\n            <td>{{this.client_id}}</td>\n            <td>{{this.client_secret}}</td>\n            <td><a id="delete-access-key" data-id="{{this.id}}" data-name="{{this.name}}" data-action="delete" rel="tooltip" title="Delete access key">\n            <i class="glyphicon glyphicon-trash"></i></a>\n            </td>\n          </tr>\n          {{/each}}\n          </tbody>\n        </table>\n\n      {{else}}\n        <h4>No access keys have been created</h4>\n      {{/if}}\n    </div>\n\n    <a href="#add-access-key" id="add-access-key" class="btn btn-primary"><i class="glyphicon glyphicon-edit"></i> Add Access Key</a>\n    <!-- End Content -->\n  </div> <!--col-md-12 -->\n</div> <!-- row -->\n\n');
window.JST['access_keys_add_access_key'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2014 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="row">\n<div class="col-md-8">\n<div class="panel panel-default">\n<div class="panel-heading">Add Access Key </div>\n  <div class="panel-body">\n    <form class="form-horizontal" name="add-access-key-form" id="add-access-key-form">\n      <div class="messages"></div>\n      <div class="form-group">\n        <label class="col-sm-4 control-label" for="access_key_name">Name<span class="required"> *</span></label>\n        <div class="col-sm-4">\n        <input class="form-control" type="text" name="name" id="name" title="Access Key name">\n      </div>\n      </div>\n      <div class="form-group">\n        <div class="col-sm-offset-4 col-sm-8">\n          <a id="js-cancel" class="btn btn-default">Cancel</a>\n          <input type="Submit" id="create-access-key" class="btn btn-primary" value="Submit"></input>\n        </div>\n      </div>\n    </form>\n  </div><!--panel-body-->\n</div><!--panel-default-->\n</div><!--col-md-8-->\n</div><!--row-->\n');
window.JST['afp_add_afp_share'] = Handlebars.compile('<div class="row">\n<div class="col-md-8">\n<div class="panel panel-default">\n    <div class="panel-heading">\n        {{#if afpShareIdNotNull}}\n            Edit afp export\n        {{else}}\n            Add afp export\n        {{/if}}\n    </div>\n    <div class="panel-body">\n      <form id="add-afp-share-form" name="aform" class="form-horizontal">\n        <div class="messages"></div>\n\n        <!-- Shares -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="shares">Shares to export<span class="required">*</span></label>\n          <div class="col-sm-4">\n            <select class="form-control" name="shares" id="shares" size="10" class=\'required\' data-placeholder="Select shares to export" multiple="multiple">\n            {{display_shares_dropdown}}\n            </select>\n          </div>\n        </div>\n\n        <!-- Time Machine -->\n\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="time_machine">Time Machine<span class="required"> *</span></label>\n          <div class="col-sm-8">\n            {{display_timeMachine_choices}}\n          </div>\n        </div>\n\n        <!-- Submit -->\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="create-afp-share" class="btn btn-primary" value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n    </div><!--panel-body-->\n</div><!--panel-default-->\n  </div> <!--col-md-8 -->\n</div>  <!-- row -->\n');
window.JST['afp_afp'] = Handlebars.compile('<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n      <div id="details-header">\n      <table>\n        <tr>\n          <td><span class="h3">AFP Service&nbsp;&nbsp;&nbsp;</span></td>\n          <td>\n              <input type="checkbox" name="afp-service-checkbox" data-size="mini">\n          </td>\n        </tr>\n      </table>\n    </div>\n    <div id="afp-warning" class="alert alert-warning" style="display:none">\n    	<strong>Warning! AFP Service is not running</strong>. Clients won\'t be able to mount unless AFP is running.\n    </div>\n    <div class="messages"></div>\n    <!-- Content -->\n    {{#if collectionNotEmpty}}\n      <table id="afp-exports-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of afp exports">\n        <thead>\n          <tr>\n            <th scope="col" abbr="Share name">Share</th>\n            <th scope="col" abbr="Time Machine">Time Machine</th>\n            <th scope="col" abbr="Actions">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{#each afpShare}}\n            <tr>\n                <td><a href="#shares/{{this.share_id}}">{{this.share}}</a></td>\n                <td>{{this.time_machine}}</td>\n                <td><a href="#afp/edit/{{this.id}}"><i class="glyphicon glyphicon-pencil"></i></a>&nbsp;\n                <a href="#" class="delete-afp-share" data-share="{{this.share}}" data-id="{{this.id}}">\n                <i class="glyphicon glyphicon-trash"></i></a>\n                </td>\n            </tr>\n          {{/each}}\n        </tbody>\n      </table>\n      {{else}}\n      <table id="afp-exports-table" class="table table-condensed table-bordered table-hover table-striped share-table tablesorter" width="100%" summary="List of afp exports">\n        <tbody>\n          <tr>\n            <td colspan="5">\n              <h4>No afp exports have been created</h4>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    {{/if}}\n\n    {{#if sharesNotEmpty}}\n      <a href="#add-afp-share" id="add-afp-share" class="btn btn-primary"><i class="glyphicon glyphicon-edit "></i> Add afp Export</a>\n    {{else}}\n      <a href="#add-afp-share" id="add-afp-share" class="btn btn-primary disabled" title="No shares available to export through afp"><i class="glyphicon glyphicon-edit "></i> Add afp Export</a>\n    {{/if}}\n  </div>\n</div>\n');
window.JST['appliances_add_appliance'] = Handlebars.compile('<div class="row">\n  <div class="col-md-8">\n  <div class="panel panel-default">\n  <div class="panel-heading">Bind to another Rockstor Appliance</div>\n    <div class="panel-body">\n      <form class="form-horizontal" name="add-appliance-form" id="add-appliance-form" autocomplete="off">\n        <div class="messages"></div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="ip">Appliance IP or Hostname<span class="required"> *</span></label>\n        <div class="col-sm-4">\n            <input class="form-control" type="text" name="ip" id="ip" title="Enter either the appliance ip address or the appliance hostname that is reachable from this appliance">\n        </div>\n        </div>\n        <div class="form-group">\n          <label class=" col-sm-4 control-label" for="port">Management Port<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" name="mgmt_port" id="mgmt_port" value="443" title="Management Port of the remote appliance">\n        </div>\n        </div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="client_id">Access key ID<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" name="client_id" id="client_id" title="Access key ID of the remote appliance. You can get this from System -> Access Keys; screen of the remote aplliance web-ui.">\n        </div>\n        </div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="password">Access Key Secret<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input class="form-control" type="password" name="client_secret" id="client_secret" title="Access key Secret of the remote appliance. You can get this from System -> Access Keys; screen of the remote appliance web-ui.">\n          </div>\n        </div>\n       <div class="form-group">\n        <div class="col-sm-offset-4 col-sm-8">\n	      <a id="js-cancel" class="btn btn-default" href="#">Cancel</a>\n        <input type="Submit" id="add-appliance" class="btn btn-primary" value="Submit"></input>\n        </div>\n      </div>\n      </form>\n    </div> <!-- panel-body-->\n  </div> <!-- panel-default -->\n  </div> <!-- col-md-8 -->\n</div> <!-- row -->\n');
window.JST['appliances_appliances'] = Handlebars.compile('<!-- appliances -->\n<h3>RockStor Appliances that are known to this one</h3>\n<div class="row">\n  <div class="col-md-12">\n    <table class="table table-bordered table-striped data-table" width="100%">\n      <thead>\n        <tr>\n          <th scope="col" abbr="ID">Appliance ID</th>\n          <th scope="col" abbr="IP">Appliance IP</th>\n          <th scope="col" abbr="HN">Host Name</th>\n          <th scope="col" abbr="IP">Management Port</th>\n          <th scope="col" abbr="Action">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n      {{#each appliances}}\n      <tr>\n        <td>{{this.uuid}}</td>\n        <td><i class="fa fa-desktop"></i>&nbsp;\n        {{#if this.current_appliance}}\n            {{this.ip}} <span class="required">*</span>\n        {{else}}\n            <a href="https://{{this.ip}}:{{this.mgmt_port}}" target="_blank">{{this.ip}}</a>\n        {{/if}}\n        </td>\n        <td>\n        {{#if this.current_appliance}}\n            <a href="#appliances" id="hostname" data-id="{{this.id}}">{{this.hostname}}</a>\n        {{else}}\n            {{this.hostname}}\n        {{/if}}\n        </td>\n        <td>{{this.mgmt_port}}</td>\n        <td>\n        {{#unless this.current_appliance}}\n            <a class="delete-appliance" id="{{this.ip}}" data-id="{{this.id}}" href="#">\n            <i class="glyphicon glyphicon-trash"></i></a>\n        {{else}}\n            N/A\n        {{/unless}}\n        </td>\n      </tr>\n      {{/each}}\n    </table>\n    ( <span class="required">*</span> - current appliance )\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n<br>\n<a class="btn btn-primary" id="add-appliance" href="#add-appliance">Add Appliance</a>\n<br>\n<div id="new-appliance-container">\n</div>\n');
window.JST['cb_cb'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<form name="cb-table-ph-form" id="cb-table-ph-form" class="form-inline">\n  <div class="form-group custom-button-group" id="cb-button-group">\n    <button id="new_backup" class="btn btn-primary" title="Create a new Config backup.">Backup current config</button>\n  </div>\n  <div class="form-group custom-button-group pull-right">\n    <input class="form-control" type="file" id="file-select">\n      <button class="btn btn-success" type="submit" id="upload-button">Upload file</button>\n  </div>\n\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <!-- Content -->\n     <div class="messages"></div>\n      <div id="cb-table-ph">\n      </div>\n    <!-- End Content -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n</form>\n');
window.JST['cb_cb_table'] = Handlebars.compile('{{#if collectionNotEmpty}}\n  <table id="cb-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of Config Backups">\n    <thead>\n      <tr>\n        <th>Filename</th>\n        <th>Size</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {{#each configBackup}}\n        <tr>\n            <td>{{this.filename}}</td>\n            <td>{{humanReadableSize this.size}}</td>\n            <td>\n                <a href="#" class="cb-delete" id="delete_cb_{{this.filename}}" data-id="{{this.id}}" data-action="delete" rel="tooltip" title="Delete backup">\n                <i class="glyphicon glyphicon-trash"></i></a>&nbsp;&nbsp;\n                <a href="/static/config-backups/{{this.filename}}" title="Download the config backup to your computer">\n                <i class="glyphicon glyphicon-cloud-download"></i></a>&nbsp;&nbsp;\n                <a href="#" class="cb-restore" id="cb-restore" data-id="{{this.id}}" rel="tooltip" title="Restore config from this backup.">\n                <i class="glyphicon glyphicon-play"></i></a>\n            </td>\n        </tr>\n      {{/each}}\n    </tbody>\n  </table>\n{{ else }}\n  <h4>No backups have been created.</h4>\n{{/if}}\n');
window.JST['common_404'] = Handlebars.compile('<div class="row">\n  <div class="col-md-8">\n    <h3>Page not found</h3>\n    <div class="alert alert-danger">\n      Sorry, an unexpected client-side error has occured.\n    </div>\n  </div>\n</div>\n<div class="row">\n  <div class="col-md-8">\n    <p>Please do one of the following to help us fix this problem</p>\n    <ul>\n      <li>Send an email to <a href="mailto:support@rockstor.com">support@rockstor.com</a>. with a brief description of the action you were trying to perform when the problem occured.</li>\n    </ul>\n  </div>\n</div>\n\n');
window.JST['common_500'] = Handlebars.compile('<div class="row">\n  <div class="col-md-8">\n    <h3>Internal Error </h3>\n    <div class="alert alert-danger">\n      Sorry, A backend error has occured. Error details are saved to\n      /opt/rockstor/var/log directory. Please zip the directory and provide it to\n      Rockstor support team to help fix this problem. \n    </div>\n  </div>\n</div>\n<div class="row">\n  <div class="col-md-8">\n    <p>Please do one of the following to help us fix this problem</p>\n    <ul>\n      <li>Send an email to <a href="mailto:support@rockstor.com">support@rockstor.com</a>. with a brief description of the action you were trying to perform when the problem occured.</li>\n    </ul>\n  </div>\n</div>\n\n\n');
window.JST['common_disks_table'] = Handlebars.compile('<table id="disks-select-table" class="table table-condensed table-bordered share-table tablesorter" summary="List of disks">\n  <thead>\n    <tr>\n      <th>No.</th>\n      <th>Name</th>\n      <th>Capacity</th>\n      <th>Select All <input type="checkbox" id="checkAll"/></th>\n    </tr>\n  </thead>\n  <tbody>\n  {{#each disks}}\n  <tr>\n    <td>{{mathHelper @index}}</td>\n    <td>{{this.name}}\n      {{#if this.parted}}\n      <a href="#disks/role/{{this.id}}" class="user_role_part" data-disk-id="{{this.id}}" title="Partition (Redirect Role), click to review. Note: Capacity is for whole disk when adding so may be inaccurate." rel="tooltip">\n        <i class="glyphicon glyphicon-tags"></i></a>\n      {{/if}}\n      {{#if (isOpenLuks this.role)}}\n      <a href="#disks/luks/{{this.id}}" class="open_luks_drive" data-disk-id="{{this.id}}" title="Open LUKS Volume, click to review." rel="tooltip">\n        <i class="glyphicon glyphicon-eye-open"></i></a>\n      {{/if}}\n    </td>\n    <td>{{humanReadableSize this.size}}</td>\n    <td><input type="checkbox" name="diskid" id="{{this.id}}" value=\'{"id": {{this.id}}, "name": "{{this.name}}"}\' class="diskid"></td>\n  {{/each}}\n  </tbody>\n</table>\n');
window.JST['common_navbar'] = Handlebars.compile('{{#if logged_in }}\n<ul class="nav navbar-nav">\n  <li><a id="home_nav" href="#home">Dashboard</a></li>\n  <li class="dropdown">\n    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Storage <i class="fa fa-caret-down"></i></a>\n    <ul class="dropdown-menu">\n      <li><a href="#disks"><i class="glyphicon glyphicon-hdd"></i> Disks</a></li>\n      <li><a href="#pools"><i class="glyphicon glyphicon-list"></i> Pools</a></li>\n      <li><a href="#shares"><i class="glyphicon glyphicon-folder-open"></i> Shares</a></li>\n      <li><a href="#snapshots"><i class="glyphicon glyphicon-camera"></i> Snapshots</a></li>\n      <li><span><i class="fa fa-exchange"></i> Replication</span></li>\n      <ul style="list-style-type: none">\n        <li><a href="#replication"><i class="fa fa-long-arrow-right"></i> Send</a></li>\n        <li><a href="#replication-receive"><i class="fa fa-long-arrow-left"></i> Receive</a></li>\n      </ul>\n      <li><span><i class="glyphicon glyphicon-share"></i> File sharing</span></li>\n      <ul style="list-style-type: none">\n        <li><a href="#nfs-exports">NFS</a></li>\n        <li><a href="#samba-exports">Samba</a></li>\n        <li><a href="#sftp">SFTP</a></li>\n        <li><a href="#afp">AFP</a></li>\n      </ul>\n    </ul>\n  </li>\n  <li class="dropdown">\n    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">System <i class="fa fa-caret-down"></i></span></a>\n    <ul class="dropdown-menu">\n      <li><a href="#services"><i class="glyphicon glyphicon-cog"></i> Services</a></li>\n      <li><span><i class="glyphicon glyphicon-user"></i> Identity</span></li>\n      <ul style="list-style-type: none">\n        <li><a href="#users"><i class="fa fa-user"></i> Users</a></li>\n        <li><a href="#groups"><i class="fa fa-group"></i> Groups</a></li>\n        <li><a href="#access-keys"><i class="fa fa-key"></i> Access Keys</a></li>\n      </ul>\n      <li><a href="#network"><i class="glyphicon glyphicon-signal"></i> Network</a></li>\n      <li><a href="#scheduled-tasks"><i class="glyphicon glyphicon-tasks"></i> Scheduled Tasks</a></li>\n      <li><a href="#version"><i class="glyphicon glyphicon-arrow-up"></i> Software Update</a></li>\n      <li><a href="#appliances"><i class="fa fa-desktop"></i> Appliances</a></li>\n      <li><a href="#update-certificate"><i class="fa fa-certificate"></i> SSL Certificate</a></li>\n      <li><a href="#config-backup"><i class="glyphicon glyphicon-floppy-save"></i> Config Backups</a></li>\n      <li><a href="#email"><i class="fa fa-envelope"></i> Email Alerts</a></li>\n      <li><a href="#logsmanager"><i class="fa fa-gears"></i> Logs Manager</a></li>\n      <li><a href="#shell"><i class="fa fa-terminal"></i> System Shell</a></li>\n    </ul>\n  </li>\n\n  <li><a id="rockons_nav" href="#rockons">Rock-ons</a></li>\n  <li class="dropdown">\n    <a href="#" class="dropdown-toggle" data-toggle="dropdown">\n      Support\n      <i class="fa fa-caret-down"></i>\n    </a>\n    <ul class="dropdown-menu">\n      <li><a id="documentation_nav" href="http://rockstor.com/docs" target="_blank">Documentation</a></li>\n      <li><a href="http://rockstor.com/forums" target="_blank">Community forums</a></li>\n      <li><a href="https://github.com/rockstor/rockstor-core/issues?state=open" target="_blank">Issue tracker</a></li>\n      <li><a href="mailto:support@rockstor.com" target="_blank">Team e-mail</a></li>\n    </ul>\n  </li>\n  <li><a id="donate_nav" href="#"><i class="fa fa-heart fa-lg" style="color:#BA0707" ></i> Donate</a></li>\n  <li><a href="http://shop.rockstor.com" target="_blank"><i class="fa fa-shopping-cart fa-lg" style="color:#E76545"></i> Shop</a></li>\n\n</ul>\n\n<ul class="nav navbar-nav navbar-right">\n  <li><a href="#version" id="version-msg"></a></li>\n  <li  class="dropdown">\n    <a href="#" class="dropdown-toggle" data-toggle="dropdown"><span id="user-name"></span>\n      <i class="fa fa-power-off"></i>\n    </a>\n    <ul class="dropdown-menu">\n      <li><a id="logout_user" href="/logout_user">Logout</a></li>\n      <li><a id="shutdown" href="#shutdown">Shutdown</a></li>\n      <li><a id="reboot" href="#reboot">Reboot</a></li>\n    </ul>\n</ul>\n<ul class="dropdown-menu" style="left: -40px;>\n  <li><a id="logout_user" href="/logout_user">Logout</a></li>\n  <li><a id="shutdown" href="#shutdown">Shutdown</a></li>\n  <li><a id="reboot" href="#reboot">Reboot</a></li>\n</ul>\n</li>\n\n{{/if}}\n\n<div id="shutdown-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n	<h3 id="shutdownModalLabel">Shutdown</h3>\n      </div>\n      <div class="modal-body">\n	<h4 id="message" >Graceful system shutdown is in progress. Please wait... &nbsp;&nbsp; </h4>\n	<br>\n	<div style="text-align: center">\n	  <img id="timer" src="/static/storageadmin/img/ajax-loader-big.gif">\n	  <div id="time-left"></div>\n	</div>\n	<div id="user-msg" style="display: none"><h4> Shutdown still not complete. Connect to the console for current status of the system. </h4> </div>\n	<div id="user-msg2" style="display: none"><h4> System is now shutdown.</h4></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div id="reboot-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n	<h3 id="rebootModalLabel">Reboot</h3>\n      </div>\n      <div class="modal-body">\n	<h4 id="reboot-message" >Graceful system reboot is in progress. Please wait... &nbsp;&nbsp; </h4>\n	<br>\n	<div style="text-align: center">\n	  <img id="reboot-timer" src="/static/storageadmin/img/ajax-loader-big.gif">\n	  <div id="reboot-time-left"></div>\n	</div>\n	<div id="reboot-user-msg" style="display: none"><h4> System reboot still not complete. Connect to the console for current status of the system.</h4> </div>\n	<div id="reboot-user-msg2" style="display: none"><h3> Rockstor is now up and running. Please refresh your browser window.</h3></div>\n      </div>\n    </div>\n  </div>\n</div>\n');
window.JST['common_new_appliance'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<form name="add-appliance-form" id="add-appliance-form">\n  <table class="table table-condensed table-bordered table-hover table-striped tablesorter"style="width: 100%">\n    <thead>\n      <tr>\n        <th scope="col" abbr="IP">Appliance IP</th>\n        <th scope="col" abbr="username">Username</th>\n        <th scope="col" abbr="username">Password</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td><input type="text" class="smallinput" name="ip" id="ip"></td>\n        <td><input type="text" class="smallinput" name="username" id="username"></td>\n        <td><input type="password" class="smallinput" name="password" id="password"></td>\n      </tr>\n    </tbody>\n  </table>\n  <input type="Submit" id="add-appliance" class="btn btn-primary" value="Submit"></input>\n</form>\n\n\n');
window.JST['common_popuperr'] = Handlebars.compile('  <div class="alert alert-danger">\n  {{#unless userError}}\n    <strong><h5>Houston, we\'ve had a problem.</h5></strong>\n  {{/unless}}\n  <div class="global-err-content">\n    {{detail}}\n  </div><br/>\n  {{#unless userError}}\n  <div id="errorContent" class="global-err-content tracebackDiv">\n    <pre>{{#each tb}}\n            {{this}}\n         {{/each}}\n    </pre>\n  </div>\n</div>\n<br>\n\n<div class="err-help reportError">\n  {{#if stable}}\n    <p>As a subscriber to Stable updates, you are eligible for commercial support. Please follow these steps to get help from the Rockstor team.</p>\n  {{else}}\n    <p>If you think this is a bug or need help, follow these steps to submit a report to the Rockstor Community Forum.</p>\n  {{/if}}\n  <ol>\n    <li>Take a screen capture of this error/screen.</li>\n    <li>Click\n        <a id="clip" data-clipboard-target="#errorContent">\n            <i class="fa fa-clipboard fa-lg" aria-hidden="true"></i>\n        </a>\n        to copy the above traceback to your clipboard.\n    </li>\n    {{#if stable}}\n        <li>Create a support ticket with information from above two steps <a href="https://support.rockstor.com/open.php" target="_blank">here</a>.</li>\n    {{else}}\n        <li>Create a support topic with information from above two steps <a href="https://forum.rockstor.com/new-topic?title={{detail}}&category=support" target="_blank">here</a>.</li>\n        {{/if}}\n  </ol>\n</div> <!-- err-help -->\n{{/unless}}');
window.JST['common_sidenav_dashboard'] = Handlebars.compile('<h3><i class="fa fa-home"></i>Dashboard</h3>\n<div id="dashboard-config-ph"></div>\n\n');
window.JST['common_sidenav_rockons'] = Handlebars.compile('<h3>Rock-on service</h3>\n<div id="docker-service-ph"> </div>\n');
window.JST['common_sidenav_setup'] = Handlebars.compile('<h3>RockStor Setup</h3>\n\n');
window.JST['common_sidenav_storage'] = Handlebars.compile('<h3>Storage</h3>\n<ul class="side">\n    <li><a href="#disks" {{sidenav "disks"}}><i class="glyphicon glyphicon-hdd "></i> Disks</a></li>\n    <li><a href="#pools" {{sidenav "pools"}}><i class="glyphicon glyphicon-list "></i> Pools</a></li>\n    <li><a href="#shares" {{sidenav "shares"}}><i class="glyphicon glyphicon-folder-open "></i> Shares</a></li>\n    <li><a href="#snapshots" {{sidenav "snapshots"}}><i class="glyphicon glyphicon-camera  "></i> Snapshots</a></li>\n    <li>\n        <div class="subnav">\n          <i class="fa fa-exchange"></i> Replication\n          <ul>\n              <li><a href="#replication" {{sidenav "replication"}}><i class="fa fa-long-arrow-right"></i> Send</a></li>\n              <li><a href="#replication-receive" {{sidenav "replication-receive"}}><i class="fa fa-long-arrow-left"></i> Receive</a></li>\n          </ul>\n        </div>\n    </li>\n    <li>\n        <div class="subnav">\n          <i class="glyphicon glyphicon-share"></i> File Sharing\n          <ul>\n              <li><a href="#nfs-exports" {{sidenav "nfs-exports"}}>NFS</a></li>\n              <li><a href="#samba-exports" {{sidenav "samba"}}>Samba</a></li>\n              <li><a href="#sftp" {{sidenav "sftp"}}>SFTP</a></li>\n              <li><a href="#afp" {{sidenav "afp"}}>AFP</a></li>\n          </ul>\n        </div>\n    </li>\n</ul>\n\n');
window.JST['common_sidenav_system'] = Handlebars.compile('<h3>System</h3>\n<ul class="side">\n  <li><a href="#services" {{sidenav "services"}}><i class="glyphicon glyphicon-cog"></i> Services</span></a></li>\n  <li>\n      <div class="subnav">\n        <i class="glyphicon glyphicon-user"></i> Identity\n        <ul>\n          <li><a href="#users" {{sidenav "users"}}><i class="fa fa-user"></i> Users</span></a></li>\n          <li><a href="#groups" {{sidenav "groups"}}><i class="fa fa-group"></i> Groups</span></a></li>\n          <li><a href="#access-keys" {{sidenav "access-keys"}}><i class="fa fa-key"></i> Access Keys</span></a></li>\n        </ul>\n       </div>\n    </li>\n<li><a href="#network" {{sidenav "network"}}><i class="glyphicon glyphicon-signal"></i> Network</span></a></li>\n    <li><a href="#scheduled-tasks" {{sidenav "scheduled-tasks"}}><i class="glyphicon glyphicon-tasks "></i> Scheduled Tasks</span></a></li>\n    <li><a href="#version" {{sidenav "version"}}><i class="glyphicon glyphicon-arrow-up "></i> Software Update</span></a></li>\n    <li><a href="#appliances" {{sidenav "appliances"}}><i class="fa fa-desktop"></i> Appliances</span></a></li>\n    <li><a href="#update-certificate" {{sidenav "update-certificate"}}><i class="fa fa-certificate"></i> SSL Certificate</span></a></li>\n    <li><a href="#config-backup" {{sidenav "config-backup"}}><i class="glyphicon glyphicon-floppy-save"></i> Config Backups</span></a></li>\n    <li><a href="#email" {{sidenav "email"}}><i class="fa fa-envelope"></i> Email Alerts</span></a></li>\n    <li><a href="#logsmanager" {{sidenav "logs"}}><i class="fa fa-gears"></i> Logs Manager</a></li>\n    <li><a href="#shell" {{sidenav "shell"}}><i class="fa fa-terminal"></i> System Shell</a></li>\n</ul>\n');
window.JST['dashboard_dashboard_config'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="dashboard-widget-controls">\n{{display_widgets}}\n</div>\n');
window.JST['disk_blink_disks'] = Handlebars.compile('\n<h4>Activate the hard drive LED of /dev/{{diskName}}</h4>\n<div class="row">\n  <div class="col-md-8">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form class="form-horizontal" id="add-blink-disk-form"  name="aform" >\n        <div class="messages"></div>\n\n        <!-- disks -->\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <h4>Drive name:&nbsp;&nbsp;<strong>{{diskName}}</strong></h4>\n	    <h4>Serial number:&nbsp;&nbsp;<strong>{{serialNumber}}</strong></h4>\n          </div>\n        </div>\n\n       <!-- Total Time -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="total_time">Total time<span class="required"> *</span></label>\n          <div class="col-sm-8">\n            <input class="form-control shorten-input" type="text" name="total_time" id="total_time" title="Total time of desired led activity in seconds. This is the sum of all (read + sleep) cycles" value=90>\n          </div>\n        </div>\n\n        <!-- Blink Time -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="blink_time">Read Time<span class="required"> *</span></label>\n          <div class="col-sm-8">\n            <input class="form-control shorten-input" type="text" name="blink_time" id="blink_time" title="Number of seconds to read from the drive per cycle. The drive LED lights up during read" value=10>\n          </div>\n        </div>\n\n        <!-- Sleep Time -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="sleep_time">Sleep Time<span class="required"> *</span></label>\n	  <div class="col-sm-8">\n            <input class="form-control shorten-input" type="text" name="sleep_time" id="sleep_time" title="Number of seconds to sleep per cycle. The drive LED doesn\'t light up during sleep time" value=5>\n	  </div>\n        </div>\n\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="blink-disk" class="btn btn-primary" value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['disk_disk_details_layout'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="messages"></div>\n<!-- page heading -->\n\n{{#if diskSmartNotAvailable}}\n<div class="alert alert-danger">\n  <h4>S.M.A.R.T support is not available for this disk ({{diskName}}).<br>\n	Please see the S.M.A.R.T column entry for this disk on the Storage - Disks\n	page; custom options may be required.</h4>\n</div>\n{{else if diskSmartNotEnabled}}\n<div class="alert alert-warning">\n  <h4>Warning! S.M.A.R.T support is not enabled for this disk ({{diskName}}).\n	<br>If available it can be enabled in the S.M.A.R.T column entry for this disk\n	on the Storage - Disks page.</h4>\n</div>\n{{else}}\n<div class="pull-right">\n  <button id="smartinfo" class="btn btn-primary pull-right" title="Refresh for latest information"><i class="glyphicon glyphicon-refresh "></i>Refresh</button>\n</div>\n<span class="h2">S.M.A.R.T details for <strong>{{diskName}}</strong></span>\n<br>\n<span class="h4"><i>{{lastScannedOn}}<strong>(Refresh button to update)</strong></i></span>\n{{/if}}\n\n<ul class="nav nav-tabs">\n  <li class="active"><a href="#smartidentity" data-toggle="tab">Identity</a></li>\n  <li><a href="#smartattributes" data-toggle="tab">Attributes</a></li>\n  <li><a href="#smartcapabilities" data-toggle="tab">Capabilities</a></li>\n  <li><a href="#smarterrorlogs" data-toggle="tab">Error Logs</a></li>\n  <li><a href="#smarttestlogs" data-toggle="tab">Self-Test Logs</a></li>\n  <li><a href="#smarttests" data-toggle="tab">Perform Tests</a></li>\n</ul>\n\n<div class="css-panes">\n\n  <div id="smartidentity">\n    <div class="row">\n      {{#if identity}}\n      <table id="smartidentity-table" class="table table-condensed table-bordered table-hover table-striped tablesorter" summary="List of S.M.A.R.T identity attributes">\n	<thead>\n	  <tr>\n	    <th>Attribute</th>\n	    <th>Value</th>\n	  </tr>\n	</thead>\n	<tbody>\n	  <tr>\n	    <td><strong>Model Family</strong></td>\n	    <td>{{identity.model_family}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Device Model</strong></td>\n	    <td>{{identity.device_model}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Serial Number</strong></td>\n	    <td>{{identity.serial_number}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>World Wide Name</strong></td>\n	    <td>{{identity.world_wide_name}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Firmware Version</strong></td>\n	    <td>{{identity.firmware_version}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Capacity</strong></td>\n	    <td>{{identity.capacity}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Sector Size</strong></td>\n	    <td>{{identity.sector_size}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Rotation Rate</strong></td>\n	    <td>{{identity.rotation_rate}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>In Smartctl Database</strong></td>\n	    <td>{{identity.in_smartdb}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>ATA Version</strong></td>\n	    <td>{{identity.ata_version}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>SATA Version</strong></td>\n	    <td>{{identity.sata_version}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Scanned on</strong></td>\n	    <td>{{identity.scanned_on}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>SMART Supported</strong></td>\n	    <td>{{identity.supported}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>SMART Enabled</strong></td>\n	    <td>{{identity.enabled}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Smartctl Version</strong></td>\n	    <td>{{identity.version}}</td>\n	  </tr>\n	  <tr>\n	    <td><strong>Overall Health Self-Assessment Test</strong></td>\n	    <td>{{identity.assessment}}</td>\n	  </tr>\n	</tbody>\n      </table>\n      {{/if}}\n    </div>\n  </div>\n\n  <div id="smartattributes">\n    <div class="row">\n      <table id="smartattributes-table" class="table table-condensed table-bordered table-hover table-striped tablesorter" summary="List of S.M.A.R.T attributes">\n	<thead>\n	  <tr>\n	    <th>Name</th>\n	    <th>Failed</th>\n	    <th>Norm-ed Value</th>\n	    <th>Worst</th>\n	    <th>Threshold</th>\n	    <th>Raw Value</th>\n	    <th>Type</th>\n	    <th>Updated</th>\n	    <th>Flag</th>\n      <th>Id</th>\n	  </tr>\n	</thead>\n	<tbody>\n	  {{#each attributes as |attribute|}}\n	  <tr>\n      <td><strong>{{attribute.name}}</strong></td>\n	    <td>{{attribute.failed}}</td>\n	    <td>{{attribute.normed_value}}</td>\n	    <td>{{attribute.worst}}</td>\n	    <td>{{attribute.threshold}}</td>\n	    <td><strong>{{attribute.raw_value}}</strong></td>\n	    <td>{{attribute.atype}}</td>\n	    <td>{{attribute.updated}}</td>\n	    <td>{{attribute.flag}}</td>\n      <td>{{attribute.aid}}</td>\n	  </tr>\n	  {{else}}\n	  <h3>No S.M.A.R.T Attributes found (ATA/SATA only)</h3>\n	  {{/each}}\n	</tbody>\n      </table>\n    </div>\n  </div>\n\n  <div id="smartcapabilities">\n    <div class="row">\n      <table id="smartcapabilites-table" class="table table-condensed table-bordered table-hover table-striped tablesorter" summary="Table of S.M.A.R.T capabilities">\n	<thead>\n	  <tr>\n	    <th>Name</th>\n	    <th>Flag</th>\n	    <th>Capabilities</th>\n	  </tr>\n	</thead>\n	<tbody>\n	  {{#each capabilities as |capability|}}\n	  <tr>\n	    <td><strong>{{capability.name}}</strong></td>\n	    <td>{{capability.flag}}</td>\n	    <td>{{capability.capabilities}}</td>\n	  </tr>\n	  {{else}}\n	  <h3>No S.M.A.R.T Capabilities found (ATA/SATA only)</h3>\n	  {{/each}}\n	</tbody>\n      </table>\n    </div>\n  </div>\n\n  <div id="smarterrorlogs">\n    <div class="row">\n      {{#if errorLogSummaryNull}}\n      {{#isAboveMinLength 4 errorlog}}\n      <h3>No error summary available, please see the raw log below.</h3>\n      {{else}}\n      <h3>There are no errors.</h3>\n      {{/isAboveMinLength}}\n      {{else}}\n      <p>{{errorlogZero}}</p>\n      <p>{{errorlogOne}}</p>\n      <table id="smarterrorlogsummary-table"\n	     class="table table-condensed table-bordered table-hover table-striped tablesorter"\n	     summary="Table of S.M.A.R.T error log summary">\n	<thead>\n	  <tr>\n	    <th>Error #</th>\n	    <th>Lifetime hours</th>\n	    <th>State</th>\n	    <th>Type</th>\n	    <th>Details</th>\n	  </tr>\n	</thead>\n	<tbody>\n	  {{#each errorlogsummary as |summary|}}\n	  <tr>\n	    <td>{{summary.error_num}}</td>\n	    <td>{{summary.lifetime_hours}}</td>\n	    <td>{{summary.state}}</td>\n	    <td>{{summary.etype}}</td>\n	    <td>{{summary.details}}</td>\n	  </tr>\n	  {{/each}}\n	</tbody>\n      </table>\n      {{/if}}\n      {{#isAboveMinLength 4 errorlog}}\n      <h3>Raw S.M.A.R.T error log</h3>\n      <pre>\n	{{#each errorlog as |log|}}\n	{{log.line}}\n	{{/each}}\n      </pre>\n      {{/isAboveMinLength}}\n    </div>\n  </div>\n\n  <div id="smarttestlogs">\n    <div class="row">\n      {{#if testLogNull}}\n      <h3>There are no Self-Test logs.</h3>\n      {{else}}\n      <p>Number of entries in the log: {{testlogLength}}</p>\n      <table id="smarttestlog-table" class="table table-condenced table-bordered table-hover table-striped tablesorter" summary="Table of S.M.A.R.T test log">\n	<thead>\n	  <tr>\n	    <th>Test #</th>\n	    <th>Type</th>\n	    <th>Status</th>\n	    <th>% Completed</th>\n	    <th>Lifetime hours</th>\n	    <th>LBA of the first error</th>\n	  </tr>\n	</thead>\n	<tbody>\n	  {{#each testlog as |log|}}\n	  <tr>\n	    <td>{{log.test_num}}</td>\n	    <td>{{log.description}}</td>\n	    <td>{{log.status}}</td>\n	    <td>{{log.pct_completed}}</td>\n	    <td>{{log.lifetime_hours}}</td>\n	    <td>{{log.lba_of_first_error}}</td>\n	  </tr>\n	  {{/each}}\n	</tbody>\n      </table>\n      <pre>\n	{{#each testlogdetail as |detail|}}\n	{{detail.line}}\n	{{/each}}\n      </pre>\n      {{/if}}\n    </div>\n  </div>\n\n  <div id="smarttests">\n    <div class="row">\n      {{#if smartNotAvailableEnabled}}\n      <div class="alert alert-danger">\n	<h4>Tests cannot be run because S.M.A.R.T support is either unavailable or\n		disabled.</h4>\n      </div>\n      {{else}}\n      <p>\n	Self-tests are built-in tests within the drive designed to recognize\n	drive fault conditions. All self-tests are safe to user data. The tests\n	can be performed during normal system operation, but will take longer\n	to complete if the drive is not idle.\n      </p>\n      <div class="col-md-8">\n	<label class="control-label"></label>\n	<div class="form-box">\n	  <form  name="run-test-form" id="run-test-form">\n	    <div class="messages"></div>\n	    <div class="form-group">\n	      {{#if notRunningTest}}\n	      <label class="control-label" for="test_type">Test Type </label>\n	      <div class="">\n		<select id="test_name" name="test_name" title="select the test you want to run">\n		  {{#each tests}}\n		  <option value="{{@key}}">{{@key}}    (Estimated duration: {{this}})</option>\n		  {{/each}}\n		</select>\n	      </div>\n	    </div>\n	    <div class="form-group">\n	      <div class="">\n		<button id="test-start" class="btn btn-primary" title="Start the test">Start Test</button>\n	      </div>\n	    </div>\n	    {{else}}\n	    <div class="form-group">\n	      <h4>{{running_test}}</h4>\n	      <p>Wait until this test finishes to start a new one. Refresh for an update.</p>\n	    </div>\n	    {{/if}}\n	  </form>\n	</div>\n      </div>\n      {{/if}}\n    </div>\n  </div>\n</div>\n');
window.JST['disk_disks'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <!-- Content -->\n    <div class="messages"></div>\n    <div id="disks-table-ph">\n    </div>\n    <!-- End Content -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n<button id="setup" class="btn btn-primary"><i class="glyphicon glyphicon-refresh "></i> Rescan</button>\n<a href="#services/smartd/edit" id="configure_smartd" class="btn btn-primary"><i class="glyphicon glyphicon-wrench"></i> S.M.A.R.T</a>\n<!-- end module body -->\n');
window.JST['disk_disks_table'] = Handlebars.compile('{{#if collectionNotEmpty}}\n<table id="disks-table"\n       class="table table-bordered table-striped share-table data-table" width="100%"\n       summary="List of disks">\n  <thead>\n    <tr>\n      <th scope="col" abbr="Name">Name</th>\n      <th scope="col" abbr="Serial">Serial</th>\n      <th scope="col" abbr="Capacity">Capacity</th>\n      <th scope="col" abbr="Pool">Pool</th>\n      <th scope="col" abbr="SpinDown">Power Status</th>\n      <th scope="col" abbr="APM">APM</th>\n      <th scope="col" abbr="Model">Model</th>\n      <th scope="col" abbr="Transport">Transport</th>\n      <th scope="col" abbr="Vendor">Vendor</th>\n      <th scope="col" abbr="Smart">S.M.A.R.T</th>\n    </tr>\n  </thead>\n  <tbody>\n    {{#each diskCollection}}\n    <tr>\n      <td><a href="#disks/{{this.id}}"><i class="glyphicon glyphicon-hdd"></i>&nbsp;{{this.name}}</a>\n        {{#if this.offline}}\n            {{#if this.pool_name}}\n                <i class="glyphicon glyphicon-map-marker" title="Drive is a detached member of a Rockstor managed Pool." rel="tooltip"></i>\n                <a href="#pools/{{this.pool}}"><i class="glyphicon glyphicon-exclamation-sign" title="Use linked Pool page Resize / ReRaid \'Remove disks\' option if no reattachment is planned." rel="tooltip"></i></a>\n            {{else}}\n                <a href="#" class="delete" data-disk-id="{{this.id}}" title="Disk is unusable because it is detached.\n                Click to delete it from the system if it is not to be reattached." rel="tooltip"><i class="glyphicon glyphicon-trash"></i></a>\n            {{/if}}\n        {{else if (isRootDevice this.role)}}\n              <i class="glyphicon glyphicon-registration-mark" title="Rockstor System Drive." rel="tooltip"></i>\n        {{else if (isLuksContainer this.role)}}\n            {{#if this.parted}}\n                {{#if (isLuksContainerUnlocked this.role)}}\n                    <i class="fa fa-unlock" title="Disk contains at least one partition hosting a LUKS Container (unlocked). LUKS in partition is only supported for the Rockstor system drive." rel="tooltip"></i>\n                {{else}}\n                    <i class="fa fa-lock" title="Disk contains at least one partition hosting a LUKS Container (locked). LUKS in partition is only supported for the Rockstor system drive." rel="tooltip"></i>\n                {{/if}}\n            {{else}}\n                {{#if (isLuksContainerUnlocked this.role)}}\n                    <a href="#disks/luks/{{this.id}}" class="luks_drive" data-disk-id="{{this.id}}" title="Full Disk LUKS Container (unlocked)." rel="tooltip">\n                    <i class="fa fa-unlock"></i></a>\n                {{else}}\n                    <a href="#disks/luks/{{this.id}}" class="luks_drive" data-disk-id="{{this.id}}" title="Full Disk LUKS Container (locked)." rel="tooltip">\n                    <i class="fa fa-lock"></i></a>\n                {{/if}}\n            {{/if}}\n        {{else if (isMdraidMember this.role)}}\n            <a href="#" class="raid_member" data-disk-id="{{this.id}}" title="Mdraid member (UI pending)." rel="tooltip">\n              <i class="glyphicon glyphicon-info-sign"></i></a>\n        {{else if (isBcache this.role)}}\n            <a href="#" class="bcache_backing_drive" data-disk-id="{{this.id}}" title="Bcache Backing Drive (UI pending)." rel="tooltip">\n            <i class="glyphicon glyphicon-link"></i></a>\n        {{else if (isBcacheCdev this.role)}}\n            <a href="#" class="bcache_caching_drive" data-disk-id="{{this.id}}" title="Bcache Caching Drive (UI pending)." rel="tooltip">\n            <i class="glyphicon glyphicon-link"></i><i class="glyphicon glyphicon-link"></i></a>\n        {{else if (isLVM2member this.role)}}\n            <a href="#disks/role/{{this.id}}" class="LVM2_member" data-disk-id="{{this.id}}" title="Disk is unusable as it is an LVM2 member (Physical Volume). Click to wipe." rel="tooltip">\n            <i class="glyphicon glyphicon-cog"></i></a>\n        {{else if this.parted}}\n            {{#if (hasUserRole this.role)}}\n                <a href="#disks/role/{{this.id}}" class="user_role_part" data-disk-id="{{this.id}}" title="User Assigned Role found on partitioned disk, click to edit." rel="tooltip">\n                <i class="glyphicon glyphicon-tags"></i></a>\n                {{#if (isNullPoolBtrfs this.btrfs_uuid this.pool_name)}}\n                    <a href="#disks/role/{{this.id}}" class="user_role_part" data-disk-id="{{this.id}}" title="Partition is unusable because it has an existing BTRFS filesystem on it.\n                    Click to configure or wipe." rel="tooltip"><i class="fa fa-eraser"></i></a>&nbsp;<a href="#" class="btrfs_import" data-disk-id="{{this.id}}" title="Click to import data (pools, shares and snapshots) on this partition automatically (Note: whole disk btrfs is recommended)." rel="tooltip">\n                    <i class="glyphicon glyphicon-circle-arrow-down"></i></a>\n                {{else if this.pool_name}}\n                    <i class="glyphicon glyphicon-map-marker" title="Drive partition (via Redirect Role) is mapped to a Pool" rel="tooltip"></i>\n                {{/if}}\n            {{else}}\n                {{#if (isNullPoolBtrfs this.btrfs_uuid this.pool_name)}}\n                    <a href="#disks/role/{{this.id}}" class="user_role_part" data-disk-id="{{this.id}}" title="Disk is unusable as it contains partitions: one of which has an existing BTRFS filesystem on it. A User Assigned redirect role is required prior to import.\n                    Click to configure or wipe." rel="tooltip"><i class="glyphicon glyphicon-cog"></i></a>\n                {{else}}\n                    <a href="#disks/role/{{this.id}}" class="user_role_part" data-disk-id="{{this.id}}" title="Disk is unusable as it contains partitions and no User Assigned Role.\n                    Click to configure or wipe." rel="tooltip"><i class="glyphicon glyphicon-cog"></i></a>\n                {{/if}}\n            {{/if}}\n        {{else}} <!-- We are non of the above top level ifs / else ifs at this point -->\n            {{#if (isNullPoolBtrfs this.btrfs_uuid this.pool_name)}}\n                <a href="#disks/role/{{this.id}}" class="user_role_part" data-disk-id="{{this.id}}" title="Disk is unusable because it has an existing whole disk BTRFS filesystem on it.\n                Click to configure or wipe." rel="tooltip"><i class="fa fa-eraser"></i></a>&nbsp;<a href="#" class="btrfs_import" data-disk-id="{{this.id}}" title="Click to import data (pools, shares and snapshots) on this disk automatically. Multi-device support included." rel="tooltip">\n                <i class="glyphicon glyphicon-circle-arrow-down"></i></a>\n            {{else}}\n                {{#if (hasUserRole this.role)}}\n                    <a href="#disks/role/{{this.id}}" class="user_role_whole" data-disk-id="{{this.id}}" title="Whole Disk Role found, click to inspect/edit." rel="tooltip">\n                    <i class="glyphicon glyphicon-tag"></i></a>\n                {{else}}\n                    {{#if this.pool_name}}\n                        <i class="glyphicon glyphicon-map-marker" title="Whole drive is mapped to a Pool" rel="tooltip"></i>\n                    {{else}}\n                        {{#if (isOpenLuks this.role)}}\n                            <a href="#disks/role/{{this.id}}" class="no_user_role_whole" data-disk-id="{{this.id}}" title="Assign an optional Whole Disk Role (Excluding LUKS container or bcache), click to edit." rel="tooltip">\n                            <i class="glyphicon glyphicon-question-sign"></i></a>\n                        {{else}}\n                            <a href="#disks/role/{{this.id}}" class="no_user_role_whole" data-disk-id="{{this.id}}" title="Assign an optional Whole Disk Role (ie LUKS/bcache etc), click to edit." rel="tooltip">\n                            <i class="glyphicon glyphicon-question-sign"></i></a>\n                        {{/if}}\n                    {{/if}}\n                {{/if}}\n            {{/if}}\n        {{/if}}\n          <!-- All of the following are additive role identification flags,\n          they are found independently and in addition to other roles.\n          Ie the root fs (flagged above) on an open LUKS container. -->\n          {{#if (isOpenLuks this.role)}}\n          <a href="#disks/luks/{{this.id}}" class="open_luks_drive" data-disk-id="{{this.id}}"\n             title="Open LUKS Volume." rel="tooltip">\n              <i class="glyphicon glyphicon-eye-open"></i></a>\n          {{/if}}\n      </td>\n      <td>\n        {{#checkSerialStatus this.serial this.name}}\n        <div class="alert alert-danger"><h4>Warning! Disk unusable as pool member - serial number is not legitimate or unique.</h4>Disk names may change unfavourably upon reboot leading to inadvertent drive reallocation and potential data loss. This error is caused by the source of these disks such as your Hypervisor or SAN.\n          Please ensure that disks are provided with unique serial numbers before proceeding further.\n          See our <a href="http://rockstor.com/docs/quickstart.html#minimum-system-requirements" target="_blank">Minimum system requirements</a> for VMware config.</div>\n        {{else if this.serial}}\n        {{this.serial}}\n        &nbsp;&nbsp;&nbsp;&nbsp;<a href="#disks/blink/{{this.id}}" title="A tool to physically identify the hard drive with this serial number." rel="tooltip">\n          <i class="fa fa-lightbulb-o fa-lg"></i></a>&nbsp;\n        {{/checkSerialStatus}}\n      </td>\n      <td>{{humanReadableSize this.size}}</td>\n      <td>\n        {{#if pool_name}}\n        <a href="#pools/{{this.pool}}">{{this.pool_name}}</a>\n        {{/if}}\n      </td>\n      <td>\n        {{#if (powerStateNullorUnknown this.power_state)}}\n          <i class="glyphicon glyphicon-pause"></i>{{this.power_state}} <i class="glyphicon glyphicon-hourglass"></i>\n        {{else}}\n          {{#if (powerStateActiveIdle this.power_state)}}\n            <a href="#" class="pause" data-disk-id="{{this.id}}" title="Force drive into Standby mode." rel="tooltip"><i class="glyphicon glyphicon-pause"></i></a>\n          {{else}}\n            <i class="glyphicon glyphicon-pause"></i>\n          {{/if}}\n          {{this.power_state}} <a href="#disks/spindown/{{this.id}}" title="Click to configure Spin Down." rel="tooltip"><i class="glyphicon glyphicon-hourglass"></i></a>\n        {{/if}}\n        {{this.hdparm_setting}}\n      </td>\n      <td>{{humanReadableAPM this.apm_level}}</td>\n      <td>{{this.model}}</td>\n      <td>{{this.transport}}</td>\n      <td>{{this.vendor}}</td>\n      <td>\n        {{#if this.smart_options}}\n        {{this.smart_options}}&nbsp;\n        {{/if}}\n        <a href="#disks/smartcustom/{{this.id}}" title="Click to add/edit Custom SMART options. Rescan to Apply." rel="tooltip-top">\n          <i class="glyphicon glyphicon-pencil"></i></a>\n        {{#unless smart_available}}\n        Not Supported\n      </td>\n      {{else}}\n      <input type="checkbox" data-disk-id="{{this.id}}" data-size="mini" {{#if smart_enabled}}checked{{/if}}></input>\n      {{/unless}}\n      </td>\n    </tr>\n    {{/each}}\n  </tbody>\n</table>\n{{else}}\n<h4>No disks added. Click on Rescan to discover disks</h4>\n{{/if}}\n');
window.JST['disk_luks_disk'] = Handlebars.compile('<h3>{{display_luks_container_or_volume}}</h3>\nLUKS Containers are encrypted block devices. Once a LUKS container is unlocked\nit\'s otherwise encrypted and invisible filesystem (if any) is made available\nvia a second virtual block device. This unlocked counterpart is known as an\nOpen LUKS Volume and only exists whilst the LUKS Container remains unlocked.\n<p></p>\n<p class="text-warning">\n Closing an Open LUKS Volume is the equivalent of unplugging or detaching that\n virtual device. It will remain detached until it\'s parent LUKS container is\n unlocked again.\n</p>\n<p class="bg-info">\n <strong>Note:</strong> Custom LUKS Volume names are not supported; only\n canonical names of the form <i>luks-uuid</i>; resulting in auto generated\n by-id names: <i>dm-name-luks-uuid</i> (uuid from hosting container format).\n</p>\n<div id="crypttab_text">\n<h4>Boot up Configuration:</h4>\n <p class="bg-info">\n  <strong>WARNING:</strong> Custom LUKS Volume names will be overridden by\n  any <i>Boot up Configuration</i> submission.\n </p>\n<ul>\n <li>\n  <strong>No auto unlock</strong> The container will remain locked during and\n  after boot. Any filesystem or data on the device will be inaccessible until\n  it is manually unlocked via the command line.\n  <p class="text-warning">\n   As Rockstor currently mounts all pools during boot this configuration is\n   for advanced users. Only single device pools are recommended.\n  </p>\n   </li>\n <li>\n   <strong>Manual passphrase via local console</strong> Every time Rockstor is\n  booted or restarted it will wait indefinitely for the passphrase to be\n  entered (at the local console) before unlocking the container and\n  continuing on with a normal boot. A passphrase must also be entered (via:\n  <i>systemd-tty-ask-password-agent</i> as root) after wiping a LUKS Volume.\n  <p class="text-warning">\n   The system will not be functional until the passphrase has been entered.\n   Failure to enter the passphrase after a LUKS Volume wipe will result in a\n   locked container and detached volume.\n  </p>\n </li>\n <li>\n  <strong>Auto unlock via keyfile (Recommended)</strong> Unlock on every boot\n  by using a keyfile on the system drive. Unless Rockstor was installed using\n  the "Encrypt my data" option the system drive will not be encrypted and so\n  all keyfiles will also not be encrypted. This still protects against data\n  exposure if a drive is returned to a supplier, or for end-of-life scenarios;\n  so long as it is not accompanied by the system drive.\n  <p class="text-warning">\n   Rockstor generated keyfile example:\n   "/root/keyfile-fd168e30-5386-43b2-9f15-353b9ecff803". The characters\n   after \'-\' are the uuid of the LUKS container and the key is 2048 bytes\n   sourced from /dev/urandom (2^14 bit equivalent).\n  </p>\n  <p class="bg-info">\n   Non native or manually configured keyfiles are reported as "(custom)" and\n   left \'as is\'. But once a non keyfile config option is submitted a return\n   to keyfile config will yield a default Rockstor native keyfile generation\n   and registration. <i>No keyfile is currently deleted: custom or native.</i>\n  </p>\n </li>\n</ul>\n</div>\n<div class="row">\n <div class="col-md-8">\n  <label class="control-label"></label>\n  <div class="form-box">\n   <form class="form-horizontal" id="luks-disk-form" name="luksform">\n    <div class="messages"></div>\n\n    <!-- Form Header Info -->\n    <div class="form-group">\n     <div class="col-sm-offset-4 col-sm-8">\n      <h4>Drive name:&nbsp;&nbsp;<strong>{{diskName}}</strong></h4>\n      <h4>Serial number:&nbsp;&nbsp;<strong>{{serialNumber}}</strong></h4>\n      {{display_luks_container_wipe_link}}\n     </div>\n    </div>\n\n    <!-- Table displaying info for Open LUKS Volume -->\n    <div class="form-group" id="open_vol_status_table_group">\n     <label class="col-sm-4 control-label">Last Known Attached Attributes:</label>\n     <div class="col-sm-6">\n      <div class="openLuksVolTable">\n       <table id="open_luks_vol_table" class="table table-condensed table-bordered share-table tablesorter" summary="Open LUKS Volume Status">\n        <thead>\n        <tr>\n         <th>Attribute</th>\n         <th>Value</th>\n        </tr>\n        </thead>\n         {{display_luks_volume_status_table}}\n        </table>\n      </div>\n     </div>\n    </div><!--open_vol_status_table_group-->\n\n    <!-- /etc/crypttab entry selection -->\n    <div class="form-group" id="crypttab_selection_group">\n     <label class="col-sm-4 control-label" for="crypttab_selection">Boot up\n      configuration<span class="required"> *</span></label>\n     <div class="col-sm-4">\n      <select class="form-control" id="crypttab_selection"\n              name="crypttab_selection">\n       {{display_crypttab_entry}}\n      </select>\n     </div>\n    </div>\n\n    <!-- Display current keyfile -->\n    <div class="form-group" id="current_keyfile_group">\n     <div class="col-sm-offset-4 col-sm-8">\n      <h5>{{display_keyfile_path}}</h5>\n     </div>\n    </div>\n\n    <!-- Display Create Keyfile -->\n    <div class="form-group" id="create_keyfile_group">\n     <div class="checkbox">\n      <label class="col-sm-4 control-label" for="create_keyfile_tick"></label>\n      <div class="col-sm-4">\n       <input type="checkbox" name="create_keyfile_tick"\n              id="create_keyfile_tick">\n       <i class="fa fa-key"></i><i class="fa fa-file-o"></i>\n       {{display_create_keyfile_text}}\n      </div>\n     </div>\n     <div class="form-group" id="luks_passphrase_group">\n      <label class="col-sm-4 control-label" for="luks_passphrase">LUKS\n       Passphrase<span class="required"> *</span></label>\n      <div class="col-sm-4">\n       <input class="form-control shorten-input" type="password"\n              name="luks_passphrase" id="luks_passphrase"\n              title="Enter any Key Slot passphrase for this device to authorize the above action.">\n      </div>\n     </div>\n    </div>\n\n    <div class="form-group" id="cancel_submit_buttons_group">\n     <div class="col-sm-offset-4 col-sm-8">\n      <a id="cancel" class="btn btn-default">Cancel</a>\n      <input type="Submit" id="luks-disk" class="btn btn-primary"\n             value="Submit"></input>\n     </div>\n    </div>\n\n   </form>\n  </div>\n </div>\n</div>\n');
window.JST['disk_setrole_disks'] = Handlebars.compile('<h3>Configure drive Role / Wipe existing Filesystem / LUKS Format Whole Disk.</h3>\n  Drive Roles inform Rockstor of specific drive treatment and can drastically\n  alter a devices available options: not all roles are compatible. Please see:\n<a href="http://rockstor.com/docs/disks.html#disk-role-configuration"\n   target="_blank">Disk Role Configuration</a> in our online docs.\n<p></p>\n<p class="text-warning">\n  Changing a disk role can result in loss of data, please take care when\n  making changes on this page.\n</p>\n<p class="bg-info">\n  <strong>Note: </strong> No drive role is required for general purpose use.\n  <strong>Roles are for single drive use</strong> and not advised for multi\n  device pool members. <strong>"Whole Disk" is the default and recommended\n  setting.</strong>\n  For <a href="http://rockstor.com/docs/disks.html#import-btrfs-pool"\n  target="_blank">btrfs import</a> select the (btrfs) labeled device and\n  \'Submit\'. An import icon will then be offered on the Disk Page. Otherwise\n  intended new pool members must first be wiped.\n</p>\n<h4>Roles and their use:</h4>\n<ul>\n  <li>\n    The <strong>Redirect</strong> role is <strong>always required for\n    partitioned drives</strong>. Rockstor will only add the <i>redirect</i>\n    role itself when importing a multi device pool with \'btrfs in partition\'\n    members. All other cases require user selection of the desired partition,\n    including on the initial import device. <strong>Only one Redirect role\n    (partition) per device is supported.</strong>\n    <p class="text-warning">\n      A drive\'s <a href="http://rockstor.com/docs/disks.html#the-disk-redirect-role"\n      target="_blank">Redirect role</a> defines the\n      <a href="http://rockstor.com/docs/disks.html#wiping-a-partition-or-whole-disk" target="_blank">Wipe</a>\n      action. A Redirect + Wipe erases a partitions data and filesystem.\n      No Redirect + Wipe erases the entire drive and all it\'s partitions.\n      The wipe command used is "wipefs -a devname".\n    </p>\n  </li>\n  <li>\n    The <strong>Archive</strong> role: intended for single external drive use\n    (eg USB).\n    <br>\n    Compatible with the <i>Redirect</i> role.\n    <br>\n    <i>N.B. Not currently implemented</i>\n    <p></p>\n  </li>\n  <li>\n    The <strong>External Import</strong> role: intended for single external\n    drive use (eg USB). A data synchronization role where an external drive\'s\n    data is to be imported onto a designated internal share.\n    <br>\n    Compatible with the <i>Redirect</i> role.\n    <br>\n    <i>N.B. Not currently implemented</i>\n    <p class="text-warning">\n      Note: The external drive is the master source of truth. If a file is\n      changed on the external drive and the drive is then re-attached, the\n      next sync operation will update the designated share\'s version. Not\n      the other way around.\n    </p>\n  </li>\n</ul>\n<h4>LUKS Full Disk Encryption:</h4>\nBlank or freshly wiped devices can be LUKS encrypted. <strong>Rockstor does\nnot remember or record the associated passphrase.</strong><br>\n<i> A pool is only encrypted if all it\'s members are LUKS formatted.</i>\n<br>\n<strong>Passphrase Notes</strong> (Only use 7-bit ASCII(32-126) characters <strong>!"#$%&\'()*+,-./0-9:;<=>?@A-Z[\]^_`a-z{|}~</strong> )\n<ul>\n    <li>\n        Must be entered on every boot (using local console) unless \'Auto unlock via keyfile" is configured via the\n        Disks page lock icon (<i class="fa fa-lock" title="Full Disk LUKS Container (locked)." rel="tooltip"></i> /\n        <i class="fa fa-unlock" title="Full Disk LUKS Container (unlocked)." rel="tooltip"></i>).\n    </li>\n    <li>\n        Commonly shared across a systems drives: a single power on\n        entry then unlocks all drives.\n    </li>\n    <li>\n        <p class="text-warning">\nLUKS equivalent of system root password: initially the only way to unlock the disk\'s data.\n        </p>\n    </li>\n</ul>\n\n<div class="row">\n  <div class="col-md-8">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form class="form-horizontal" id="add-role-disk-form" name="aform">\n        <div class="messages"></div>\n\n        <!-- Form Header Info -->\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <h4>Drive name:&nbsp;&nbsp;<strong>{{diskName}}</strong></h4>\n            <h4>Serial number:&nbsp;&nbsp;<strong>{{serialNumber}}</strong></h4>\n            <h5>A selection of "Whole disk" means no Redirect role.</h5>\n          </div>\n        </div>\n\n        <!-- redirect partition selection -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="redirect_part">Select\n            Partition to use (filesystem)<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <select class="form-control" id="redirect_part"\n                    name="redirect_part">\n              {{display_disk_partitions}}\n            </select>\n          </div>\n        </div>\n\n        <div class="form-group" id="delete_tick_group">\n          <div class="checkbox">\n            <label class="col-sm-4 control-label" for="delete_tick"></label>\n            <div class="col-sm-4">\n              <input type="checkbox" name="delete_tick" id="delete_tick">\n              <i class="fa fa-eraser"></i>\n              Tick to wipe the data and filesystem on the above \'active\' device.\n              Whole Disk removes all partitions.\n            </div>\n          </div>\n        </div>\n\n        <div class="form-group" id="delete_tick_warning">\n          <div class="col-sm-offset-4 col-sm-8">\n            <h4><strong><p style="color:red">WARNING: THIS WILL DELETE ALL DATA ON THE ABOVE DEVICE.</p></strong></h4>\n            If unsure please click Cancel.\n          </div>\n        </div>\n\n        <!-- LUKS options, ie Tick Box and pass entries -->\n        <div class="form-group" id="luks_options">\n          <!-- LUKS Enable Tick Box -->\n          <div class="form-group" id="luks_tick_group">\n            <div class="checkbox">\n              <label class="col-sm-4 control-label" for="luks_tick"></label>\n              <div class="col-sm-4">\n                <input type="checkbox" name="luks_tick" id="luks_tick">\n                <i class="fa fa-eye"></i>\n                    Tick to enable Whole Disk Encryption (LUKS Format). See LUKS notes above.\n              </div>\n            </div>\n          </div>\n\n          <!-- LUKS Master Passphrase Group -->\n          <div class="form-group" id="luks_passwords">\n            <!--  LUKS Master Passphrase one  -->\n            <div class="form-group" id="luks_pass_one_group">\n              <label class="col-sm-4 control-label" for="luks_pass_one">LUKS\n                Master Passphrase<span class="required"> *</span></label>\n              <div class="col-sm-4">\n                <input class="form-control shorten-input" type="password"\n                       name="luks_pass_one" id="luks_pass_one"\n                       title="Suggested character length = 14(min)-18 if random, 108-140 if english words.">\n              </div>\n            </div>\n            <!--  LUKS Master Passphrase Two  -->\n            <div class="form-goup" id="luks_pass_two_group">\n              <label class="col-sm-4 control-label" for="luks_pass_two">\n                Retype to Verify<span class="required"> *</span></label>\n              <div class="col-sm-4">\n                <input class="form-control shorten-input" type="password"\n                       name="luks_pass_two" id="luks_pass_two"\n                       title="Suggested character length = 14(min)-18 if random, 108-140 if english words.">\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="role-disk" class="btn btn-primary"\n                   value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['disk_smartcustom_disks'] = Handlebars.compile('<h3>Add drive specific custom S.M.A.R.T options</h3>\n<p>Please see the <a href="https://www.smartmontools.org/" target="_blank">Smartmontools</a> manual page for \n    <a href="https://www.smartmontools.org/browser/trunk/smartmontools/smartctl.8.in" target="_blank"> smartctl</a>\n    for possible custom options.</p>\n<li>For smartmontools supported USB attached devices, ie USB to SATA adapters, please see: <a\n    href="https://www.smartmontools.org/wiki/Supported_USB-Devices" target="_blank">USB Device Support</a>.\n</li>\n<br>\n<li>For smartmontools supported RAID controllers please see: <a\n    href="https://www.smartmontools.org/wiki/Supported_RAID-Controllers" target="_blank">Checking disks behind RAID controllers</a>.\n  <br><i>Note: \'autodev\' option for hpt, megaraid, and aacraid to replace /dev/sdX parameter, JBOD assumed.</i>\n</li>\n<br>\n<p class="text-warning">This is an advanced option that is only required in specific circumstances.\n Please follow the above links to understand any options you choose to enter.</p>\n<p class="bg-info"><strong>Note: </strong>Supported smart options are <strong>-d</strong> to specify special devices and <strong>-T</strong> to set\ntolerance. Internally Rockstor already uses -a, --info, -H, -c, -l, -t, and -s.<br>\nThe custom options entered here will be added to these existing internal options.</p>\n\n<div class="row">\n  <div class="col-md-8">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form class="form-horizontal" id="add-smartcustom-disk-form"  name="aform" >\n        <div class="messages"></div>\n\n        <!-- Form Header Info (need link to web help in here)-->\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <h4>Drive name:&nbsp;&nbsp;<strong>{{diskName}}</strong></h4>\n            <h4>Serial number:&nbsp;&nbsp;<strong>{{serialNumber}}</strong></h4>\n          </div>\n        </div>\n\n        <!-- Custom SMART options -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="smartcustom_options">Custom Options<span class="required"> *</span></label>\n          <div class="col-sm-8">\n            <input class="form-control shorten-input" type="text" name="smartcustom_options" id="smartcustom_options" title="Custom S.M.A.R.T options required to enable or enhance this drives smart responses. Submit empty for no options." value="{{ currentSmartCustom }}">\n          </div>\n        </div>\n\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="smartcustom-disk" class="btn btn-primary" value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['disk_spindown_disks'] = Handlebars.compile('<h3>Add drive specific Spin down time</h3>\n<li><p>This is the time a drive must remains <strong>Idle</strong> before\n  spinning down it\'s disks / platters to save on power and reduce drive noise.\n<li><p>Idle periods a disk activity can be encouraged by adding <strong>Task\n    execution time windows</strong> to relevant <strong>Scheduled Tasks</strong>.\n  <i>See System - Scheduled Tasks</i>\n</p></li>\n\n<p class="text-warning">Please note that a drive\'s <i>initial</i> response time when in\n  <strong>standby</strong> mode is typically increased by tens of seconds\n  as the disk motor takes time to re-energize the platters.</p>\n  \n<p class="bg-info"><strong>Note: </strong>The value entered here will be used by hdparm -S to set this drives Spin\n  down delay. If this delay is set too small for a specific work load then the\n  the drive will spend more time than necessary spinning up and down and have\n  an unnecessary impact on performance and wear levels. Conversely a high or\n  non existent spin down time may waste energy and cause a drive to create\n  unwanted noise and heat. For HOME or SMALL OFFICE consider values in the\n  range of 20 minutes. For larger installs consider values greater than 1 hour.\n</p>\n\n<div class="row">\n  <div class="col-md-8">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form class="form-horizontal" id="add-spindown-disk-form" name="aform">\n        <div class="messages"></div>\n\n        <!-- Form Header Info -->\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <h4>Drive name:&nbsp;&nbsp;<strong>{{diskName}}</strong></h4>\n            <h4>Serial number:&nbsp;&nbsp;<strong>{{serialNumber}}</strong></h4>\n          </div>\n        </div>\n\n        <!-- Spindown time selection -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="spindown_time">Idle Time\n            prior to Spin Down<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <select class="form-control" id="spindown_time"\n                    name="spindown_time">\n              {{display_spindown_time}}\n            </select>\n          </div>\n        </div>\n\n        <!-- Enable APM setting checkbox -->\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <label class="checkbox inline">\n              <input type="checkbox" id="enable_apm" checked="true"\n                     name="enable_apm"> Enable APM setting\n            </label>\n          </div>\n        </div>\n\n        <!-- APM setting group of Slider + Text box for value  -->\n        <div class="form-group" id="slider-entry">\n          <label class="col-sm-4 control-label" for="apm_value">APM\n            setting</label>\n          <div class="col-sm-8">\n            <div id="slider" class="control-label" style="width: 400px;"></div>\n            <input class="col-sm-3" type="text"\n                   name="apm_value" id="apm_value" value="0"\n                   title="Enter APM Value">\n          </div>\n        </div>\n\n        <!-- APM slider key group -->\n        <div class="form-group" id="slider-key">\n          <div class="col-xs-8 col-xs-offset-4">\n            <div style="width: 15px; height: 15px; float: left"\n                 class="slider-legend-free"></div>\n            <div>&nbsp;<span id="slide_lower_half"></span>&nbsp;(1-127) May be\n              required for spin down - (lower power & performance).\n            </div>\n            <br>\n            <div style="width: 15px; height: 15px; float: left"\n                 class="slider-legend-reclaimable"></div>\n            <div>&nbsp;<span id="slide_upper_half"></span>&nbsp;(128-254) May\n              inhibit spin down - (higher power & performance).\n            </div>\n            <br>\n            <div style="width: 15px; height: 15px; float: left"\n                 class="slider-legend-used"></div>\n            <div>&nbsp;<span id="slide_disabled"></span>&nbsp;(255) APM off.\n            </div>\n          </div>\n        </div>\n\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="spindown-disk" class="btn btn-primary"\n                   value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['email_email'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n<div class="row">\n<div class="col-md-8">\n<div class="panel panel-default">\n<div class="panel-heading">Setup Email for alerts</div>\n<div class="panel-body">\n\n  <form id="email-form" name="email-form" class="form-horizontal" autocomplete="off">\n    <div class="messages"></div>\n    <div class="form-group">\n      <label class="col-sm-4 control-label">Name<span class="required"> *</span></label>\n      <div class="col-sm-4">\n      <input class="form-control" type="text" id="name" name="name" {{add_email "name"}}>\n      </div>\n    </div>\n\n    <div class="form-group">\n      <label class="col-sm-4 control-label">Sender email<span class="required"> *</span></label>\n      <div class="col-sm-4">\n      <input class="form-control check-smtp-auth" type="email" id="sender" name="sender" {{add_email "email"}}>\n      </div>\n    </div>\n\n    <div class="form-group">\n      <div class="col-sm-offset-4 col-sm-8">\n        <label class="checkbox inline">\n          <input type="checkbox" id="enable_username" name="enable_username"> Force username for SMTP Authentication\n        </label>\n      </div>\n    </div>\n\n    <div class="form-group">\n      <label class="col-sm-4 control-label">Username<span class="required"> *</span></label>\n      <div class="col-sm-4">\n      <input class="form-control check-smtp-auth" type="text" id="username" name="username" {{add_email "username"}} disabled="true">\n      </div>\n    </div>\n\n    <div class="form-group">\n      <label class="col-sm-4 control-label">Password<span class="required"> *</span></label>\n      <div class="col-sm-4">\n        <input class="form-control check-smtp-auth" type="password"  name="password" title="Password for the above email address">\n      </div>\n    </div>\n\n    <div class="form-group">\n      <label class="col-sm-4 control-label">SMTP Server<span class="required"> *</span></label>\n      <div class="col-sm-4">\n      <input class="form-control check-smtp-auth" type="text" id="smtp_server" name="smtp_server" {{add_email "smtp"}}>\n      </div>\n    </div>\n\n    <div class="form-group">\n      <label class="col-sm-4 control-label">SMTP Port</label>\n      <div class="col-sm-4">\n	<input class="form-control check-smtp-auth" type="text" id="port" name="port" {{add_email "port"}}>\n      </div>\n    </div>\n\n    <div class="form-group">\n      <div class="col-sm-offset-4 col-sm-8">\n        <label class="radio inline">\n          <input type="radio" name="secured_connection" value="TLS" checked> Secured connection using TLS\n        </label>\n      </div>\n    </div>\n\n    <div class="form-group">\n      <label class="col-sm-4 control-label">Recipient Email<span class="required"> *</span></label>\n      <div class="col-sm-4">\n      <input class="form-control" type="email" id="receiver"  name="receiver" {{add_email "recipient"}} >\n      </div>\n    </div>\n\n    <div class="form-group">\n      <div class="col-xs-8 col-xs-offset-4">\n        <a id="cancel" class="btn btn-default">Cancel</a>\n        <input type="Submit" id="add-email" class="btn btn-primary" value="Submit"></input><br/><br/>\n		<button type="button" id="test-smtp" class="btn btn-primary">Test current SMTP params</button>\n      </div>\n    </div>\n  </form>\n  <div class="alert alert-success auth-results" id="auth_success" style="display: none;">\n  <strong>SMTP Authentication was successful</strong> Save your settings\n  </div>\n  <div class="alert alert-danger auth-results" id="auth_failed" style="display: none;">\n  <strong>SMTP Authentication failed!</strong> Please update your settings before saving.\n  <br/>If using a Google account please remember to enable\n  <a target="_new" href="https://support.google.com/mail/answer/185833">App Passwords</a> after \n  <a terget="_new" herf="https://support.google.com/accounts/answer/185839">Google 2-Step Verification</a> or\n  <a target="_new" href="https://support.google.com/a/answer/6260879">Allow less secure apps to access accounts</a>\n  </div>\n</div><!--panel-body-->\n</div><!--col-md-8 -->\n</div><!--panel-default -->\n</div><!-- row-->\n\n');
window.JST['email_email_setup'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n<div class="row-fluid">\n  <div class="span8">\n    <label class="control-label"></label>\n        <div class="messages">\n        {{#if isEmailNull}}\n        <div class="controls">\n	  <div class="alert alert-warning">\n	    <p>Rockstor can push notifications to you via e-mail. We recommend\n	      creating a separate dedicated e-mail account for this purpose.\n	      Rockstor will login to this e-mail account and use it to send\n	      notifications to another specified e-mail address, such as your\n	      personal gmail account.</p>\n	  </div>\n      	<button type="Submit" id="Add-email-address" class="btn btn-primary" title="Add an e-mail account to be used for sending notifications.">Add an E-mail account</button>\n        {{else}}\n	<div class="alert alert-warning">\n	  <p>Rockstor uses the credentials below to send e-mail notifications. Any\n	    system information sent to the root user results in a\n	    notification. Rockstor assumes/uses the <b>Sender</b> account and from\n	    that account sends e-mails to the <b>Receiver</b>\n	    email address. The <b>Sender</b> e-mail account password is stored in\n	    <code>/etc/postfix/sasl_passwd</code> which has restricted\n	    permissions. However, we strongly recommend against using a personal\n	    or important e-mail account for the <b>Sender</b>. On the other\n	    hand the <b>Receiver</b> e-mail address can be anything you have\n	    access to and is simply the recipient of the notifications.\n	  </p>\n\n	  <p>To test if notifications are setup properly, click\n	     on <i class="glyphicon glyphicon-send"></i> icon below to send a\n	     test message.\n	  </p>\n	</div>\n        <table id="email-table" class="table table-condensed table-bordered table-hover table-striped share-table " >\n          <thead>\n            <tr>\n              <th scope="col" abbr="Sender">Sender</th>\n	      <th scope="col" abbr="Receiver">Reciever</th>\n	      <th scope="col" abbr="smtp-server">SMTP Server</th>\n	      <th scope="col" abbr="port">Port</th>\n              <th scope="col" abbr="Actions">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{{email.sender}}</td>\n              <td>{{email.receiver}}</td>\n              <td>{{email.smtp_server}}</td>\n	      <td>{{email.port}}</td>\n              <td>\n                <a href="#" class="email-delete" id="email-delete" rel="tooltip" title="Delete email"><i class="glyphicon glyphicon-trash"></i></a>\n		<a href="#" class="send-test-message" id="send-test-message" rel="tooltip" title="Send a test e-mail"><i class="glyphicon glyphicon-send"></i></a>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        {{/if}}\n        </div>\n\n        </div>\n  </div>\n</div>\n\n<div id="test-message-confirm" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n	<button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>\n	<h3 id="myModalLabel">Test e-mail sent successfully.</h3>\n      </div>\n      <div class="modal-body">\n	<p>Test e-mail has been successfully queued to postfix. Your mail from <code>{{email.sender}}</code> to <code>{{email.receiver}}</code> could take up to several minutes to arrive. If you do not receive it, check <code>/var/log/maillog</code> for clues. You may want to verify the input, delete and add the E-mail account again.</p>\n      </div>\n    </div>\n  </div>\n</div>\n');
window.JST['home_cpuusage'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<!-- Header -->\n<div class="row">\n  <div class="col-md-12">\n    <div class="module-header">\n      <div class="title"><span class="h3">CPU</span></div>\n      <div class="gear"><a id="configure-module" href="#"><img src="img/gear.png" width="18px" /></a></div>\n    </div>\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <!-- Content -->\n    <div class="module-content">\n      <div class="row">\n        <div class="col-md-12">\n          <div id="cpuusage"> </div>\n        </div>\n      </div>\n    </div>\n    <!-- End Content -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n<!-- end module body -->\n\n');
window.JST['home_home_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="widgets-container"></div>\n\n<div id="dashboard-config-popup" class="modal hide fade">\n  <div id="dashboard-config-content">\n    <div class="row">\n      <div class="col-md-12">\n        <h3>Select Dashboard widgets</h3>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n<div class="modal fade" id="update-version-modal">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-body">\n	<h3 id="update-version-modal-label">Thanks for installing Rockstor. We recommend updating to the latest version.</h3>\n	<br>\n	<h4>Would you like to update now?</h4>\n	<br>\n      </div>\n      <div class="modal-footer">\n	<button class="btn btn-default" data-dismiss="modal" aria-hidden="true">No, Thanks</button>\n	<a id="updateYes" class="btn btn-primary" title="Update">Update Now</a>\n      </div>\n    </div><!-- /.modal-content -->\n  </div><!-- /.modal-dialog -->\n</div>\n\n<div class="modal fade" id="update-channel-modal">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-body">\n	<h3 id="update-channel-modal-label">Stable updates are not activated.</h3>\n	<br>\n	<h4>We recommend activating Stable updates unless you wish to run cutting edge code and actively test Rockstor. By purchasing Stable subscription, you are providing the crucial support we need. So Thanks in advance!</h4>\n	<br>\n      </div>\n      <div class="modal-footer">\n	<button class="btn btn-default" data-dismiss="modal" aria-hidden="true">No, Thanks</button>\n	<a id="activate" class="btn btn-primary" title="Update">I\'ll activate</a>\n      </div>\n    </div><!-- /.modal-content -->\n  </div><!-- /.modal-dialog -->\n</div>\n');
window.JST['home_login_template'] = Handlebars.compile('\n<div class="row">\n  <div class="col-md-8">\n    <span class="h1">Rockstor</span>\n    <h2>Store Smartly.</h2>\n  </div>\n  <div class="col-md-4">\n    <form id="login_form" name="aform" >\n      <div id="login-box">\n        <div class="messages"></div>\n        <div class="form-group">\n          <label>Username</label>\n          <input type="text" id="username" name="login" placeholder="Username" >\n        </div>\n        <div class="form-group">\n          <label>Password</label>\n          <input type="password" id="password" name="password" placeholder="Password">\n        </div>\n        <div class="form-group">\n          <button type="submit" id="sign_in" class="btn btn-primary">Sign in</button>\n        </div>\n\n      </div>\n    </form>\n    \n </div>\n</div>\n');
window.JST['home_user_create_template'] = Handlebars.compile('\n\n<h3>Set hostname and create an Admin user</h3>\n\n<div class="form-box">\n  <form class="form-horizontal" id="user-create-form" name="aform" >\n\n    <div class="messages"></div>\n    <div class="form-group">\n      <div class="col-sm-offset-2 col-sm-10">\n	<div class="checkbox">\n	  <label>\n            <input type="checkbox" id="is_active" name="is_active" placeholder="EULA" required>I accept the Rockstor <a href="http://rockstor.com/eula.html" target="_blank">license agreement.</a>\n	  </label>\n	</div>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-sm-2 control-label" for="hostname">Hostname</label>\n      <div class="col-sm-3">\n        <input class="form-control" type="text" id="hostname" name="hostname" placeholder="Hostname" required>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-sm-2 control-label" for="username">Username</label>\n      <div class="col-sm-3">\n	<input class="form-control" type="text" id="username" name="username" placeholder="Username" required>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-sm-2 control-label" for="password">Password</label>\n      <div class="col-sm-3">\n	<input class="form-control" type="password" id="password" name="password" placeholder="Password" required>\n      </div>\n    </div>\n    <div class="form-group">\n      <label class="col-sm-2 control-label" for="password_confirmation">Confirm Password</label>\n      <div class="col-sm-3">\n	<input class="form-control" type="password" id="password_confirmation" name="password_confirmation" placeholder="Password" required>\n      </div>\n    </div>\n    <div class="form-group">\n      <div class="col-sm-3 col-sm-offset-2">\n	<button type="Submit" id="create-user" class="btn btn-primary right">Submit</button>\n      </div>\n    </div>\n  </form>\n</div>\n');
window.JST['logs_logs'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="container">\n<div class="row">\n	<div class="col-md-8" id="reader-block">\n		<div class="panel panel-default">\n                	<div class="panel-heading">\n                        	<h3 class="panel-title">Logs Reader</h3>\n                        </div>\n                        <div class="panel-body" id="log_funcs">\n				<form class="form-inline">\n					<div class="form-group">\n					<label class="inline">Reading method: </label>\n					<select class="form-control" id="read_type" name="read_type" rel="tooltip" title="Read log with tail last 200 lines(default), tail last 30 lines, cat(full file read) or tail -f (Live Log Reading)">\n                                                <option value="tail200"> tail -n 200</option>\n						<option value="tail30"> tail -n 30</option>\n                                                <option value="cat"> cat -n</option>\n						<option value="tailf"> tail -f</option>\n            				</select>\n					<label class="inline">Log file: </label>\n                                        <select class="form-control" id="logs_options" name="logs_options" rel="tooltip" title="Select which log to read">\n                                        {{print_logs_options}}\n					</select>&nbsp;\n					<input type="button" id="live-log" class="btn btn-primary" value="Read log">\n					</form>\n					</div>\n                        </div>\n		</div>\n\n	</div>\n</div>\n	<div class="row">\n	<div class="col-md-8">\n                <div class="panel panel-default">\n                        <div class="panel-heading">\n                                <h3 class="panel-title">Logs Downloader :: compressed packet builder</h3>\n                        </div>\n		<div class="panel-body">		\n		<div class="col-md-6">\n			<div class="panel panel-default">\n				<div class="panel-heading">\n					<h3 class="panel-title">\n						Available Logs\n					</h3>\n				</div>\n				<div class="panel-body" id="avail_logs" style="overflow-y: auto; height: 170px;">\n				{{print_logs_divs}}\n				</div>\n			</div>\n		</div>\n		<div class="col-md-6">\n			<div class="panel panel-default">\n				<div class="panel-heading">\n					<h3 class="panel-title">\n					Logs Download Queue\n					</h3>\n				</div>\n				<div class="panel-body" id="download_logs" style="overflow-y: auto; height: 170px;">\n				</div>\n			</div>\n		</div>\n		</div>\n		<div class="panel-footer">\n        		<div class="row">\n            			<div class="col-md-8">\n					<label class="inline" id="download_response"></label>\n				</div>\n				<div class="col-md-4 text-right">\n					<input type="button" id="download-logs" class="btn btn-primary" value="Download Logs Archive">\n				</div>\n        		</div>\n		</div>\n		</div>\n	</div>\n	</div>\n</div>\n<div id="log_reader" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="LogReaderLabel" aria-hidden="true">\n  <div class="modal-dialog" style="overflow-y: initial;">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n                <a style="float: right; margin-right: 5px;" href="#" id="modal_resize">\n                <i class="glyphicon glyphicon-resize-full"></i>\n                </a>\n                <a style="float: right; margin-right: 5px;" href="#" id="code_increase_size">\n                <i class="glyphicon glyphicon-text-height"></i>\n                </a>\n                <a style="font-size: 8px; float: right; margin-right: 5px;" href="#" id="code_decrease_size">\n                <i class="glyphicon glyphicon-text-height"></i>\n                </a>\n	<div class="row">\n		<div class="col-md-5">\n        	<h4 id="LogReaderLabel">Content of selected log</h4>\n		</div>\n		<div class="col-md-4">\n		<h4>\n			<b>Content Size:</b>&nbsp;<span id="logsize"></span><br/>\n			<a href="#" id="reader-logs" name="reader-logs">Download full Log file <i class="glyphicon glyphicon-download-alt"></i></a>\n			<a style="visibility: hidden;" href="#" id="reader-log-download" name="reader-log-download" download>.</a>\n		</h4>\n		</div>\n	</div>\n      </div>\n      <div class="modal-body">\n	<pre style="overflow-y: auto; height: 300px;"><span><code style="font-size: 11px;" id="system_log" name="system_log"></code></span></pre>\n      </div>\n      <div class="text-center"><label>Log reading progress</label></div>\n      <div class="modal-footer text-center">\n	<div class="progress">\n	<div id="reader_progress" name="reader_progress" class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%">\n	0%\n    	</div>\n	</div>\n      </div>\n    </div>\n  </div>\n</div>\n\n');
window.JST['network_network'] = Handlebars.compile('<script>\n    /*\n     * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>\n     * This file is part of RockStor.\n     *\n     * RockStor is free software; you can redistribute it and/or modify\n     * it under the terms of the GNU General Public License as published\n     * by the Free Software Foundation; either version 2 of the License,\n     * or (at your option) any later version.\n     *\n     * RockStor is distributed in the hope that it will be useful, but\n     * WITHOUT ANY WARRANTY; without even the implied warranty of\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n     * General Public License for more details.\n     *\n     * You should have received a copy of the GNU General Public License\n     * along with this program. If not, see <http://www.gnu.org/licenses/>.\n     *\n     */\n</script>\n\n\n<!-- Module Body -->\n<div class="row">\n    <div class="col-md-12">\n        <div class="messages"></div>\n        <!-- Content -->\n        <h3>Network Connections</h3>\n        <table id="networks2-table"\n               class="table table-condensed table-bordered table-hover table-striped share-table tablesorter"\n               summary="List of network connections">\n            <thead>\n            <tr>\n                <th scope="col" abbr="Name">Name</th>\n                <th scope="col" abbr="UUID">UUID</th>\n                <th scope="col" abbr="Type">Type</th>\n                <th scope="col" abbr="State">State</th>\n                <th scope="col" abbr="Method">Connection method</th>\n                <th scope="col" abbr="Address">IP Address</th>\n                <th scope="col" abbr="Gateway">Gateway</th>\n                <th scope="col" abbr="DNS">DNS Servers</th>\n                <th scope="col" abbr="DNS Search">DNS Search Domains</th>\n                <th scope="col" abbr="MTU">MTU</th>\n            </tr>\n            </thead>\n            <tbody>\n            {{#each parent_connections}}\n            <tr id="{{this.uuid}}">\n                <td class="accordion-toggle" data-toggle="collapse"\n                    data-parent="#connections"\n                    data-target="#accordion-{{this.id}}"><a> {{this.name}}</a>&nbsp;&nbsp;\n                    <a href="#network/edit/{{this.id}}"><i\n                            class="glyphicon glyphicon-pencil"></i></a>\n                    <a id="{{this.id}}" data-action="delete" rel="tooltip"\n                       title="Delete connection"><i\n                            class="glyphicon glyphicon-trash"></i></a></td>\n                <td>{{this.uuid}}</td>\n                <td>{{this.ctype}} {{#if\n                    this.team_profile}}[{{this.team_profile}}]{{/if}}{{#if\n                    this.bond_profile}}[{{this.bond_profile}}]{{/if}}\n                </td>\n                <td>{{this.state}}&nbsp;&nbsp;\n                    <input type="checkbox" data-connection-id="{{this.id}}"\n                           data-name="{{this.name}}" data-size="mini"\n                           {{getState this.state}}>\n                    <div class="command-status"\n                         data-connection-id="{{this.id}}">&nbsp;</div>\n                    <div class="simple-overlay" id="{{this.id}}-err-popup">\n                        <div class="overlay-content"></div>\n                    </div>\n                </td>\n                <td>{{this.ipv4_method}}</td>\n                <td>{{this.ipv4_addresses}}</td>\n                <td>{{this.ipv4_gw}}</td>\n                <td>{{this.ipv4_dns}}</td>\n                <td>{{this.ipv4_dns_search}}</td>\n                <td>{{this.mtu}}</td>\n            </tr>\n            <tr>\n                <td colspan="5" class="hiddenRow">\n                    <div class="accordion-body collapse"\n                         id="accordion-{{this.id}}">\n                        {{#hasChildren this}}\n                        {{#if this.team_profile}}\n                        <h4>Team Profile: {{this.team_profile}}</h4>\n                        {{/if}}\n                        {{#if this.bond_profile}}\n                        <h4>Bond Profile: {{this.bond_profile}}</h4>\n                        {{/if}}\n                        <p>member Connections</p>\n                        <table class="table table-bordered">\n                            <tr>\n                                <th>Name</th>\n                                <th>UUID</th>\n                                <th>Type</th>\n                                <th>Status Code</th>\n                            </tr>\n                            {{#each ../child_connections}}\n                            <tr>\n                                <td>{{this.name}}</td>\n                                <td>{{this.uuid}}</td>\n                                <td>{{this.ctype}}</td>\n                                <td>{{this.state}}</td>\n                            </tr>\n                            {{/each}}\n                        </table>\n                        {{/hasChildren}}\n                        <p>member Devices</p>\n                        <table class="table table-bordered">\n                            <tr>\n                                <th>Name</th>\n                                <th>Type</th>\n                                <th>MAC Address</th>\n                                <th>MTU</th>\n                                <th>Status Code</th>\n                                <th>Member of</th>\n                            </tr>\n                            {{#each ../devices}}\n                            {{#if (belongsToConnection ../this.id\n                            this.connection)}}\n                            <tr>\n                                <td>{{this.name}}</td>\n                                <td>{{this.dtype}}</td>\n                                <td>{{this.mac}}</td>\n                                <td>{{this.mtu}}</td>\n                                <td>{{this.state}}</td>\n                                <td>{{this.cname}}</td>\n                            </tr>\n                            {{/if}}\n                            {{/each}}\n                        </table>\n                    </div>\n                </td>\n            </tr>\n            {{/each}}\n            </tbody>\n        </table>\n        <a href="#network/add" id="add-connection" class="btn btn-primary"> Add\n            Connection</a><br><br>\n        <h3>Network Devices</h3>\n        <table id="network-devices-table"\n               class="table table-condensed table-bordered table-hover table-striped share-table tablesorter"\n               summary="List of network devices/interfaces">\n            <thead>\n            <tr>\n                <th scope="col" abbr="Name">Name</th>\n                <th scope="col" abbr="Type">Type</th>\n                <th scope="col" abbr="Mac">MAC Address</th>\n                <th scope="col" abbr="MTU">MTU</th>\n                <th scope="col" abbr="State">Status Code</th>\n                <th scope="col" abbr="Connection">Member of</th>\n            </tr>\n            </thead>\n            <tbody>\n            {{#each devices}}\n            <tr id="{{this.name}}">\n                <td>{{this.name}}</td>\n                <td>{{this.dtype}}</td>\n                <td>{{this.mac}}</td>\n                <td>{{this.mtu}}</td>\n                <td>{{this.state}}</td>\n                <td>{{this.cname}}</td>\n            </tr>\n            {{/each}}\n            </tbody>\n        </table>\n        <div>\n            {{pagination}}\n        </div>\n\n    </div> <!-- col-md-12 -->\n</div> <!-- row -->\n');
window.JST['network_new_connection'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="row">\n  <div class="panel panel-default">\n  {{#if connection}}\n  <div class="panel-heading">Edit network connection: {{connection.name}}</div>\n  {{else}}\n  <div class="panel-heading">Add a new network connection</div>\n  {{/if}}\n    <div class="panel-body">\n      <form class="form-horizontal" id="new-connection-form" name="aform">\n        <div class="messages"></div>\n	<div class="form-group">\n          <label class="col-sm-4 control-label" for="name">Name<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" id="name" name="name" {{#if connection}}value="{{connection.name}}" disabled{{/if}}>\n          </div>\n	</div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="ctype">Connection Type<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <select class="form-control" id="ctype" name="ctype" {{#if connection}}disabled{{/if}}>\n	      {{#each ctypes}}\n	      <option value="{{this}}" {{#if ../connection}}{{selectedCtype this}}{{/if}}>{{this}}</option>\n	      {{/each}}\n            </select>\n          </div>\n        </div>\n        <div id="singleDevice">\n            <div class="form-group">\n                <label class="col-sm-4 control-label" for="device">Device <span class="required"> *</span></label>\n		<div class="col-sm-4">\n                  <select class="form-control" id="device" name="device" {{#if connection}}disabled{{/if}}>\n                    {{#each devices}}\n                    <option value="{{this.name}}" {{#if ../connection}}{{selectedDevice this}}{{/if}}>{{this.name}}{{#if this.cname}}  [part of connection: {{this.cname}}]{{/if}}</option>\n                    {{/each}}\n                  </select>\n		</div>\n            </div>\n        </div><!--close ethernetDeviceDropdown -->\n        <div id="teamProfiles" style="display:none;">\n            <div class="form-group">\n              <label class="col-sm-4 control-label" for="team_profile">Team Profile<span class="required"> *</span></label>\n              <div class="col-sm-4">\n                <select class="form-control" id="team_profile" name="team_profile" {{#if connection}}disabled{{/if}}>\n              {{#each teamProfiles}}\n                <option value="{{this}}" {{#if ../connection}}{{selectedTeamProfile this}}{{/if}}>{{this}}</option>\n              {{/each}}\n                </select>\n              </div>\n            </div>\n        </div><!--close teamProfiles -->\n        <div id="bondProfiles" style="display:none;">\n            <div class="form-group">\n              <label class="col-sm-4 control-label" for="bond_profile">Bond Profile<span class="required"> *</span></label>\n              <div class="col-sm-4">\n                <select class="form-control" id="bond_profile" name="bond_profile" {{#if connection}}disabled{{/if}}>\n              {{#each bondProfiles}}\n                <option value="{{this}}" {{#if ../connection}}{{selectedBondProfile this}}{{/if}}>{{this}}</option>\n              {{/each}}\n                </select>\n              </div>\n            </div>\n        </div><!--close bondProfiles -->\n        <div id="multiDevice" style="display:none;">\n            <div class="form-group">\n                <label class="col-sm-4 control-label" for="devices">Devices <span class="required"> *</span></label>\n            <div class="col-sm-4">\n                <select class="form-control" id="devices" name="devices" size="20" data-placeholder="select devices" multiple="multiple" {{#if connection}}disabled{{/if}}>\n                    {{#each devices}}\n                        <option value="{{this.name}}" {{#if ../connection}}{{selectedDevice this}}{{/if}}>{{this.name}}{{#if this.cname}}  [part of connection: {{this.cname}}]{{/if}}</option>\n                    {{/each}}\n                </select>\n                <i class="fa fa-exclamation-circle" title="select 2 or more devices." rel="tooltip"></i>\n            </div>\n            </div>\n        </div><!--close multiDevice -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="method">Config Method<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <select class="form-control" id="method" name="method">\n              <option value="auto" {{#if connection}}{{#isAuto connection}}selected="selected"{{/isAuto}}{{/if}}>Auto (DHCP)</option>\n              <option value="manual" {{#if connection}}{{#isAuto connection}}{{else}}selected="selected"{{/isAuto}}{{/if}}>Manual</option>\n            </select>\n          </div>\n        </div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label">MTU</label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" id="mtu" name="mtu" {{#if connection}}value="{{connection.mtu}}"{{/if}} placeholder="1500">\n          </div>\n        </div>\n        <div id="methodOptionalFields" {{#if connection}}{{#isAuto connection}}style="display:none;"{{/isAuto}}{{else}}style="display:none;"{{/if}}>\n          <div class="form-group">\n          <label class="col-sm-4 control-label" for="ipaddr">IP Address<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text"  id="ipaddr" name="ipaddr" {{#if connection}}value="{{connection.ipv4_addresses}}"{{/if}} placeholder="IP Address">\n          </div>\n        </div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="gateway">Gateway</label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" id="gateway" name="gateway" {{#if connection}}value="{{connection.ipv4_gw}}"{{/if}} placeholder="Gateway">\n          </div>\n        </div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="dns_servers">DNS Servers</label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" id="dns_servers" name="dns_servers" {{#if connection}}value="{{connection.ipv4_dns}}"{{/if}} placeholder="DNS Servers">\n          </div>\n        </div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="search_domains">Search Domains</label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" id="search_domains" name="search_domains" {{#if connection}}value="{{connection.ipv4_dns_search}}"{{/if}} placeholder="Search Domains">\n          </div>\n        </div>\n        </div><!--close methodOptionalFields-->\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n	    <button id="cancel" class="btn btn-default">Cancel</button>\n	    <button type="Submit" id="submit" class="btn btn-primary">Submit</button>\n          </div>\n        </div>\n      </form>\n    </div> <!-- panel-body -->\n  </div> <!-- panel-default -->\n  </div> <!-- col-md-8 -->\n</div> <!-- row -->\n');
window.JST['nfs_advanced_edit'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="alert alert-warning"><strong>Warning!</strong> You are editing the nfs exports file. Incorrect values can affect your exports.</div>\n<div class="row">\n  <div class="col-md-8">\n    <div class="panel panel-default">\n    <div class="panel-heading">NFS Advanced Edit</div>\n    <div class="panel-body">\n    <div class="messages"></div>\n      <form class="form-horizontal" id="advanced-edit-form" name="aform">\n\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="nfs-text">Automatically added entries</label>\n          <div class="col-sm-8">\n            <textarea id="nfs-text-ro" name="nfs-text-ro" rows="5" class="form-control" disabled>{{ro_str}}</textarea>\n          </div>\n        </div>\n\n	      <div class="form-group">\n            <label class="col-sm-4 control-label" for="manual-export">Enter manual export entries below.</label>\n          <div class="col-sm-8">\n            <textarea id="nfs-text" name="nfs-text" rows="5" columns="40" class="form-control">{{rw_str}}</textarea>\n          </div>\n        </div>\n\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n	          <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="create-nfs-export" class="btn btn-primary" value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n\n  </div> <!--panel-body-->\n</div> <!--panel-default-->\n</div> <!--col-md-8->\n</div> <!--row-->\n');
window.JST['nfs_edit_nfs_export'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="row">\n<div class="col-md-8">\n<div class="panel panel-default">\n{{#if nfsExportNotEmpty}}\n<div class="panel panel-heading">Edit NFS export</div>\n{{else}}\n<div class="panel panel-heading">Add NFS export</div>\n{{/if}}\n<div class="panel-body">\n      <form class="form-horizontal" id="edit-nfs-export-form" name="aform" >\n        <div class="messages"></div>\n\n        <!-- Shares -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="shares">Shares to export<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <select class="form-control" name="shares" id="shares" size="10" data-placeholder="Select shares to export" multiple="multiple">\n              {{#each shares}} \n                   <option value="{{this.name}}" {{showSelectedShare this.name ../nfsExportGrp.exports}}>{{this.name}}</option>\n              {{/each}}\n            </select>\n          </div>\n        </div>\n\n        <!-- host string -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="host_str">NFS Clients<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input class="form-control" type="text" name="host_str" id="host_str" data-html = "true"\n	    title="Hosts permitted to NFS mount. There are five broad categories of this input.<br><strong>anonymous:</strong> Just type a single * character and any host will be allowed.<br><strong>single host:</strong> Hostname or a IP address.<br><strong>IP networks:</strong> All hosts of a subnet given by <strong>address/netmask</strong>.<br><strong>wildcards:</strong> Names with wildcard(*, ?) characters for compact notation. for example, *.cs.foo.edu matches all hosts in the domain cs.food.edu.<br><strong>Netgroups:</strong> NIS netgroups given as @group.<br><br>For more details read the manpage for exports."\n	    value="{{nfsExportGrp.host_str}}">\n          </div>\n        </div>\n\n	<!-- admin host -->\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="trusted_host">Admin\n	Host</span></label>\n	  <div class="col-sm-4">\n	    <input class="form-control" type="text" id="admin_host" name="admin_host" title="Hostname or IP of a host to be designated as the admin host. The\n		   export will be available for this host with rw and no_root_squash\n		   options so that root user can change ownership and permissions of\n		   various directories from this host. This is usually preferred in\n		   conjunction with NIS." value="{{nfsExportGrp.admin_host}}">\n	  </div>\n	</div>\n\n        <!-- writable -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="mod_choice">Access type</label>\n          <div class="col-sm-4">\n            {{#each modify_choices}}\n                <label class="radio-inline">\n                {{#if ../nfsExportGrp.editable}}\n                        <input type="radio" name="mod_choice" value="{{this.value}}" {{accessType_editView ../nfsExportGrp.editable this.value}}>\n                {{else}}          \n                        <input type="radio" name="mod_choice" value="{{this.value}}" {{accessType_addView this.name}}>\n                {{/if}}\n                {{this.name}}</label>\n            {{/each}}\n          </div>\n        </div>\n\n        <!-- sync -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="sync_choice">Response type</label>\n          <div class="col-sm-4">\n          {{#each sync_choices}}\n                <label class="radio-inline">\n                {{#if ../nfsExportGrp.syncable}}\n                        <input type="radio" name="sync_choice" value="{{this.value}}" {{responseType_editView ../nfsExportGrp.syncable this.value}} >\n                {{else}}          \n                        <input type="radio" name="sync_choice" value="{{this.value}}" {{responseType_addView this.name}}>\n                {{/if}}\n                {{this.name}}</label>\n            {{/each}}\n          </div>\n        </div>\n\n        <!-- Submit -->\n        <div class="form-group">\n          <div class="col-xs-8 col-xs-offset-4">\n            <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="update-nfs-export" class="btn btn-primary" value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n    </div><!--panel-body-->\n</div><!--panel-default-->\n  </div> <!-- col-md-8 -->\n</div>  <!-- row -->\n');
window.JST['nfs_nfs_exports'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n  <div id="details-header">\n      <table>\n        <tr>\n          <td><span class="h3">NFS Service&nbsp;&nbsp;&nbsp;</span></td>\n          <td>\n          <input type="checkbox" name="nfs-export-checkbox" data-size="mini">\n        </td>\n        </tr>\n      </table>\n    </div>\n    <div id="nfs-warning" class="alert alert-warning" style="display:none">\n    	<strong>Warning! NFS Service is not running</strong>. Clients won\'t be able to mount unless NFS is running.\n    </div>\n    <br>\n    <div class="messages"></div>\n    <!-- Content -->\n    {{#if collectionNotEmpty}}\n      <table id="nfs-exports-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of nfs exports">\n        <thead>\n          <tr>\n            <th scope="col" abbr="Shares">Shares</th>\n            <th scope="col" abbr="Host String">Host String</th>\n            <th scope="col" abbr="Read only">Read only</th>\n            <th scope="col" abbr="Sync">Sync / Async</th>\n            <th scope="col" abbr="Actions">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{#each nfsCollection}}\n            <tr>\n                <td>\n                {{#each this.exports}}\n                    <a href="#shares/{{this.share_id}}">{{this.share}}</a> {{showNfsShares @index ../this.exports}}\n                {{/each}}\n                </td>\n                <td>{{this.host_str}}</td>\n                <td>{{showWritableOption this.editable}}</td>\n                <td>{{this.syncable}}</td>\n                <td><a href="#nfs-exports/edit/{{this.id}}"><i class="glyphicon glyphicon-pencil"></i></a>&nbsp;\n                <a href="#" class="delete-nfs-export" data-id="{{this.id}}"><i class="glyphicon glyphicon-trash"></i></a>\n                </td>\n            </tr>\n          {{/each}}\n        </tbody>\n      </table>\n    {{else}}\n      <table id="nfs-exports-table" class="table table-condensed table-bordered table-hover table-striped share-table tablesorter" summary="List of nfs exports">\n        <tbody>\n          <tr>\n            <td colspan="5">\n              <h4>No nfs exports have been created</h4>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n   {{/if}}\n  \n    {{#if collectionNotEmpty}}\n      Mount a share using <code>mount {{currentApplianceIp}}:/export/&lt;share_name&gt; &lt;mount_pt&gt;</code>\n    {{/if}}\n    <!-- End Content -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n<br>\n<a href="##nfs-exports/edit/-1" id="add-nfs-export" class="btn btn-primary"><i class="glyphicon glyphicon-edit "></i> Add NFS Export</a>\n<a href="#nfs-advanced-edit" id="nfs-advanced-edit" title="Edit /etc/exports file directly" class="btn btn-primary"><i class="glyphicon glyphicon-edit "></i> Advanced Edit</a>\n<!-- end module body -->\n');
window.JST['pool_add_pool_template'] = Handlebars.compile('<script>\n/*\n* Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n* This file is part of RockStor.\n*\n* RockStor is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published\n* by the Free Software Foundation; either version 2 of the License,\n* or (at your option) any later version.\n*\n* RockStor is distributed in the hope that it will be useful, but\n* WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program. If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n</script>\n\n<div class="row">\n<div class="col-md-8">\n<div class="panel panel-default">\n    <div class="panel-heading">Create Pool</div>\n\n    <div class="panel-body">\n        <form class="form-horizontal" name="add-pool-form" id="add-pool-form" >\n            <div class="messages"></div>\n            <div class="form-group">\n                <label class="col-sm-4 control-label" for="pool_name">Name<span class="required"> *</span></label>\n                <div class="col-sm-6">\n                    <input class="form-control" type="text" name="pool_name" id="pool_name" title="Following characters are allowed: letter(a-z or A-Z), digit(0-9), hyphen(-), underscore(_) or a period(.). ">\n                </div>\n            </div>\n            <div class="form-group">\n                <label class="col-sm-4 control-label" for="raid_level">Raid configuration<span class="required"> *</span></label>\n                <div class="col-sm-6">\n                    <select class="form-control" id="raid_level" name="raid_level">\n                        <option value="single">Single</option>\n                        <option value="raid0">Raid0</option>\n                        <option value="raid1">Raid1</option>\n                        <option value="raid10">Raid10</option>\n                        <option value="raid5">Raid5</option>\n                        <option value="raid6">Raid6</option>\n                    </select>\n                </div>\n            </div>\n            <div class="form-group">\n                <label class="col-sm-4 control-label" for="compression">Compression</label>\n                <div class="col-sm-6">\n                    <select class="form-control" id="compression" name="compression">\n                        <option value="no">Don\'t enable compression</option>\n                        <option value="zlib">zlib</option>\n                        <option value="lzo">lzo</option>\n                    </select>\n                </div>\n            </div>\n            <div class="form-group">\n                <label class="col-sm-4 control-label" for="mnt_options">Mount options</label>\n                <div class="col-sm-6">\n                    <input class="form-control" type="text" name="mnt_options" id="mnt_options" data-html="true" title="This is for <strong>Advanced users</strong> to provide specific BTRFS mount options.<br>Type them as a comma separated string of options without any spaces.<br> Allowed options are <strong>alloc_start, autodefrag, clear_cache, commit, compress-force, degraded, discard, fatal_errors, inode_cache, max_inline, metadata_ratio, noacl, noatime, nodatacow, nodatasum, nospace_cache, nossd, ro, rw, skip_balance, space_cache, ssd, ssd_spread, thread_pool</strong>">\n                </div>\n            </div>\n            <div class="form-group">\n                <label class="col-sm-4 control-label" for="disks">Select disks<span class="required"> *</span></label>\n                <div class="col-sm-6">\n                    <div class="poolDiskTableScroll">\n                        <table id="disks-table" class="table table-condensed table-bordered share-table tablesorter" summary="List of disks">\n                            <thead>\n                                <tr>\n                                <th>No.</th>\n                                <th>Disk Name</th>\n                                <th>Capacity</th>\n                                <th>Select all <input type="checkbox" id="checkAll"/></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {{#each disks}}\n                                    <tr>\n                                        <td>{{mathHelper @index}}</td>\n                                        <td>{{this.name}}\n                                            {{#if this.parted}}\n                                                <a href="#disks/role/{{this.id}}" class="user_role_part" data-disk-id="{{this.id}}" title="Partition (Redirect Role), click to edit. Capacity is for whole disk." rel="tooltip">\n                                                    <i class="glyphicon glyphicon-tags"></i></a>\n                                            {{/if}}\n                                            {{#if (isOpenLuks this.role)}}\n                                                <a href="#disks/luks/{{this.id}}" class="open_luks_drive" data-disk-id="{{this.id}}" title="Open LUKS Volume, click to review." rel="tooltip">\n                                                    <i class="glyphicon glyphicon-eye-open"></i></a>\n                                            {{/if}}\n                                        </td>\n                                        <td>{{humanReadableSize this.size}}</td>\n                                        <td>\n                                            <input type="checkbox" class="disk" name="{{this.name}}" id="{{this.id}}" value="{{this.name}}" />\n                                        </td>\n                                    </tr>\n                                {{/each}}\n                            </tbody>\n                        </table>\n                    </div><!--poolDiskTableScroll-->\n                </div>\n            </div>\n            <div class=form-group>\n                <label class="col-sm-4 control-label">Selected disks summary</label>\n                <div class="col-sm-6">\n                    <table id="selected-disks-table" class= "table table-condensed table-bordered share-table tablesorter"></table>\n                </div>\n            </div>\n            <div class="form-group">\n                <div class="col-sm-offset-4 col-sm-8">\n                    <a id="js-cancel" class="btn btn-default" href="#">Cancel</a>\n                    <input type="Submit" id="create_pool" class="btn btn-primary" value="Submit"></input>\n                </div>\n            </div>\n        </form>\n    </div> <!-- panel-body -->\n</div><!--panel-default-->\n</div><!--col-md-8-->\n</div><!--row-->\n');
window.JST['pool_compression_info'] = Handlebars.compile('<table id="comp-mnt-optns-table">\n    <tr>\n        <td>Compression algorithm: </td>\n        <td>&nbsp;&nbsp;\n            {{#if (isRoot pool.role)}}\n                {{pool.compression}}\n            {{else}}\n            <strong>\n            <a href="#" id="comprOptn" data-type="select"\n            data-title="Pool compression algorithm.<br><strong>zlib: </strong>\n            slower than lzo but higher compression ratio.<br><strong>lzo: </strong>faster than zlib but lower compression ratio.<br>\n            Pool level compression applies to all it\'s Shares.<br>Alternatively: consider Share level compression.\n            <br>Unchanged data remains at prior setting until balanced."\n            >{{pool.compression}}\n            </a>\n            </strong>\n            {{/if}}\n        </td>\n    </tr>\n    <tr>\n        <td>Extra mount options: </td>\n        <td>&nbsp;&nbsp;\n            {{#if (isRoot pool.role)}}\n                {{pool.mnt_options}}\n            {{else}}\n            <strong>\n            <a href="#" id="mntOptions" data-type=\'text\' data-title="This is for <strong>Advanced users</strong> to provide specific BTRFS mount options.<br>\n            Type them as a comma separated string of options without any spaces.<br>\n            Allowed options are <strong>alloc_start, autodefrag, clear_cache, commit, compress-force, degraded, discard,\n            fatal_errors, inode_cache, max_inline, metadata_ratio, noacl, noatime, nodatacow, nodatasum, nospace_cache, \n            nossd, ro, rw, skip_balance, space_cache, ssd, ssd_spread, thread_pool</strong>">\n            {{pool.mnt_options}}</a>\n            </strong>\n            {{/if}}\n        </td>\n    </tr>\n    <tr>\n        <td>Quotas</td>\n        <td>&nbsp;&nbsp;\n            <strong>\n                  <a href="#" id="editQuota" data-type="select" data-title="<strong>Enabled: </strong> (Rockstor default) - Used to track and limit\n                  (pending feature) pool share usage.<br><strong>Disabled: </strong> (optional) - significant performance benefits with\n                  high snapshot count (>200/share) and when balancing large pools (double digit TB).<br>Note: when quotas are\n                  disabled share usage is (currently) not tracked and can show <strong><i>0 bytes.</i></strong>">\n                      {{isEnabledDisabled pool.quotas_enabled}}\n                  </a>\n            </strong>\n        </td>\n    </tr>\n</table>\n\n\n');
window.JST['pool_pool_details_layout'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="messages"></div>\n<!-- page heading -->\n\n<div class="pull-right">\n <a href="#add_share?poolName={{poolName}}" id="add_share" class="btn btn-primary"><i class="glyphicon glyphicon-edit "></i> Add Share</a>\n {{#if isPoolRoleRoot}}\n <!-- Don\'t display the delete button if rockstor_rockstor pool -->\n {{else}}\n <button id="delete-pool" class="btn btn-danger" type="button"><i class="glyphicon glyphicon-trash" data-name="{{pool.name}}" data-action="delete"></i> Delete</button>\n {{/if}}\n</div>\n<span class="h2">{{poolName}}</span>\n{{#if isPoolRoleRoot}}\n   <br>\n   <div class="alert alert-danger">\n     <h4>Warning! This Pool is created during install and contains the OS. You can create Shares in it like in any other pool on the system. However, operations like resize, compression and deletion are not allowed.</h4>\n   </div>\n   {{/if}}\n<br>\n<br>\n\n  <ul class="nav nav-tabs">\n    <li class="active"><a href="#details" data-toggle="tab">Overview</a></li>\n    <li><a href="#poolscrubs" data-toggle="tab">Scrubs</a></li>\n    <li><a href="#poolrebalances" data-toggle="tab">Balances</a></li>\n  </ul>\n\n  <div class="css-panes">\n    <div id="details">\n      <div class="tab-section">\n      <div class="row">\n        <div class="col-md-6">\n            <div id="ph-pool-info"></div>\n        </div> <!-- col-md-6 -->\n        <div class="col-md-6">\n            <h3>Compression / Extra mount options / Quotas</h3>\n            <div id="ph-compression-info"></div>\n        </div> <!-- col-md-6 -->\n      </div>\n      </div>\n      <div class="row">\n        <div class="col-md-12">\n          <div class="tab-section">\n            <div id="ph-pool-usage"></div>\n          </div>\n        </div> <!-- col-md-12 -->\n      </div> <!-- row -->\n      <div class="row">\n        <div class="col-md-12">\n          <div class="tab-section">\n\n            <div id="ph-resize-pool-info"></div>\n      <!--   <button id="resize-pool-popup" rel="#resize-pool-form" class="btn btn-primary" type="button"><i class="glyphicon glyphicon-edit "></i> Resize Pool</button> -->\n\n          </div> <!-- tab-section -->\n        </div> <!-- col-md-12 -->\n      </div> <!-- row -->\n    </div>\n    <div id="poolscrubs">\n      <div id="ph-pool-scrubs"></div>\n    </div>\n    <div id="poolrebalances">\n      <div id="ph-pool-rebalances"></div>\n    </div>\n  </div>\n\n<div class="simple-overlay" id="resize-pool-form">\n  <div class="col-md-6 well">\n    <h4>Resize Pool({{poolName}})</h4>\n    <div id="alert-msg"></div></br>\n    Select new disk(s) to add to the pool or Unselect disk(s) to remove from the pool.<br>\n    You cannot add and remove disks simultaneously.<br>\n    If you do so, new disks will be added but no disks will be removed.<br>\n    After resizing a pool, it must be balanced manually. Auto balance is not supported yet.<br/>\n    <div id="disks-to-add"></div>\n\n    <br/>\n    <button id="resize-pool" class="btn btn-primary">Submit</button>\n  </div>\n</div>\n\n<div class="simple-overlay" id="pool-resize-raid-overlay">\n  <div class="overlay-content"> </div>\n</div>\n<div id="pool-resize-raid-modal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-header">\n    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n    <div id="pool-resize-raid-modal-contents"></div>\n  </div>\n</div>\n\n<div id="delete-pool-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n        <h3 id="myModalLabel">Delete Pool ({{poolName}})</h3>\n      </div>\n      <div class="modal-body">\n        <div class="messages"></div>\n        <h4>{{poolName}} will be deleted including it\'s Shares listed below and their Snapshots, NFS exports, Samba and SFTP config and Replicas. Are you sure?</h4>\n        <ul>\n        {{#each share}}\n        <li>{{this.name}} ({{this.size_gb}} GB)</li>\n        {{/each}}\n        </ul>\n      </div>\n      <div class="modal-footer">\n        <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">Cancel</button>\n        <button id="js-confirm-pool-delete" class="btn btn-primary">Confirm</button>\n      </div>\n    </div>\n  </div>\n</div>\n');
window.JST['pool_pool_info_module'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<!-- Content -->\n<div class="module-content">\n  <h3>Details</h3>\n  Created on: <strong>{{getPoolCreationDate model.toc}}</strong><br/>\n  Raid configuration: <strong>{{model.raid}}</strong><br/>\n  Active mount options / Status: <strong>\n  {{#if model.is_mounted}}\n    {{model.mount_status}}\n  {{else}}\n    <span style="color:red">{{model.mount_status}}</span>\n  {{/if}}\n  </strong>\n</div> <!-- module-content -->\n \n');
window.JST['pool_pool_usage_module'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<!-- Header -->\n\n<div class="row">\n  <div class="col-md-12">\n    <div class="module-header">\n      <div class="title"><span class="h3">Usage</span></div>\n    </div>\n  </div>\n</div>\n\n<div class="row">\n  <div class="col-md-12">\n    <div class="module-content">\n      <div id="chart"></div>\n    </div> <!-- module-content -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n');
window.JST['pool_poolrebalance_start_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<h3>Start a new balance</h3>\n<div class="row">\n  <div class="col-md-12">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form  name="pool-rebalance-form" id="pool-rebalance-form">\n        <div class="messages"></div>\n        <div class="form-group">\n          <div class="">\n            <input type="checkbox" name="forcebalance" id="forcebalance" title="force start a new balance even if there is one running">\n            Force (start a new balance even if there is one running)\n          </div>\n        </div>\n        <div class="form-group">\n          <div class="">\n            <a id="js-poolrebalance-cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="start_rebalance" class="btn btn-primary" value="Start"></input>\n          </div>\n        </div>\n      </form>\n    </div> <!-- form-box -->\n  </div> <!-- col-md-8 -->\n</div> <!-- row -->\n');
window.JST['pool_poolrebalance_table_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<div class="messages"></div>\n  <a class="btn btn-primary btn-spacing" href="#" id="js-poolrebalance-start" title="Rebalance data and metadata across all disks in this pool. WARNING: very intense and potentially long operation. Do this only if needed."><i class="glyphicon glyphicon-edit "></i>Start a new balance</a>\n<br>\n{{#if collectionNotEmpty}}\n  <table id="poolrebalances-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of pool balances">\n    <thead>\n      <tr>\n        <th scope="col" abbr="Id">Id</th>\n        <th scope="col" abbr="Status">Status</th>\n        <th scope="col" abbr="STime">Start Time</th>\n        <th scope="col" abbr="Updates">Percent finished</th>\n        <th scope="col" abbr="Infos">Errors or Notes</th>\n      </tr>\n    </thead>\n    <tbody>\n      {{display_poolRebalance_table}}\n    </tbody>\n  </table>\n{{else}}\n  <div class="alert alert-warning"><h4>There are no balances to display</h4></div>\n{{/if}}\n');
window.JST['pool_pools_table'] = Handlebars.compile('{{#if collectionNotEmpty}}\n<table id="pools-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of pools">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Size</th>\n      <th>Usage</th>\n      <th>Quotas</th>\n      <th>Raid</th>\n      <th>Active mount options / Status</th>\n      <th>Compression</th>\n      <th>Extra mount options</th>\n      <th>Disks</th>\n      <th>Actions</th>\n      </tr>\n  </thead>\n  <tbody>\n    {{#each poolCollection}}\n        <tr>\n            <td><a href="#pools/{{this.id}}"><i class="glyphicon glyphicon-list"></i>&nbsp;{{this.name}}</a>\n            {{#if (isRoot this.role)}}\n                <i class="fa fa-exclamation-circle" title="This Pool is created during install and contains the OS.\n                You can create Shares in it like in any other pool on the system.\n                However, operations like resize, compression and deletion are not allowed." rel="tooltip"></i>\n            {{/if}}</td>\n\n            <td>{{humanReadableSize \'size\' this.size this.reclaimable this.free}}\n                {{#unless (isRoot this.role)}}\n                      &nbsp;<a href="#pools/{{this.id}}/?cView=resize"><i class="fa fa-pencil-square-o"></i></a>\n                {{/unless}}\n            </td>\n\n            <td>{{humanReadableSize \'usage\' this.size this.reclaimable this.free}}\n                <strong>({{humanReadableSize \'usagePercent\' this.size this.reclaimable this.free}} %)</strong>\n            </td>\n            <td>\n                <strong>\n                    <a href="#" class="editQuotaOverview" data-name="editQuotaOverview" data-type="select"\n                       data-value="{{isEnabledDisabled this.quotas_enabled}}" data-pid="{{this.id}}"\n                       data-title="<strong>Enabled: </strong> (Rockstor default) - Used to track and limit\n                       (pending feature) pool share usage.<br><strong>Disabled: </strong> (optional) - significant\n                       performance benefits with high snapshot count (>200/share) and when balancing large\n                       pools (double digit TB).<br>Note: when quotas are disabled share usage is (currently)\n                       not tracked and can show <strong><i>0 bytes.</i></strong>">\n                        {{isEnabledDisabled this.quotas_enabled}}\n                    </a>\n                </strong>\n            </td>\n            <td>{{this.raid}}\n                {{#unless (isRoot this.role)}}\n                      &nbsp;<a href="#pools/{{this.id}}/?cView=resize"><i class="fa fa-pencil-square-o"></i></a>\n                {{/unless}}\n            </td>\n            <td>{{#if this.is_mounted}}\n                    {{this.mount_status}}\n                {{else}}\n                    <strong><span style="color:red">{{this.mount_status}}</span></strong>\n                {{/if}}\n            </td>\n            <td>{{#if (isRoot this.role)}}\n                    {{this.compression}}\n                {{else}}\n                    <strong><a href="#" class="cmpOptns" data-name="cmpOptns" data-type="select" data-mntoptn="{{this.mnt_options}}"\n                               data-value="{{this.compression}}" data-pid="{{this.id}}" data-title="Pool compression algorithm.\n                               <br><strong>zlib: </strong>slower than lzo but higher compression ratio.<br><strong>lzo: </strong>\n                               faster than zlib but lower compression ratio.<br>Pool level compression applies to all it\'s Shares.\n                               <br>Alternatively: consider Share level compression.<br>Unchanged data remains at prior setting\n                               until balanced.">\n                    {{this.compression}}</a></strong>\n                {{/if}}\n            </td>\n            <td>{{#if (isRoot this.role)}}\n                    {{this.mnt_options}}\n                {{else}}\n                    <strong><a href="#" class="mntOptns" data-name="mntOptns" data-type="text" data-comp="{{this.compression}}"\n                               data-value="{{this.mnt_options}}" data-pid="{{this.id}}" data-title="This is for <strong>Advanced\n                               users</strong> to provide specific BTRFS mount options.<br> Type them as a comma separated string\n                               of options without any spaces.<br> Allowed options are <strong>alloc_start, autodefrag, clear_cache,\n                               commit, compress-force, degraded, discard, fatal_errors, inode_cache, max_inline, metadata_ratio,\n                               noacl, noatime, nodatacow, nodatasum, nospace_cache, nossd, ro, rw, skip_balance, space_cache, ssd,\n                               ssd_spread, thread_pool</strong>">\n                    {{this.mnt_options}}</a></strong>\n                {{/if}}\n            </td>\n            <td>\n                {{#if (isRoot this.role)}}\n                    {{#each this.disks}}\n                    "{{this.name}}\n                    {{#if (isOpenLuks this.role)}}\n                        <a href="#disks/luks/{{this.id}}" class="open_luks_drive"\n                           data-disk-id="{{this.id}}"\n                           title="Open LUKS Volume, click to review." rel="tooltip">\n                        <i class="glyphicon glyphicon-eye-open"></i></a>\n                    {{/if}}\n                    "&nbsp;\n                    {{/each}}\n                {{else}}\n                    {{#each this.disks}}\n                    "{{this.name}}\n                    {{#if this.parted}}\n                        <a href="#disks/role/{{this.id}}" class="user_role_part"\n                            data-disk-id="{{this.id}}"\n                            title="Partition (Redirect Role), click to review."\n                            rel="tooltip"><i class="glyphicon glyphicon-tags"></i></a>\n                    {{/if}}\n                    {{#if (isOpenLuks this.role)}}\n                        <a href="#disks/luks/{{this.id}}" class="open_luks_drive"\n                           data-disk-id="{{this.id}}"\n                           title="Open LUKS Volume, click to review." rel="tooltip">\n                        <i class="glyphicon glyphicon-eye-open"></i></a>\n                    {{/if}}\n                    "&nbsp;\n                    {{/each}}\n                {{/if}}\n                {{#if this.has_missing_dev}}\n                    <strong><span style="color:red">(SOME MISSING) </span></strong>\n                {{/if}}\n                {{#unless this.dev_stats_ok}}\n                    <strong><span style="color:red">(DEV ERRORS DETECTED)</span></strong>\n                {{/unless}}\n            </td>\n            <td>{{#if (isRoot this.role)}}\n                    N/A\n                {{else}}\n                    <a id="delete_pool_{{this.id}}" data-id="{{this.id}}" data-action="delete" rel="tooltip" title="Delete pool">\n                    <i class="glyphicon glyphicon-trash"></i></a>\n                {{/if}}\n            </td>\n        </tr>\n        <div id="delete-pool-modal-{{this.id}}" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n         <div class="modal-dialog">\n          <div class="modal-content">\n           <div class="modal-header">\n            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n            <h3 id="myModalLabel">Delete Pool ({{this.name}})</h3>\n           </div>\n           <div class="modal-body">\n            <div class="messages"></div>\n            <h4>{{this.name}} will be deleted including it\'s Shares listed below and their Snapshots, NFS exports, Samba and SFTP config and Replics. Are you sure?</h4>\n            <ul id="pool-shares"></ul>\n           </div>\n           <div class="modal-footer">\n            <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">Cancel</button>\n            <button id="js-confirm-pool-delete" data-id="{{this.id}}" class="btn btn-primary">Confirm</button>\n           </div>\n          </div>\n         </div>\n        </div>\n    {{/each}}\n  </tbody>\n</table>\n{{ else }}\n<h4>No Pools have been created</h4>\n{{/if}}\n<div>\n    <a {{#if disksAvailable}}\n            href="#add_pool"\n        {{else}}\n            disabled title="There are no Disks available to create a Pool at this time.\n        {{/if}}\n    id="add_pool" class="btn btn-primary"><i class="glyphicon glyphicon-edit"></i>&nbsp;Create Pool</a>\n</div>\n');
window.JST['pool_poolscrub_details_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<span class="h2">Scrub Details page.</span>\n<br>\nFormatted output from: <strong> btrfs scrub status -R /mnt2/{{poolName}} </strong>\nfor the given job ID. If job is running then browser refresh for\nupdate.\n<br>\n<span class="h4">Scrub Status values:</span>\n<ul>\n <li><strong>running:</strong> Ongoing, <strong>finished:</strong> Completed,\n  <strong> terminated:</strong> Job open when force scrub initiated.</li>\n <li><strong>halted:</strong> Interrupted e.g. reboot,\n  <strong>cancelled:</strong> btrfs scrub cancel /mnt2/{{poolName}} executed.</li>\n <li><strong>conn-reset:</strong> Forced scrub encountered running scrub.</li>\n</ul>\n\n\n<div class="row">\n <div class="col-md-8">\n  <label class="control-label"></label>\n  <div class="form-box">\n   <form class="form-horizontal" id="scrub-detail-form" name="scrubdetailform">\n    <div class="messages"></div>\n\n    <!-- Form Header Info -->\n    <div class="form-group">\n     <div class="col-sm-offset-4 col-sm-8">\n      <h4>Pool name:&nbsp;&nbsp;<strong>{{poolName}}</strong></h4>\n      <h4>Scrub Status:&nbsp;&nbsp;<strong>{{scrubStatus}}</strong></h4>\n     </div>\n    </div>\n\n    <!-- Table displaying Scrub Detail -->\n    <div class="form-group" id="pool_scrub_detail_table_group">\n     <label class="col-sm-4 control-label">Scrub Statistics</label>\n     <div class="col-sm-6">\n      <div class="poolScrubDetailsTable">\n       <table id="pool_scrub_details_table" class="table table-condensed table-bordered share-table tablesorter" summary="Pool Scrub Details Table">\n        <thead>\n        <tr>\n         <th>Attribute</th>\n         <th>Value</th>\n        </tr>\n        </thead>\n         {{display_pool_scrub_details_table}}\n        </table>\n      </div>\n     </div>\n    </div><!-- pool_scrub_detail_table_group -->\n\n    </form>\n  </div>\n </div>\n</div>');
window.JST['pool_poolscrub_start_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<h3>Start a new Scrub</h3>\n<div class="row">\n  <div class="col-md-12">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form  name="pool-scrub-form" id="pool-scrub-form">\n        <div class="messages"></div>\n        <div class="form-group">\n          <div class="">\n            <input type="checkbox" name="forcescrub" id="forcescrub" title="force start a new scrub even if there is one running">\n            Force (start a new scrub even if there is one running)\n          </div>\n        </div>\n        <div class="form-group">\n          <div class="">\n            <a id="js-poolscrub-cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="start_scrub" class="btn btn-primary" value="Start"></input>\n          </div>\n        </div>\n      </form>\n    </div> <!-- form-box -->\n  </div> <!-- col-md-8 -->\n</div> <!-- row -->\n');
window.JST['pool_poolscrub_table_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<div class="messages"></div>\n  <a class="btn btn-primary btn-spacing" href="#" id="js-poolscrub-start"><i class="glyphicon glyphicon-edit "></i>Start a new scrub</a> or you can schedule a periodic scrub by clicking <a href="#add-scheduled-task">here.</a>\n<br>\n{{#if collectionNotEmpty}}\n  <table id="poolscrubs-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of poolscrubs">\n    <thead>\n      <tr>\n        <th scope="col" abbr="Id">ID</th>\n        <th scope="col" abbr="Status">Status</th>\n        <th scope="col" abbr="STime">Start Time</th>\n        <th scope="col" abbr="ETime">End Time</th>\n        <th scope="col" abbr="DScrubbed">Data Scrubbed</th>\n      </tr>\n    </thead>\n    <tbody>\n    {{display_poolScrub_table}}\n    </tbody>\n  </table>\n{{else}}\n  <div class="alert alert-warning"><h4>There are no scrubs to display</h4></div>\n{{/if}}\n');
window.JST['pool_resize_pool_info'] = Handlebars.compile('<h3>Disks\n    {{#if pool.has_missing_dev}}\n    &nbsp;(<strong><span style="color:red">Some Missing</span></strong>)\n    {{/if}}\n    {{#unless pool.dev_stats_ok}}\n    (<strong><span style="color:red">Device errors detected</span></strong>)\n    {{/unless}}\n</h3>\n\n{{#if pool.has_missing_dev}}\n    <h4><u>Maintenance required</u></h4>\n    {{#unless (isDegradedRw pool.mount_status)}}\n    Missing disk removal requires <strong>degraded,rw</strong> mount options.\n    {{/unless}}\n    {{#if pool.is_mounted}}\n        {{#if (isWritable pool.mount_status)}}\n            {{#if (isDegradedRw pool.mount_status)}}\n                <a href="#" class="js-delete-missing" data-pool-id="{{pool.id}}" title="If detached members listed use - Resize/ReRaid \'Remove disks\' - instead." rel="tooltip">\n                <i class="glyphicon glyphicon-erase"></i> Delete a missing disk if pool has no detached members.</a><br>\n                <strong>Header "Pool Degraded Alert" persists during delete process (can take several hours).</strong><br>\n            {{else}}\n                Consider <strong>degraded,ro</strong> to refresh backups first.<br>\n            {{/if}}\n        {{else}}\n            Pool is read only (<strong>ro</strong>).<br> Refresh backups before using <strong>degraded,rw</strong>.\n        {{/if}}\n        Active \'degraded\' option is sticky: once unset a reboot is required to deactivate it.<br>\n    {{else}}\n        Pool is currently (<strong>unmounted</strong>).<br>\n        Consider <strong>degraded,ro</strong> to refresh backups first.<br>\n    {{/if}}\n    Reload page to refresh active mount options.\n    <br><br>\n{{/if}}\n\n<i>Cumulative pool errors per device - \'btrfs dev stats -z /mnt2/{{pool.name}}\'\n    to reset.</i>\n\n<table id="pool-disk-table"\n       class="table table-condensed table-bordered table-hover">\n    <thead>\n    <tr>\n        <th scope="col" abbr="Name">Name</th>\n        <th scope="col" abbr="Temp Name">Temp Name</th>\n        <th scope="col" abbr="Capacity">Capacity</th>\n        <th scope="col" abbr="write_io_errs">Write I/O errors</th>\n        <th scope="col" abbr="read_io_errs">Read I/O errors</th>\n        <th scope="col" abbr="flush_io_errs">Flush I/O errors</th>\n        <th scope="col" abbr="corruption_errs">Corruption errors</th>\n        <th scope="col" abbr="generation_errs">Generation errors</th>\n\n    </tr>\n    </thead>\n    <tbody>\n    {{#if (isRoot pool.role)}}\n    {{#each pool.disks}}\n    <tr>\n        <td>{{this.name}}\n            {{#if (isOpenLuks this.role)}}\n            <a href="#disks/luks/{{this.name}}" class="open_luks_drive"\n               data-disk-name="{{this.name}}"\n               title="Open LUKS Volume, click to review." rel="tooltip">\n                <i class="glyphicon glyphicon-eye-open"></i></a>\n            {{/if}}\n        </td>\n        <td>\n            {{this.temp_name}}\n        </td>\n        <td>{{humanReadableSize this.size}}</td>\n        {{ioErrorStatsTableData this.io_error_stats}}\n    </tr>\n    {{/each}}\n    {{else}}\n    {{#each pool.disks}}\n    <tr>\n        <td>{{this.name}}\n            {{#if this.parted}}\n            <a href="#disks/role/{{this.id}}" class="user_role_part"\n               data-disk-id="{{this.id}}"\n               title="Partition (Redirect Role), click to review."\n               rel="tooltip">\n                <i class="glyphicon glyphicon-tags"></i></a>\n            {{/if}}\n            {{#if (isOpenLuks this.role)}}\n            <a href="#disks/luks/{{this.id}}" class="open_luks_drive"\n               data-disk-id="{{this.id}}"\n               title="Open LUKS Volume, click to review." rel="tooltip">\n                <i class="glyphicon glyphicon-eye-open"></i></a>\n            {{/if}}\n        </td>\n        <td>\n            {{this.temp_name}}\n        </td>\n        <td>{{humanReadableSize this.size}}</td>\n        {{ioErrorStatsTableData this.io_error_stats}}\n    </tr>\n    {{/each}}\n    {{/if}}\n    </tbody>\n</table>\n\n<a id="js-resize-pool" class="btn btn-primary" href="#">\n    <i class="glyphicon glyphicon-edit "></i> Resize/ReRaid Pool</a></br>\n\n');
window.JST['pool_selected_disks'] = Handlebars.compile('{{!<script>\n/*\n* Copyright (c) 2016 RockStor, Inc. <http://rockstor.com>\n* This file is part of RockStor.\n*\n* RockStor is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published\n* by the Free Software Foundation; either version 2 of the License,\n* or (at your option) any later version.\n*\n* RockStor is distributed in the hope that it will be useful, but\n* WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n* General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program. If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n</script>}}\n\n<tbody>\n{{#if data}}\n    {{#each data}}\n    <tr>\n        <td>{{count}} x {{size}}</td>\n        <td>{{sum}}</td>\n    </tr>\n    {{/each}}\n    <tr>\n        <td><b>Total Raw Capacity</b></td>\n        <td style="color:#EB6841;"><b>{{total}}</b></td>\n    </tr>\n    <tr>\n        <td><b>Total Usable Capacity</b></td>\n        <td id="usable"><b>Retrieving...</b></td>\n    </tr>\n{{else}}\n    <td>No disks selected.</td>\n{{/if}}\n</tbody>\n');
window.JST['replication_add_replication_task'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<script>\n$(document).ready(function() {\n  $(\'#cron\').cron({\n  initial: "42 3 * * 5",\n  customValues: {\n    "5 minutes" : "*/5 * * * *",\n    "10 minutes": "*/10 * * * *",\n    "20 minutes": "*/20 * * * *",\n    "30 minutes" : "*/30 * * * *",\n    "45 minutes" : "*/45 * * * *",\n  },\n    useGentleSelect: true\n});\n});\n</script>\n\n{{#unless replicaId}}\n<div class="row">\n  <div class="col-md-8">\n<div class="panel panel-default">\n<div class="panel-heading">Add a new replication task</div>\n\n    <div class="panel-body">\n      <form  class="form-horizontal" id="replication-task-create-form" name="aform">\n	<div class="messages"></div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="task_name">Task name<span class="required"> *</span></label>\n	  <div class="col-sm-6">\n	    <input class="form-control" type="text" id="task_name" name="task_name" placeholder="Task name" title="A unique name for this replication task" >\n	  </div>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="share">Share to replicate<span class="required"> *</span></label>\n	  <div class="col-sm-6">\n	    <select class="form-control" id="share" name="share" title="Share to replicate">\n	      {{#each shares}}\n	      <option value="{{this.name}}"> {{this.name}} </option>\n	      {{/each}}\n\n	    </select>\n	  </div>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="appliance">Remote appliance<span class="required"> *</span></label>\n	  <div class="col-sm-6">\n	    <select class="form-control" id="appliance" name="appliance" title="Share will be replicated to this remote Rockstor appliance.">\n	      {{#each appliances}}\n	      {{#unless this.current_appliance}}\n	      <option value="{{this.ip}}"> {{this.ip}} </option>\n	      {{/unless}}\n	      {{/each}}\n\n	    </select>\n	  </div>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="listener_ip">Remote Listener Address</label>\n	  <div class="col-sm-6">\n	  <input class="form-control" type="text" id="listener_ip" name="listener_ip" value="{{listener_ip}}"title="If remote appliance\'s replication service is listening on a different IP address, provide here. If not, appliance\'s IP address will be used.">\n	  </div>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="port">Remore Listener Port<span class="required"> *</span></label>\n	  <div class="col-sm-6">\n	    <input class="form-control" type="text" id="listener_port" name="listener_port" value="{{listener_port}}" title="Replication meta port on the target appliance. (Default is {{listener_port}})">\n	  </div>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="pool">Remote pool<span class="required"> *</span></label>\n	  <div class="col-sm-6">\n	    <select class="form-control" id="pool" name="pool" title="Share will be replicated to this Pool on the remote Rockstor appliance.">\n	      {{#each remote_pools}}\n	      <option value="{{this}}"> {{this}}</option>\n	      {{/each}}\n	    </select>\n	  </div>\n	</div>\n	<div class="form-group">\n         <label class="col-sm-4 control-label" for="cron">Replication Frequency</label>\n         <div class="row">\n           <div class="col-sm-6">\n             <div id="cron"></div>\n           </div>\n         </div>\n	</div>\n\n	<div class="form-group">\n	  <div class="col-sm-offset-4 col-sm-8">\n	    <a id="js-cancel" class="btn btn-default">Cancel</a>\n	    <input type="Submit" id="create_replication_task" class="btn btn-primary" value="Submit"></input>\n	  </div>\n	</div>\n      </form>\n</div> <!-- panel-body -->\n</div><!--panel-default-->\n  </div> <!-- col-md-8 -->\n</div> <!-- row -->\n\n{{else}}\n<div class="row">\n  <div class="col-md-8">\n    <div class="panel panel-default">\n      <div class="panel-heading">Edit Replication task</div>\n      <div class="panel-body">\n	<form class="form-horizontal" id="replication-task-create-form" name="aform">\n	  <div class="messages"></div>\n	  <div class="form-group">\n	    <label class="col-sm-4 control-label" for="task_name">Task name:</label>\n	    <div class="col-sm-6">\n	      <input type="text" class="form-control" value="{{replica.task_name}}" disabled="disabled">\n	    </div>\n	  </div>\n	  <div class="form-group">\n	    <label class="col-sm-4 control-label" for="share">Share to replicate:</label>\n	    <div class="col-sm-6">\n	      <input type="text" class="form-control" value="{{replica.share}}" disabled="disabled">\n	    </div>\n	  </div>\n	  <div class="form-group">\n	    <label class="col-sm-4 control-label" for="appliance">Remote appliance:</label>\n	    <div class="col-sm-6">\n	      <input type="text" class="form-control" value="{{replica.appliance}}" disabled="disabled">\n	    </div>\n	  </div>\n	  <div class="form-group">\n	    <label class="col-sm-4 control-label" for="listener_ip">Remote Listener Address:</label>\n	    <div class="col-sm-6">\n	      <input type="text" class="form-control" name="listener_ip" value="{{replica.replication_ip}}">\n	    </div>\n	  </div>\n	  <div class="form-group">\n	    <label class="col-sm-4 control-label" for="listener_port">Remote Listener Port:</label>\n	    <div class="col-sm-6">\n	      <input type="text" class="form-control" name="listener_port" value="{{replica.data_port}}">\n	    </div>\n	  </div>\n	  <div class="form-group">\n	    <label class="col-sm-4 control-label" for="pool">Remote pool:</label>\n	    <div class="col-sm-6">\n	      <input type="text" class="form-control" value="{{replica.dpool}}" disabled="disabled">\n	    </div>\n	  </div>\n	  <div class="form-group">\n            <label class="col-sm-4 control-label" for="cron">Replication Frequency</label>\n            <div class="row">\n              <div class="col-sm  -6">\n		<div id="cron"></div>\n              </div>\n            </div>\n	  </div>\n	  <div class="form-group">\n	    <div class="col-sm-offset-4 col-sm-8">\n	      <a id="js-cancel" class="btn btn-default">Cancel</a>\n	      <input type="Submit" id="create_replication_task" class="btn btn-primary" value="Submit"></input>\n	    </div>\n	  </div>\n	</form>\n\n      </div> <!-- panel-body -->\n    </div><!--panel-default-->\n  </div> <!-- col-md-8 -->\n</div> <!-- row -->\n{{/unless}}\n');
window.JST['replication_receive_trails'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<h4>Replication receive history for ( {{replicaShare.appliance}} : {{replicaShare.src_share}}\n to {{replicaShare.pool}} : {{replicaShare.share}} )</h4>\n \n{{#if collectionNotEmpty}}\n  <div class="row">\n    <div class="col-md-12">\n      <div class="messages"></div>\n      <table id="receive-trails-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="Receive trails">\n        <thead>\n          <tr>\n            <th scope="col" abbr="ID">ID</th>\n            <th scope="col" abbr="ID">Snapshot</th>\n            <th scope="col" abbr="Start Time">Start Time</th>\n            <th scope="col" abbr="Start Time">End Time</th>\n            <th scope="col" abbr="Start Time">Status</th>\n            <th scope="col" abbr="Start Time">Duration</th>\n            <th scope="col" abbr="Start Time">Data transferred at rate</th>\n          </tr>\n        </thead>\n        <tbody>\n        {{#each replicaReceiveColl}}\n            <tr>\n                <td>{{this.id}}</td>\n                <td>{{this.snap_name}}</td>\n                <td>{{getDateFormat this.receive_pending}}</td>\n                <td>{{#if this.end_ts}}\n                        {{getDateFormat this.end_ts}}\n                    {{/if}}\n                </td>\n                <td>{{#ifStatusSuccess this.status}}\n                        {{this.status}}\n                    {{else}}\n                        <i class="fa fa-exclamation-circle" title="{{this.error}}" rel="tooltip"></i>&nbsp;{{this.status}}\n                    {{/ifStatusSuccess}}\n                </td>\n                <td>{{#if this.end_ts}}\n                    {{getDuration this.end_ts receive_pending}}\n                    {{/if}}\n                </td>\n                <td>{{humanReadableSize this.kb_received}} at {{getRate this.end_ts this.receive_pending this.kb_received}}/sec</td>\n            </tr>\n          {{/each}}\n        </tbody>\n      </table>\n    </div>\n  </div>\n{{/if}}\n\n');
window.JST['replication_replica_trails'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<h4>Replication history for {{replica.task_name}} ( {{replica.share}} on {{replica.appliance}} : {{replica.dpool}} )</h4>\n{{#if collectionNotEmpty}}\n  <div class="row">\n    <div class="col-md-12">\n      <div class="messages"></div>\n      <table id="replica-trails-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="Replica trails">\n        <thead>\n          <tr>\n            <th scope="col" abbr="ID">ID</th>\n            <th scope="col" abbr="Snapshot">Snapshot</th>\n            <th scope="col" abbr="Start Time">Start Time</th>\n            <th scope="col" abbr="Start Time">End Time</th>\n            <th scope="col" abbr="Start Time">Status</th>\n            <th scope="col" abbr="Start Time">Duration</th>\n            <th scope="col" abbr="Start Time">Data transferred at rate</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{#each replicaColl}}\n            <tr>\n                <td>{{this.id}}</td>\n                <td>{{this.snap_name}}</td>\n                <td>{{getDateFormat this.snapshot_created}}</td>\n                <td>{{#if this.end_ts}}\n                        {{getDateFormat this.end_ts}}\n                    {{/if}}\n                </td>\n                <td>{{#ifStatusSuccess this.status}}\n                        {{this.status}}\n                    {{else}}\n                        <i class="fa fa-exclamation-circle" title="{{this.error}}" rel="tooltip"></i>&nbsp;{{this.status}}\n                    {{/ifStatusSuccess}}\n                </td>\n                <td>{{#if this.end_ts}}\n                    {{getDuration this.end_ts this.snapshot_created}}\n                    {{/if}}\n                </td>\n                <td>{{humanReadableSize this.kb_sent}} at {{getRate this.end_ts this.snapshot_created this.kb_sent}}/sec</td>\n            </tr>\n          {{/each}}\n        </tbody>\n      </table>\n    </div>\n  </div>\n{{/if}}');
window.JST['replication_replication'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="row">\n<div class="col-md-12">\n<div id="details-header">\n<table>\n<tr>\n<td><span class="h3">Replication Service&nbsp;&nbsp;&nbsp;</span></td>\n<td><input type="checkbox" name="replica-service-checkbox" data-size="mini"></td>\n</tr>\n</table>\n</div>\n\n\n<div id="replication-warning" class="alert alert-warning" style="display:none">\n<strong>Warning! The Replication service is not turned on. </strong>\n</div>\n\n\n<div class="messages"></div>\n<div id="details-header">\n<span class="h3">Replication Send Tasks on this appliance</span>\n</div>\n{{#if collectionNotEmpty}}\n    <div class="row">\n    <div class="col-md-12">\n    <div class="messages"></div>\n    <!-- Content -->\n    <table id="replicas-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of replicas">\n    <thead>\n    <tr>\n    <th scope="col" abbr="Share">Task name </th>\n    <th scope="col" abbr="Share">Source (Share) </th>\n    <th scope="col" abbr="Appliance">Destination Appliance</th>\n    <th scope="col" abbr="Appliance">Destination Pool</th>\n    <th scope="col" abbr="Frequency">Frequency</th>\n    <th scope="col" abbr="Last">Last backup</th>\n    <th scope="col" abbr="Actions">Enable/Disable</th>\n    </tr>\n    </thead>\n    <tbody>\n    {{#each replicaColl}}\n        <tr>\n            <td><a href="#edit-replication-task/{{this.id}}">{{this.task_name}}</a>&nbsp;\n                <a href="#" data-task-name="{{this.task_name}}" data-task-id="{{this.id}}" data-action="delete">\n                <i class="glyphicon glyphicon-trash" rel="tooltip" title="Delete"></i></a>\n            </td>\n            <td>{{this.share}}</td>\n            <td>{{this.appliance}}</td>\n            <td>{{this.dpool}}</td>\n            <td>{{getFrequency this.crontab}}</td>\n            <td>{{lastBackup this.id}}</td>\n            <td><input type="checkbox" name="replica-task-checkbox" data-replica-id="{{this.id}}" data-size="mini" {{#if this.enabled}} checked {{/if}}></td>\n        </tr>\n    {{/each}}\n    </tbody>\n    </table>\n    </div> <!-- col-md-12 -->\n    </div> <!-- row -->\n{{else}}\n    <div class="alert alert-warning"><h4>No replication tasks have been created</h4></div>\n{{/if}}\n{{#if otherAppliances_FreeShares}}\n    <a href="#add_replication_task" class="btn btn-primary">Add Replication Task</a>\n{{else}}\n    {{#if noOtherAppliances}}\n        <div class="alert alert-warning"><h4>No other Rockstor appliances have been connected. At least one other appliance must be connected to setup a replication task. You can connect to an appliance on the <a href=#appliances>Appliances</a> page.</h4></div>\n    {{/if}}\n    {{#if noFreeShares}}\n        <div class="alert alert-warning"><h4>All existing shares have replication tasks setup. Create a new share to setup a new replication task.</h4>\n    {{/if}}\n{{/if}}\n</div> <!-- col-md-12 -->\n</div> <!-- row -->\n');
window.JST['replication_replication_receive'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<div class="row">\n<div class="col-md-12">\n<div id="details-header">\n<table>\n  <tr>\n    <td><span class="h3">Replication Service&nbsp;&nbsp;&nbsp;</span></td>\n    <td><input type="checkbox" name="replica-service-checkbox" data-size="mini"></td>\n</tr>\n</table>\n</div>\n\n\n<div id="replication-warning" class="alert alert-warning" style="display:none">\n<strong>Warning! The Replication service is not turned on.</strong>\n</div>\n\n<div class="messages"></div>\n<div id="details-header">\n<span class="h3">Replication Receive Tasks on this appliance</span>\n</div>\n{{#if collectionNotEmpty}}\n    <div class="row">\n    <div class="col-md-12">\n    <div class="messages"></div>\n    <!-- Content -->\n    <table id="replica-receives-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of replica receives">\n    <thead>\n    <tr>\n    <th scope="col" abbr="Received Task ID">Received Task ID </th>\n    <th scope="col" abbr="Source Appliance">Source Appliance </th>\n    <th scope="col" abbr="Source Share">Source Share </th>\n    <th scope="col" abbr="Destination Pool">Destination Pool</th>\n    <th scope="col" abbr="Destination Share">Destination Share</th>\n    <th scope="col" abbr="Last">Last receive</th>\n    </tr>\n    </thead>\n    <tbody>\n    {{#each replicaColl}}\n        <tr>\n            <td>{{this.id}}<a href="#" data-rshare-name="{{this.share}}" data-rshare-id="{{this.id}}" data-action="delete">\n                <i class="glyphicon glyphicon-trash" rel="tooltip" title="Delete"></i></a>\n            </td>\n            <td>{{this.appliance}}</td>\n            <td>{{this.src_share}}</td>\n            <td>{{this.pool}}</td>\n            <td>{{this.share}}</td>\n            <td>{{lastReceived this.id}}</td>\n        </tr>\n    {{/each}}\n    </tbody>\n    </table>\n    </div> <!-- col-md-12 -->\n    </div> <!-- row -->\n{{else}} \n    <div class="alert alert-warning"><h4>No replication receives on this appliance</h4></div>\n{{/if}}\n</div> <!-- col-md-12 -->\n</div> <!-- row -->\n');
window.JST['rockons_add_labels'] = Handlebars.compile('<div id="ph-add-labels-form"></div>\n');
window.JST['rockons_add_labels_form'] = Handlebars.compile('<div class="row">\n  <div class="col-md-10">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form id="container-select-form" name="aform" class="form-horizontal">\n	<div class="messages"></div>\n	{{#unless containers}}\n	<h3>There are no containers to label.</h3>\n	{{else}}\n	<div class="form-group">\n	  <label class="col-sm-3 control-label" for="containers">Container: <span class="required">*</span></label>\n\n	  <div class="controls col-sm-5">\n	    <select class="form-control" id="container" name="container" placeholder="Select a container. ">\n	      <option></option>\n	      {{#each containers}}\n	      <option value="{{this.name}}">{{this.name}}</option>\n	      {{/each}}\n	    </select>\n	  </div>\n	  <i class="fa fa-info-circle fa-lg" title="Select the container to which a label should be added."></i>\n	</div>\n 	<div id="label-box1" class="form-group">\n	  <label class="col-sm-3 control-label" for="labels">Label:  <span class="required">*</span></label>\n	  <div class="controls col-sm-5">\n          <input class="form-control input-btn" name="labels[]" id="field1" placeholder="Enter a label" type="text" /><button id="b1" class="btn" type="button">+</button>\n	  </div>\n	  <i class="fa fa-info-circle fa-lg" title="Enter the desired label in the following form: mycustomlabel"></i>\n	</div>\n	<div class="label-box-new"></div>\n    {{/unless}}\n	  </form>\n  	</div>\n  </div>\n</div>\n');
window.JST['rockons_add_shares'] = Handlebars.compile('<div id="ph-add-shares-form"></div>\n');
window.JST['rockons_add_shares_form'] = Handlebars.compile('<div class="row">\n  <div class="col-md-10">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form id="vol-select-form" name="aform" class="form-horizontal">\n	<div class="messages"></div>\n	{{#unless shares}}\n	<h3>There are no Shares left to add. Create a new one and try again.</h3>\n	{{else}}\n	<div class="form-group">\n	  <label class="col-sm-3 control-label" for="shares">Storage <span class="required">*</span></label>\n\n	  <div class="controls col-sm-5">\n	    <select class="form-control" id="share" name="share" data-placeholder="Select shares to export">\n	      <option></option>\n	      {{#each shares}}\n	      <option value="{{this.name}}">{{this.name}}</option>\n	      {{/each}}\n	    </select>\n	  </div>\n	  <i class="fa fa-info-circle fa-lg" title="Select a Share that you want to assign to this Rock-on"></i>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-3 control-label" for="volumes">Rock-on directory <span class="required">*</span></label>\n	  <div class="controls col-sm-5">\n	    <input class="form-control" type="text" id="volume" name="volume">\n	  </div>\n	  <i class="fa fa-info-circle fa-lg" title="Provide an absolute directory path inside the Rock-on. Selected Share will be available to the Rock-on at this location. Eg: /data/media"></i>\n	</div>\n    </div>\n    {{/unless}}\n    </form>\n  </div>\n</div>\n</div>\n');
window.JST['rockons_cc_form'] = Handlebars.compile('<div class="row">\n  <div class="col-md-10">\n    <label class="control-label"></label>\n\n    <div class="form-box">\n      <form id="custom-choice-form" name="aform" class="form-horizontal">\n	<div class="messages"></div>\n	{{#each cc}}\n        <div class="form-group">\n            <label class="control-label col-sm-3" for="cc">{{this.label}}<span class="required">*</span></label>\n        <div class="controls">\n        <div class="col-sm-6">\n            <input class="form-control" \n            {{#if (findInputType this.label)}}\n                 type="password"\n            {{else}}\n                 type="text"\n            {{/if}}\n            id="{{this.id}}" name="{{this.id}}" value="{{#unless null}}{{this.val}}{{/unless}}">\n         </div>&nbsp;&nbsp;\n         <i class="fa fa-info-circle fa-lg" title="{{this.description}}" rel="tooltop"></i>\n        </div>\n        </div>\n        {{/each}}\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['rockons_custom_choice'] = Handlebars.compile('<div class="progress">\n  <div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 75%;">\n    <span class="sr-only">60% Complete</span>\n  </div>\n</div>\n<div class="alert alert-warning">\n  <p>Additional configuration is needed for this Rock-on. Read mouseover <i class="fa fa-info-circle"></i> tooltips for specific information before making your selection.</p>\n</div>\n\n<div id="ph-cc-form"></div>\n');
window.JST['rockons_device_choice'] = Handlebars.compile('<div class="progress">\n  <div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 75%;">\n    <span class="sr-only">60% Complete</span>\n  </div>\n</div>\n<div class="alert alert-warning">\n  <p>Additional configuration is needed for this Rock-on. Read mouseover <i class="fa fa-info-circle"></i> tooltips for specific information before making your selection.</p>\n</div>\n\n<div id="ph-device-form"></div>\n');
window.JST['rockons_device_form'] = Handlebars.compile('<div class="row">\n  <div class="col-md-10">\n    <label class="control-label"></label>\n\n    <div class="form-box">\n      <form id="device-choice-form" name="aform" class="form-horizontal">\n	<div class="messages"></div>\n	{{#each device}}\n        <div class="form-group">\n            <label class="control-label col-sm-3" for="device">{{this.label}}<span></span></label>\n        <div class="controls">\n        <div class="col-sm-6">\n            <input class="form-control" \n            {{#if (findInputType this.label)}}\n                 type="password"\n            {{else}}\n                 type="text"\n            {{/if}}\n            id="{{this.id}}" name="{{this.id}}" value="{{#unless null}}{{this.val}}{{/unless}}">\n         </div>&nbsp;&nbsp;\n         <i class="fa fa-info-circle fa-lg" title="{{this.description}}" rel="tooltop"></i>\n        </div>\n        </div>\n        {{/each}}\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['rockons_docker_service'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<div class="rockons-sidepanel">\n  <input type="checkbox" name="rockon-service-checkbox" data-size="mini">\n</div>\n');
window.JST['rockons_install_choice'] = Handlebars.compile('<div class="progress">\n  <div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 25%;"></div>\n</div>\n<div class="alert alert-warning">\n  <p>Shares provide storage to the Rock-on. Read mousever <i class="fa fa-info-circle"></i> tooltips for specific information before making a selection. We strongly recommend creating dedicated Share assignments. If a Config or Data Share is assigned to more than one Rock-on, it could cause strange behavior.</p>\n  <p>To create needed Storage(Shares) and come back, <a href="#add_share">click here.</a></p>\n</div>\n\n<div id="ph-vols-table"></div>\n');
window.JST['rockons_install_complete'] = Handlebars.compile('<div class="alert alert-info">\n  Installation is in progress. It can take a while depending on the type of Rock-on, network speed and other factors. You can monitor the Rock-ons page which refreshes periodically during the installation.\n</div>\n');
window.JST['rockons_install_summary'] = Handlebars.compile('<div class="progress">\n  <div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 100%;">\n    <span class="sr-only">60% Complete</span>\n  </div>\n</div>\n<div class="alert alert-warning">\n  <p>Please verify your input and click submit to start the installation.</p>\n</div>\n\n<div id="ph-summary-table"></div>\n');
window.JST['rockons_more_info'] = Handlebars.compile('{{{rockonMoreInfo}}}\n');
window.JST['rockons_port_choice'] = Handlebars.compile('<div class="progress">\n  <div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 50%;">\n  </div>\n</div>\n<div class="alert alert-warning">\n  <p>Ports provide network access to the Rock-on. Preferred default values are provided for convenience. Read mouseover <i class="fa fa-info-circle"></i> tooltips for more information.</p>\n</div>\n<div id="ph-ports-form"></div>\n');
window.JST['rockons_ports_form'] = Handlebars.compile('<div class="row">\n  <div class="col-md-10">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form id="port-select-form" name="aform" class="form-horizontal">\n	<div class="messages"></div>\n    {{#each ports}}\n        <div class="form-group">\n            <label class="control-label col-sm-3" for="ports">{{this.label}}<span class="required">*</span></label>\n            <div class="col-sm-5">\n                <input class="form-control" type="text" id="{{this.id}}" name="{{this.id}}" value="{{this.hostp}}">\n            </div>\n            <i class="fa fa-info-circle fa-lg" title="{{this.description}}"></i>\n        </div>\n     {{/each}}\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['rockons_rockons'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="messages"></div>\n{{#if status}}\n<span class="h2">Rock-ons</span>\n<div class="pull-right">\n  <a id="js-update-rockons" class="btn btn-primary pull-right" href="#" title="Check for new Rock-ons"><i class="glyphicon glyphicon-refresh "></i> Update</a>\n</div>\n<br><br>\n\n<ul class="nav nav-tabs">\n  <li class="active"><a href="#js-rockons-installed" data-toggle="tab">Installed</a></li>\n  <li><a href="#js-rockons-available" data-toggle="tab">All</a></li>\n</ul>\n\n<div class="css-panes">\n  <div>\n    {{display_installedRockons}}\n  </div>\n\n  <div id="js-rockons-available">\n    {{display_allRockons}}\n  </div>\n</div>\n\n\n<div class="simple-overlay" id="install-rockon-overlay">\n  <div class="overlay-content"></div>\n</div>\n\n<div id="install-rockon-modal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-header">\n    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n    <div id="install-rockon-modal-contents"></div>\n  </div>\n</div>\n{{else}}\n<div class="alert alert-warning">\n  <strong>Warning!</strong> Rock-on service is not running. Please turn it on to use features on this screen.\n</div>\n{{/if}}\n');
window.JST['rockons_settings_summary'] = Handlebars.compile('<div id="ph-settings-summary-table"></div>\n');
window.JST['rockons_settings_summary_table'] = Handlebars.compile('<br>\n<table class="table table-condensed table-bordered table-hover table-striped tablesorter">\n<thead>\n  <tr>\n     <th>Resource type&nbsp;&nbsp<i class="fa fa-info-circle fa-lg" title="Type of the system resource on Rockstor. Eg: Share, port numbers etc.. Custom type is for arbitrary variables needed by the Rock-on that may not map to a system resource." rel="tooltip"></i></th>\n    <th>Name&nbsp;&nbsp<i class="fa fa-info-circle fa-lg" title="Name of the resource according to Rockstor. Eg: Share names, port numbers etc.." rel="tooltip"></i></th>\n    <th>Mapped representation&nbsp;&nbsp<i class="fa fa-info-circle fa-lg" title="Name/representation of the resource inside the Rock-on. Eg: Shares map to directories, ports map to (possibly different)ports to send traffic to the Rock-on, etc.." rel="tooltip"></i></th>\n  </tr>\n</thead>\n{{#each volumes}}\n    <tr>\n        <td>Share</td>\n        <td>{{this.share_name}}</td>\n        <td>{{this.dest_dir}}</td>\n    </tr>\n{{/each}}\n{{display_newVolumes}}\n{{#each ports}}\n    <tr>\n        <td>Port</td>\n        <td>{{this.hostp}}</td>\n        <td>{{this.containerp}}</td>\n    </tr>\n{{/each}}\n{{#each cc}}\n    <tr>\n        <td>Custom</td>\n        <td>{{this.val}}&nbsp;&nbsp<i class="fa fa-info-circle" title="{{this.description}}" rel="tooltip"></i></td>\n        <td>{{this.key}}</td>\n    </tr>\n{{/each}}\n{{#each device}}\n    <tr>\n        <td>Device</td>\n        <td>{{this.val}}&nbsp;&nbsp<i class="fa fa-info-circle" title="{{this.description}}" rel="tooltip"></i></td>\n        <td>{{this.dev}}</td>\n    </tr>\n{{/each}}\n{{#each env}}\n    <tr>\n        <td>Env</td>\n        <td>{{this.val}}&nbsp;&nbsp<i class="fa fa-info-circle" title="{{this.description}}" rel="tooltip"></i></td>\n        <td>{{this.key}}</td>\n    </tr>\n{{/each}}\n{{#each labels}}\n    <tr>\n        <td>Label</td>\n        <td>{{this.key}}</td>\n        <td>{{this.val}}</td>\n    </tr>\n{{/each}}\n{{display_newLabels}}\n</table>\n');
window.JST['rockons_summary_table'] = Handlebars.compile('<table class="table table-condensed table-bordered table-hover table-striped tablesorter">\n<thead>\n  <tr>\n    <th>Resource type&nbsp;&nbsp<i class="fa fa-info-circle fa-lg" title="Type of the system resource on Rockstor. Eg: Share, port numbers etc.. Custom type is for arbitrary variables needed by the Rock-on that may not map to a system resource." rel="tooltip"></i></th>\n    <th>Name&nbsp;&nbsp<i class="fa fa-info-circle fa-lg" title="Name of the resource according to Rockstor. Eg: Share names, port numbers etc.." rel="tooltip"></i></th>\n    <th>Mapped representation&nbsp;&nbsp<i class="fa fa-info-circle fa-lg" title="Name/representation of the resource inside the Rock-on. Eg: Shares map to directories, ports map to (possibly different)ports to send traffic to the Rock-on, etc.." rel="tooltip"></i></th>\n  </tr>\n</thead>\n  {{#each share_map}}\n  <tr>\n    <td>Share</td>\n    <td>{{@key}}</td>\n    <td>{{this}}</td>\n  </tr>\n  {{/each}}\n  {{#each port_map}}\n  <tr>\n    <td>Port</td>\n    <td>{{@key}}</td>\n    <td>{{this}}</td>\n  </tr>\n  {{#each cc_map}}\n  <tr>\n    <td>Custom</td>\n    <td>{{@key}}</td>\n    <td>{{this}}</td>\n  </tr>\n  {{/each}}\n  {{#each dev_map}}\n  <tr>\n    <td>Device</td>\n    <td>{{@dev}}</td>\n    <td>{{this}}</td>\n  </tr>\n  {{/each}}\n  {{#each env_map}}\n  <tr>\n    <td>Env</td>\n    <td>{{@key}}</td>\n    <td>{{this}}</td>\n  </tr>\n  {{/each}}\n  {{/each}}\n</table>\n');
window.JST['rockons_update_complete'] = Handlebars.compile('<div class="alert alert-success">\n  <p>Click submit to start the update. You can monitor the Rock-ons page which refreshes periodically during the update.</p>\n</div>\n');
window.JST['rockons_vol_form'] = Handlebars.compile('<div class="row">\n  <div class="col-md-10">\n    <label class="control-label"></label>\n    <div class="form-box">\n      <form class="form-horizontal" id="vol-select-form" name="aform" >\n    <div class="messages"></div>\n    {{#each volumes}}\n        <div class="form-group">\n            <label class="control-label col-sm-3" for="shares">{{this.label}}<span class="required">*</span></label>\n            <div class="col-sm-5">\n                <select class="form-control" type="text" id="{{this.id}}" name="{{this.id}}" data-placeholder="Select shares to export" >\n                    <option></option>\n                    {{#each ../shares}}\n                        <option value="{{this.name}}">{{this.name}}</option>\n                    {{/each}}\n               </select>\n           </div>\n           <i class="fa fa-info-circle fa-lg" title="{{this.description}}"></i>\n         </div>\n     {{/each}}\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['rockons_wizard_summary'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="row">\n  <div class="col-md-12">\n    <div id="ph-wizard-header">\n      <h3>{{title}}</h3>\n    </div>\n    <div id="ph-wizard-contents">\n    </div>\n    <div id="ph-wizard-buttons" class="col-md-12">\n      <button id="next-page" class="btn btn-primary wizard-btn">Next</button>\n      <button id="add-label" class="btn btn-primary wizard-btn">Label</button>\n      <button id="prev-page" class="btn wizard-btn">Back</button>\n    </div>\n  </div>\n</div>\n');
window.JST['samba_add_samba_export'] = Handlebars.compile('<div class="row">\n<div class="col-md-8">\n<div class="panel panel-default">\n  <div class="panel-heading">\n      {{#if sambaShareIdNotNull}}\n            Edit Samba export for <strong>{{smbShareName}}</strong>\n      {{else}}\n            Add Samba export\n      {{/if}}\n  </div>\n  <div class="panel-body">\n    <form class="form-horizontal" id="add-samba-export-form" name="aform">\n    <div class="messages"></div>\n    <!-- Shares -->\n        <div class="form-group">\n            {{#if sambaShareIdNull}}\n                <label class="col-sm-4 control-label" for="shares">Shares to export<span class="required"> *</span></label>\n            {{/if}}\n            <div class="col-sm-4">\n                {{#if sambaShareIdNull}}\n                    <select class="form-control" name="shares" id="shares" size="10" data-placeholder="Select shares to export" multiple="multiple">\n                    {{#each shares}}\n                        <option value="{{this.id}}">{{this.name}}</option>\n                    {{/each}}\n                    </select>\n                {{/if}}\n            </div>\n        </div>\n\n        <!-- Admin Users  -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="admin_users">Admin users</label>\n          <div class="col-sm-4">\n            <select class="form-control" name="admin_users" id="admin_users" size="10" title="(optional) list of users who will be granted super-user privileges for all file operations." data-placeholder="Select admin user(s)" multiple>\n                     {{display_adminUser_options}}\n            </select>\n          </div>\n        </div>\n\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="browsable">Browsable<span class="required"> *</span></label>\n          <div class="col-sm-4">\n              {{display_options "browsable"}}\n          </div>\n        </div>\n\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="guest_ok">Guest OK<span class="required"> *</span></label>\n          <div class="col-sm-4">\n          {{display_options "guest_ok"}}\n           </div>\n        </div>\n\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="read_only">Read only<span class="required"> *</span></label>\n          <div class="col-sm-4">\n          {{display_options "read_only"}}\n           </div>\n        </div>\n\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="comment">Comment</label>\n          <div class="col-sm-4">\n              <input type="text" id="comment" class="form-control" name="comment"\n                {{#if sambaShareIdNotNull}}\n                     value="{{smbShareComment}}"\n                {{else}}\n                     value="Samba-Export"\n                {{/if}}\n               title="Comment string to associate with the new share">\n          </div>\n        </div>\n\n      <div class="form-group">\n             <div class="col-sm-4"></div>\n        <div class="col-sm-4">\n          <input type="checkbox" name="shadow_copy"\n                 {{#if smbSnapshotPrefixRule}}\n                 checked="true"\n                 {{/if}}\n          id="shadow_copy">Enable Shadow Copy? &nbsp;&nbsp;<a id="shadow-copy-info" href="#" class="moreinfo"><i class="fa fa-info-circle"></i></a>\n        </div>\n          </div> <!-- closing form group -->\n          <div class="form-group"\n            {{#unless smbSnapshotPrefixRule}}\n                style="visibility: hidden"\n            {{/unless}}\n      id="snapprefix-ph">\n      <label class="col-sm-4 control-label" for="cert-utl">Snapshot prefix<span class="required"> *</span></label>\n          <div class="col-sm-4">\n             <input type="text" class="col-sm-4 form-control" id="snapshot_prefix" name="snapshot_prefix"\n                    {{#if sambaShareIdNotNull}}\n                    value="{{smbShareSnapPrefix}}"\n                    {{/if}}\n            title="Prefix of Snapshots for this Share. You must use this prefix when scheduling Snapshot tasks for this Share for shadow copies to work.">\n          </div>\n        </div>\n\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="custom_config">Custom configuration </label>\n          <div class="col-sm-8">\n            <textarea rows="5" columns="40" id="custom_config" name="custom_config" class="form-control"\n                      title="You can provide custom parameters here. These lines will be added to\n                      the section of each Share selected above in smb.conf">\n              {{#if sambaShareIdNotNull}}{{configList}}{{/if}}</textarea>\n          </div>\n\n      </div>\n        <div class="form-group">\n          <div class="col-sm-offset-4 col-sm-8">\n            <a id="cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="create-samba-export" class="btn btn-primary" value="Submit"></input>\n          </div>\n        </div>\n\n      </form>\n    </div><!--panel-body-->\n  </div><!--panel-default-->\n</div><!--col-md-8-->\n</div><!--row-->\n\n\n<div id="shadow-copy-info-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n        <h4 id="myModalLabel">Shadow Copy</h4>\n      </div>\n      <div class="modal-body">\n        <div class="messages"></div>\n        <p>\n          This feature is useful if you\'ll be accessing this Share from Windows\n          clients. By enabling this feature, you can browse older versions or\n          "shadow copies" of files from Windows. You can read technical details\n          on <a href="https://en.wikipedia.org/wiki/Shadow_Copy" target="_blank">Wikipedia</a>.\n        </p>\n        <p>\n    In addition to enabling this feature, you need to schedule\n    Snapshots. Read our <a href="http://rockstor.com/docs"\n                           target="_blank">documentation</a> for more information.\n  </p>\n      </div>\n    </div>\n  </div>\n</div>\n');
window.JST['samba_samba'] = Handlebars.compile('<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <div id="details-header">\n      <table>\n        <tr>\n          <td><span class="h3">Samba Service&nbsp;&nbsp;&nbsp;</span></td>\n          <td>\n          <input type="checkbox" name="samba-export-checkbox" data-size="mini">\n          </td>\n        </tr>\n      </table>\n    </div>\n    <div id="samba-warning" class="alert alert-warning" style="display:none">\n    	<strong>Warning! Samba Service is not running</strong>. Clients won\'t be able to mount unless Samba is running.\n    </div>\n    <br>\n    <div class="messages"></div>\n    <!-- Content -->\n    {{#if collectionNotEmpty}}\n      <table id="samba-exports-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of samba exports">\n        <thead>\n          <tr>\n            <th scope="col" abbr="Share name">Share</th>\n            <th scope="col" abbr="Browseable">Browseable</th>\n            <th scope="col" abbr="Guest ok">Guest ok</th>\n            <th scope="col" abbr="Read only">Read only</th>\n            <th scope="col" abbr="Admin Users">Admin Users</th>\n            <th scope="col" abbr="Comments">Comment</th>\n            <th scope="col" abbr="Actions">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{#each samba}}\n            <tr>\n                <td><a href="#shares/{{this.share_id}}">{{this.share}}</a></td>\n                <td>{{this.browsable}}</td>\n                <td>{{this.guest_ok}}</td>\n                <td>{{this.read_only}}</td>\n                <td>{{getAdminUsers this.admin_users}}</td>\n                <td>{{this.comment}}</td>\n                <td>\n                    <a href="#samba/edit/{{this.id}}"><i class="glyphicon glyphicon-pencil"></i></a>&nbsp;\n                    <a href="#" class="delete-samba-export" data-share="{{this.share}}" data-id="{{this.id}}"><i class="glyphicon glyphicon-trash"></i></a>\n                </td>\n            </tr>\n          {{/each}}\n        </tbody>\n      </table>\n    {{else}}\n      <table id="samba-exports-table" class="table table-condensed table-bordered table-hover table-striped share-table tablesorter" summary="List of samba exports">\n        <tbody>\n          <tr>\n            <td colspan="5">\n              <h4>No samba exports have been created</h4>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    {{/if}}\n    {{#if sharesNotEmpty}}\n      <a href="#add-samba-export" id="add-samba-export" class="btn btn-primary"><i class="glyphicon glyphicon-edit "></i> Add Samba Export</a>\n    {{else}}\n      <a  id="add-samba-export" class="btn btn-primary disabled" title="No shares available to export through Samba"><i class="glyphicon glyphicon-edit "></i> Add Samba Export</a>\n    {{/if}}\n  </div>\n</div>\n\n');
window.JST['scheduled_tasks_add_task'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<script>\n    $(document).ready(function() {\n        $(\'#cron\').cron({\n            initial: "42 3 * * 5",\n            customValues: {\n                "5 minutes": "*/5 * * * *",\n                "10 minutes": "*/10 * * * *",\n                "15 minutes": "*/15 * * * *",\n                "20 minutes": "*/20 * * * *",\n                "30 minutes": "*/30 * * * *",\n            },\n            useGentleSelect: true\n        });\n        $(\'#cron-window\').cron_window(); //added cron-window init call\n    });\n</script>\n\n<div class="row">\n    <div class="col-md-8">\n        <div class="panel panel-default">\n            <div class="panel-heading">{{#if taskDefIdNull}}Schedule a new task{{else}}Edit a scheduled task{{/if}}</div>\n            <div class="panel-body">\n                {{#if taskDefIdNull}}\n                <form id="scheduled-task-create-form" name="aform">\n                    <div class="messages"></div>\n                    <div class="form-group">\n                        <div class="row">\n                            <label class="control-label col-md-4" for="task_name">Task name<span class="required"> *</span></label>\n                            <label class="control-label col-md-4" for="task_type">Task type<span class="required"> *</span></label>\n                        </div>\n                        <div class="row">\n                            <div class="col-sm-4">\n                                <input class="form-control col-md-4" type="text" id="name" name="name" placeholder="Task name" title="A descriptive name for this task">\n                            </div>\n                            <div class="col-sm-4">\n                                <select class="form-control" id="task_type" name="task_type">\n                                {{#each taskTypes}}\n                                    <option value="{{this.name}}">{{this.description}}</option>\n                                {{/each}}\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                    {{else}}\n                    <form id="scheduled-task-create-form" class="form-horizontal" name="aform" >\n                    <div class="form-group">\n                        <label class="control-label col-sm-4" for="share">Task name: </label>\n                        <div class="col-sm-6">\n                            <input type="text" class="form-control" value="{{> taskObj.name}}" disabled />\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label class="control-label col-sm-4" for="share">Task type: </label>\n                        <div class="col-sm-6">\n                            <input type="text" class="form-control" id="task_type" name="task_type" value="{{> taskObj.type}}" disabled />\n                        </div>\n                    </div>\n                    {{/if}}\n                    <div id="optional-fields"></div>\n                    {{#if taskDefIdNull}}\n                    <div class="checkbox" style="clear: both">\n                        <label>\n                            <input type="checkbox" checked id="enabled" name="enabled" placeholder="Enable this task" title="Disabled tasks will be created but not run till they are enabled"> Enable this task?\n                        </label>\n                    </div>\n                    <div class="form-group">\n                    <label for="cron">Frequency of task</label>\n                        <div class="row">\n                            <div class="col-sm-12">\n                                <div id="cron"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label for="cron-window">Task execution time windows<i class="fa fa-info-circle" title="Execution time windows apply for minutes/hours tasks only.\n                            All limits indicated are inclusive, so a task running for example from Friday to Sunday\n                            will be executed on Friday and Sunday too."></i></label>\n                        <div class="row">\n                            <div class="col-sm-12">\n                                <div id="cron-window"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <a id="js-cancel" class="btn btn-default">Cancel</a>\n                        <input type="Submit" id="create-scheduled-task" class="btn btn-primary" value="Submit"></input>\n                    </div>\n                    {{else}}\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-6">\n                            <div class="checkbox">\n                                <label>\n                                    <input class="checkbox" type="checkbox" id="enabled" name="enabled" {{> taskObj.enabled}} title="Disabled tasks will be created but not run till they are enabled">Enable task?\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label class="control-label col-sm-4" for="cron">Task frequency</label>\n                        <div class="col-sm-6">\n                            <div id="cron"></div>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label class="control-label col-sm-4" for="cron">Task execution time ranges<i class="fa fa-info-circle" title="Execution time windows apply for minutes/hours tasks only.\n                            All limits indicated are inclusive, so a task running for example from Friday to Sunday\n                            will be executed on Friday and Sunday too."></i></label>\n                        <div class="col-sm-6">\n                            <div id="cron-window"></div>\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="controls col-sm-offset-4 col-sm-6">\n                            <a id="js-cancel" class="btn btn-default">Cancel</a>\n                            <input type="Submit" id="create-scheduled-task" class="btn btn-primary" value="Submit"></input>\n                        </div>\n                    </div>\n                    {{/if}}\n                </form>\n            </div> <!-- panel-body -->\n        </div><!-- panel-default -->\n    </div><!-- col -->\n</div><!-- row -->');
window.JST['scheduled_tasks_scrub_fields'] = Handlebars.compile('{{#if taskDefIdNull}}\n<div class="row">\n    <div class="form-group">\n        <label class="control-label col-md-4" for="pool">Pool to scrub<span class="required"> *</span></label>\n    </div>\n</div>\n<div class="row">\n    <div class="form-group">\n        <div class="col-md-4">\n            <select class="form-control" id="pool" name="meta.pool">\n            {{#each pools}}\n                <option value="{{this.id}}">{{this.name}}</option>\n            {{/each}}\n            </select>\n        </div><!--col-md-4-->\n    </div><!--form-group-->\n</div><!--row -->\n{{else}}\n<div class="form-group">\n    <label class="control-label col-sm-4" for="share">Pool name: </label>\n    <div class="col-sm-6">\n        <input type="text" class="form-control" value="{{> taskObj.pool_name}}" disabled />\n    </div>    \n</div>\n{{/if}}\n');
window.JST['scheduled_tasks_shutdown_fields'] = Handlebars.compile('{{#if taskDefIdNull}}\n<div class="form-inline">\n    <div class="checkbox-inline" style="clear: both">\n        <label>\n            <input type="checkbox" id="wakeup" name="meta.wakeup" title="Enable RTC wake up to schedule system power on after shutdown"> Enable System RTC wake up?\n        </label>\n    </div>\n{{else}}\n<div class="form-group">\n	<div class="col-sm-offset-4 col-sm-8">\n		<div class="checkbox-inline" style="clear: both">\n			<label>\n				<input class="checkbox" type="checkbox" id="wakeup" name="meta.wakeup" title="Enable RTC wake up to schedule system power on after shutdown"> Enable System RTC wake up? \n			</label>\n		</div>\n{{/if}}\n    <span id="rtc_container" style="display: none;">\n        <select class="form-control" id="rtc_hour" name="meta.rtc_hour" >\n            {{ time_select \'rtc_hour\'}}\n        </select> : \n        <select class="form-control" id="rtc_minute" name="meta.rtc_minute">\n            {{ time_select \'rtc_minute\'}}\n        </select>\n    </span>\n{{#if taskDefIdNull}}\n</div>\n{{else}}\n	</div>\n</div>\n{{/if}}\n');
window.JST['scheduled_tasks_snapshot_fields'] = Handlebars.compile('{{#if taskDefIdNull}}\n<div class="form-group">\n    <div class="row">\n        <label class="control-label col-md-4" for="share">Share<span class="required"> *</span></label>\n        <label class="control-label col-md-4" for="prefix">Snapshot prefix<span class="required"> *</span></label>\n    </div>\n    <div class="row">\n        <div class="col-sm-4">\n            <select class="form-control" id="share" name="meta.share">\n            {{#each shares}}\n                <option value="{{this.id}}">{{this.name}}</option>\n            {{/each}}\n            </select>\n        </div>\n        <div class="col-sm-4">\n            <input class="form-control" type="text" id="prefix" name="meta.prefix" placeholder="Prefix" title="Snapshots will be named with this prefix. The format is prefix_YYYYMMDDHHMM">\n        </div>\n    </div>\n</div>\n<div class="row">\n    <label class="control-label col-sm-4" for="max_count">Maximum count<span class="required"> *</span></label>\n</div>\n<div class="row">\n    <div class="col-sm-4">\n        <input class="form-control col-sm-4" type="text" id="max_count" name="meta.max_count" placeholder="Maximum count" title="Older snapshots beyond this number and created by this task will be deleted">\n    </div>\n</div>\n<div class="checkbox" style="clear: both">\n    <label>\n        <input  type="checkbox" checked id="writable" name="meta.writable" title="Make snapshots writable.">\n        Make snapshots writable?\n    </label>\n</div>\n<div class="checkbox" style="clear: both">\n    <label>\n        <input  type="checkbox" checked id="visible" name="meta.visible" title="Make snapshots visible to the end user.">\n        Make snapshots visible?\n    </label>\n</div>\n{{else}}\n<div class="form-group">\n    <label class="control-label col-sm-4" for="share">Share name: </label>\n    <div class="col-sm-6">\n        <input type="text" class="form-control" value="{{> taskObj.share_name}}" disabled />\n    </div>\n</div>\n<div class="form-group">\n    <label class="control-label col-sm-4" for="share">Snapshot prefix: </label>\n    <div class="col-sm-6">\n        <input type="text" class="form-control" value="{{> taskObj.prefix}}" disabled />\n    </div>\n</div>\n<div class="form-group">\n    <label class="control-label col-sm-4" for="max_count">Maximum count<span class="required"> *</span></label>\n    <div class="col-sm-6">\n        <input class="form-control" type="text" id="max_count" name="meta.max_count" value="{{> taskObj.maxCount}}" title="Older snapshots beyond this number and created by this task will be deleted">\n    </div>\n</div>\n\n<div class="form-group">\n    <div class="col-sm-offset-4 col-sm-6">\n        <div class="checkbox">\n            <label>\n                <input class="checkbox" type="checkbox" id="writable" name="meta.writable" {{> taskObj.writable}} title="Make snapshots writable"> Make snapshots writable?\n            </label>\n        </div>\n    </div>\n</div>\n\n<div class="form-group">\n    <div class="col-sm-offset-4 col-sm-6">\n        <div class="checkbox">\n            <label>\n                <input class="checkbox" type="checkbox" id="visible" name="meta.visible" {{> taskObj.visible}} title="Make snapshots visible to the end user"> Make snapshots visible?\n            </label>\n        </div>\n    </div>\n</div>\n{{/if}}\n');
window.JST['scheduled_tasks_task_defs'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n{{#if collectionNotEmpty}}\n  <div class="row">\n    <div class="col-md-12">\n      <table id="scheduled-tasks-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of scheduled tasks">\n        <thead>\n          <tr>\n            <th scope="col" abbr="Task name">Task name</th>\n            <th scope="col" abbr="Task type">Type</th>\n            <th scope="col" abbr="Frequency">Frequency</th>\n            <th scope="col" abbr="Exec">Execution time window</th>\n            <th scope="col" abbr="Enabled">Enabled</th>\n            <th scope="col" abbr="Last">Last run</th>\n            <th scope="col" abbr="Actions">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{display_scheduledTasks_table}}\n        </tbody>\n      </table>\n    </div>\n  </div>\n  {{else}}\n  <h4>There are no tasks scheduled at this time.</h4>\n{{/if}}\n<a href="#add-scheduled-task" class="btn btn-primary">Schedule a Task</a>\n');
window.JST['scheduled_tasks_tasks'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<span class="h2">Task history for {{taskName}}</span><br>\n{{display_snapshot_scrub}}\n{{#if collectionNotEmpty}}\n  <div class="row">\n    <div class="col-md-12">\n      <div class="messages"></div>\n      <table id="tasks-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="Tasks">\n        <thead>\n          <tr>\n            <th scope="col" abbr="ID">ID</th>\n            <th scope="col" abbr="Status">Status</th>\n            <th scope="col" abbr="Start Time">Start Time</th>\n            <th scope="col" abbr="End Time">End Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{#each taskColl}}\n            <tr>\n                <td>{{this.id}}</td>\n                <td>{{this.state}}</td>\n                <td>{{dateFormat this.start}}</td>\n                <td>{{#if this.end}} \n                        {{dateFormat this.end}}\n                    {{/if}}\n                </td>\n            </tr>\n          {{/each}}\n        </tbody>\n      </table>\n    </div>\n  </div>\n{{/if}}\n');
window.JST['services_configure_active-directory'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n\n            <div class="panel-heading">Configure {{serviceName}}</div>\n\n            <div class="panel-body">\n                <form class="form-horizontal" id="active-directory-form" name="aform">\n                    <div class="messages"></div>\n\n                    <!-- AD Domain/Realm name -->\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="domain">Domain/Realm Name<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="domain" name="domain" value="{{config.domain}}" placeholder="Domain">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="username">Administrator Username<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="username" name="username" value="{{config.username}}" placeholder="Administrator">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="password">Password<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="password" id="password" name="password" placeholder="Password">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="idmap_range">Idmap Range</label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="idmap_range" name="idmap_range" value="{{config.idmap_range}}" placeholder="10000 - 999999">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <label class="checkbox inline">\n          <input type="checkbox" id="rfc2307" name="rfc2307" {{#if config.rfc2307}}checked{{/if}}> Enable RFC2307 and use UIDS and homes/shells AD DC values\n        </label>\n                        </div>\n                    </div>\n\n                    <!-- Submit -->\n                    <div class="form-group">\n                        <div class="col-sm-8 col-sm-offset-4">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="submit" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!--panel-default-->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_docker'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="alert alert-warning">\n    <p>We strongly recommend that you create a separate Share(at least 5GB size) for this purpose. During the lifetime of Rock-ons, several snapshots will be created and space could fill up quickly. It is best managed in a separate Share to avoid clobbering other data.</p>\n    <p>To create a new Share, <a href="#add_share">click here.</a></p>\n</div>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}} Service</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="docker-form" name="aform">\n                    <div class="messages"></div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="root_share">Root Share<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            {{display_rockon_shares}}\n                        </div>\n                    </div>\n\n\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="create-user" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!-- panel-default -->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_ldap'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}}</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="ldap-form" name="aform">\n                    <div class="messages"></div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="server">LDAP Server<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="server" name="server" value="{{config.server}}" placeholder="LDAP Server" title="IP address of LDAP Server">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="basedn">Search base DN<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="basedn" name="basedn" value="{{config.basedn}}" placeholder="Search base DN" title="Distinguished Name ">\n                        </div>\n                    </div>\n                    <div class="checkbox">\n                        <label class="col-sm-4 control-label" for="enableTLS"></label> {{#if config.enabletls}}\n                        <div class="col-sm-4">\n                            <input type="checkbox" name="enabletls" id="enabletls" checked="true">\n                        </div>\n                        {{else}}\n                        <div class="col-sm-4">\n                            <input type="checkbox" name="enabletls" id="enabletls"> {{/if}} Enable TLS to encrypt connections?</div>\n                    </div>\n                    {{#if config.enabletls}}\n                    <div class="form-group" id="cert-ph">\n                        {{else}}\n                        <div class="form-group" id="cert-ph" style="visibility: hidden">\n                            {{/if}}\n                            <label class="col-sm-4 control-label" for="cert-utl">Certificate URL<span class="required"> *</span></label>\n                            <div class="col-sm-4">\n                                <input type="text" class="form-control" id="cert" name="cert" value="{{config.cert}}" placeholder="Certificate URL" title="URL to download Certificate in PEM format">\n                            </div>\n                        </div>\n                        <div class="form-group">\n                            <div class="col-sm-offset-4 col-sm-8">\n                                <button id="cancel" class="btn btn-default">Cancel</button>\n                                <button type="Submit" id="create-user" class="btn btn-primary">Submit</button>\n                            </div>\n                        </div>\n                </form>\n\n                </div>\n                <!-- panel-body -->\n            </div>\n            <!--panel-default-->\n        </div>\n        <!-- col-md-8 -->\n    </div>\n    <!-- row -->\n');
window.JST['services_configure_nis'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}}</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="nis-form" name="aform">\n                    <div class="messages"></div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="domain">Domain<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="domain" name="domain" value="{{config.domain}}" placeholder="Domain" title="NIS domain">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="server">Server<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="server" name="server" value="{{config.server}}" placeholder="Server" title="Address of NIS server">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="create-user" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!--panel-default-->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_ntpd'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}}</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="ntpd-form" name="aform">\n                    <div class="messages"></div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="username">Server Name<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="server" name="server" value="{{config.server}}" placeholder="Server Name" title="Internet Standard Time Server address">\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="submit" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!-- panel-default-->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_nut'] = Handlebars.compile('<script>\n  /*\n   * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n   * This file is part of RockStor.\n   *\n   * RockStor is free software; you can redistribute it and/or modify\n   * it under the terms of the GNU General Public License as published\n   * by the Free Software Foundation; either version 2 of the License,\n   * or (at your option) any later version.\n   *\n   * RockStor is distributed in the hope that it will be useful, but\n   * WITHOUT ANY WARRANTY; without even the implied warranty of\n   * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   * General Public License for more details.\n   *\n   * You should have received a copy of the GNU General Public License\n   * along with this program. If not, see <http://www.gnu.org/licenses/>.\n   *\n   */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}}</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="nut-form" name="aform">\n                    <div class="messages"></div>\n\n                    <!-- NUT mode -->\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="mode">NUT Mode<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" id="mode" name="mode">\n                            {{display_nutMode_options}}\n                            </select>\n                        </div>\n                    </div>\n\n                    <!-- Monitor mode -->\n                    <!-- upsmon either master or slave -->\n                    <div class="form-group" id="monitor-mode">\n                        <label class="col-sm-4 control-label" for="upsmon">Monitor Mode<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" id="upsmon" name="upsmon">\n                            {{display_monitorMode_options}}\n                            </select>\n                        </div>\n                    </div>\n\n                    <!-- Internal UPS name -->\n                    <div class="form-group" id="ups-name">\n                        <label class="col-sm-4 control-label" for="upsname">Internal UPS name<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="upsname" name="upsname" value="{{config.upsname}}" placeholder="internal ups name">\n                        </div>\n                    </div>\n\n                    <!--  UPS Descriptive Name -->\n                    <div class="form-group" id="ups-description">\n                        <label class="col-sm-4 control-label" for="desc">UPS Description</label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="desc" name="desc" value="{{config.desc}}" placeholder="Rockstor UPS Unit">\n                        </div>\n                    </div>\n\n                    <!-- nut driver -->\n                    <div class="form-group" id="nut-driver">\n                        <label class="col-sm-4 control-label" for="driver">NUT Driver<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" id="driver" name="driver">\n                            {{display_nutDriver_options}}\n                            </select>\n                        </div>\n                    </div>\n\n                    <!--  UPS port -->\n                    <div class="form-group" id="ups-port">\n                        <label class="col-sm-4 control-label" for="port">UPS Port</label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="port" name="port" value="{{config.port}}" placeholder="auto or serial device name">\n                        </div>\n                    </div>\n\n                    <!-- nut server name / ip -->\n                    <div class="form-group" id="nut-server">\n                        <label class="col-sm-4 control-label" for="nutserver">NUT Server <span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="nutserver" name="nutserver" value="{{config.nutserver}}" placeholder="hostname or ip of nutserver">\n                        </div>\n                    </div>\n\n                    <!-- nut user name -->\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="nutuser">NUT User<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="nutuser" name="nutuser" value="{{config.nutuser}}" placeholder="NUT username eg \'monuser\'">\n                        </div>\n                    </div>\n\n                    <!-- nut user password (no spaces)-->\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="password">NUT User Password<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="password" name="password" value="{{config.password}}" placeholder="NUT user password">\n                        </div>\n                    </div>\n\n                    <!--  nut shutdown timer -->\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="shutdowntimer">Shutdown Timing<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" id="shutdowntimer" name="shutdowntimer">\n                            {{display_nutShutdownTimer_options}}\n                            </select>\n                        </div>\n                    </div>\n\n                    <!-- Cancel and Submit buttons -->\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="create-user" class="btn btn-primary">\n                            Submit\n                            </button>\n                        </div>\n                    </div>\n                </form>\n                <!-- nut-form -->\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!-- panel-default -->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_replication'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}}</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="replication-form" name="aform">\n                    <div class="messages"></div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="network_interface">Network Interface<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" name="network_interface" id="network_interface" data-placeholder="Select Network Interface">\n                            <option></option>\n                            {{display_networkInterface_options}}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="listener_port">Listener Port<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="listener_port" name="listener_port" value="{{defaultPort}}"></div>\n                    </div>\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="submit" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!-- panel-default-->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_rockstor'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n    * This file is part of RockStor.\n    *\n    * RockStor is free software; you can redistribute it and/or modify\n    * it under the terms of the GNU General Public License as published\n    * by the Free Software Foundation; either version 2 of the License,\n    * or (at your option) any later version.\n    *\n    * RockStor is distributed in the hope that it will be useful, but\n    * WITHOUT ANY WARRANTY; without even the implied warranty of\n    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    * General Public License for more details.\n    *\n    * You should have received a copy of the GNU General Public License\n    * along with this program. If not, see <http://www.gnu.org/licenses/>.\n    *\n    */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}}</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="rockstor-form" name="aform">\n                    <div class="messages"></div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="network_interface">Network Interface<span> </span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" name="network_interface" id="network_interface" data-placeholder="Select Network Interface">\n                <option></option>\n                {{display_networkInterface_options}}\n              </select>\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="listener_port">HTTPS Port<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="listener_port" name="listener_port" value="{{defaultPort}}"></div>\n                    </div>\n\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="submit" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!-- panel-default-->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_shellinaboxd'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}} Service</div>\n            <div class="panel-body">\n                <form class="form-horizontal" id="shellinaboxd-form" name="aform">\n                    <div class="messages"></div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="shelltype">Shell connection service<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" id="shelltype" name="shelltype">\n                {{display_shelltype_options}}\n            </select>\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="css">Shell color scheme<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <select class="form-control" id="css" name="css">\n                {{display_shellstyle_options}}\n            </select>\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <label class="checkbox inline">\n              <input type="checkbox" id="detach" name="detach" {{#if config.detach}}checked{{/if}}> Open shell in a popup window\n            </label>\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="create-user" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!-- panel-default -->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_smartd'] = Handlebars.compile('<script>\n    /*\n    * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n    * This file is part of RockStor.\n    *\n    * RockStor is free software; you can redistribute it and/or modify\n    * it under the terms of the GNU General Public License as published\n    * by the Free Software Foundation; either version 2 of the License,\n    * or (at your option) any later version.\n    *\n    * RockStor is distributed in the hope that it will be useful, but\n    * WITHOUT ANY WARRANTY; without even the implied warranty of\n    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    * General Public License for more details.\n    *\n    * You should have received a copy of the GNU General Public License\n    * along with this program. If not, see <http://www.gnu.org/licenses/>.\n    *\n    */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}} Daemon</div>\n            <div class="panel-body">\n\n                <form class="form-horizontal" id="smartd-form" name="aform">\n                    <div class="messages"></div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="custom_config">configuration lines will be saved to the ROCKSTOR section in /etc/smartmontools/smartd.conf</label>\n                        <div class="col-sm-8">\n                            {{#if config.custom_config}}\n                            <textarea class="form-control" id="smartd_config" name="custom_config" rows="10">{{config.custom_config}}</textarea> {{else}}\n                            <textarea class="form-control" id="smartd_config" name="custom_config" rows="10"></textarea> {{/if}}\n                        </div>\n                    </div>\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="save-smartd-config" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!-- panel-default -->\n    </div>\n    <!-- col-md-8-->\n</div>\n<!-- row-->\n');
window.JST['services_configure_smb'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n            <div class="panel-heading">Configure {{serviceName}}</div>\n\n            <div class="panel-body">\n                <form class="form-horizontal" id="smb-form" name="aform">\n                    <div class="messages"></div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="workgroup">Workgroup<span class="required"> * \n                            {{#isEnabledAD}}\n                            <i class="fa fa-info-circle" title="Workgroup field disabled: Active Directory is running and workgroup name has been retrieved from domain"></i>\n                            {{/isEnabledAD}}                          \n                            </span>\n                        </label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="workgroup" name="workgroup" value="{{config.workgroup}}" placeholder="MYGROUP" {{#isEnabledAD}} disabled {{/isEnabledAD}} title="the Windows NT domain name or workgroup name, for example, MYGROUP.">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="global_config">Custom global configuration </label>\n                        <div class="col-sm-8">\n                            <textarea rows="5" columns="40" id="global_config" name="global_config" class="form-control">{{display_smb_params}}</textarea>\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <div class="col-sm-8 col-sm-offset-4">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="submit" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n                </form>\n\n            </div>\n            <!-- panel-body -->\n        </div>\n        <!--panel-default-->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_configure_snmpd'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="panel panel-default">\n\n            <div class="panel-heading">Configure {{serviceName}}</div>\n\n            <div class="panel-body">\n                <form class="form-horizontal" id="snmpd-form" name="aform">\n                    <div class="messages"></div>\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="syslocation">System Location<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="syslocation" name="syslocation" value="{{config.syslocation}}" placeholder="System Location" title="A string indicating the location of the system">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="syscontact">System Contact<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="syscontact" name="syscontact" value="{{config.syscontact}}" placeholder="System Contact" title="contact(e-mail) information for the administrator">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="rocommunity">RO Community<span class="required"> *</span></label>\n                        <div class="col-sm-4">\n                            <input class="form-control" type="text" id="rocommunity" name="rocommunity" value="{{config.rocommunity}}" placeholder="RO Community" title="a community name to allow read-only access">\n                        </div>\n                    </div>\n\n                    <div class="form-group">\n                        <label class="col-sm-4 control-label" for="options">Below directives will be put in /etc/snmp/snmpd.conf file</label>\n                        <div class="col-sm-8">\n                            <textarea class="form-control" id="options" name="options" rows="5" columns="40">{{config.aux}}</textarea>\n                        </div>\n                    </div>\n\n                    <!-- Submit -->\n                    <div class="form-group">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <button id="cancel" class="btn btn-default">Cancel</button>\n                            <button type="Submit" id="create-user" class="btn btn-primary">Submit</button>\n                        </div>\n                    </div>\n\n                </form>\n\n            </div>\n            <!-- panel-body-->\n        </div>\n        <!--panel-default-->\n    </div>\n    <!-- col-md-8 -->\n</div>\n<!-- row -->\n');
window.JST['services_services'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n\n<div id="messages"></div>\n<div class="row">\n    <div class="col-md-12">\n        <br>\n        <br>\n        <div id="services-list">\n            <div id="service">\n                <table id="services-table" class="table table-bordered table-striped table-condensed data-table" width="100%">\n                    <thead>\n                        <tr>\n                            <th scope="col">Name</th>\n                            <th scope="col">Status</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {{#each servicesColl}}\n                        <tr id="{{this.name}}">\n                            <td>{{this.display_name}} &nbsp; {{#isServiceConfigurable this.name}}\n                                <a href="#" class="configure" data-service-name="{{this.name}}"><i class="glyphicon glyphicon-wrench"></i></a>&nbsp; {{/isServiceConfigurable}}\n                                {{#ifTooltipExist this.name}}\n                                    <i class="fa fa-info-circle" title="{{lookup ../tooltipMap this.name}}"></i>\n                                {{/ifTooltipExist}}\n                            </td>\n                            <td id="{{this.name}}-status">\n                                <input type="checkbox" data-service-name="{{this.name}}" data-size="mini" {{#if this.status}} checked {{/if}}>\n                                <div class="command-status" data-service-name="{{this.name}}">&nbsp;</div>\n                                <div class="simple-overlay" id="{{this.name}}-err-popup">\n                                    <div class="overlay-content"></div>\n                                </div>\n                            </td>\n                        </tr>\n                        {{/each}}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n');
window.JST['setup_certificate_desc'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n<div class="row">\n  <div class="col-md-8">\n    <label class="control-label"></label>\n        <div class="messages">\n          {{display_message}}\n        </div>\n        <br>\n        <div class="controls">\n      	<button type="Submit" id="update-certificate" class="btn btn-primary">Update SSL Certificate</button>\n        </div>\n  </div>\n</div>\n');
window.JST['setup_disk'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div class="row">\n  <div class="col-md-12">\n    <ul class="nav nav-tabs" id="myTab">\n      <li><a href="#">Network Setup</a></li>\n      <li class="active"><a href="#">Disk Setup</a></li>\n    </ul>\n\n    <!-- Content -->\n    <div class="module-content">\n      <div class="row">\n        <div class="col-md-12">\n          Disk setup\n        </div>\n      </div>\n    </div> <!-- End Content -->\n\n  </div>\n</div>\n\n');
window.JST['setup_disks'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n\n<div id="disks-table"></div>\n<button id="rescan" class="btn btn-primary">Rescan</button>\n\n');
window.JST['setup_network'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<!-- Header -->\n<div class="row">\n  <div class="col-md-12">\n    <div class="module-header">\n      <div class="title"><span class="h3">Network Interfaces</span></div>\n    </div>\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <div id="interfaces"></div>\n    <!-- Content -->\n  </div>\n</div>\n\n\n');
window.JST['setup_new_user'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<h3>Add User</h3>\n<div id="add-user-msg"></div>\n<table id="new-users-table" class="table table-condensed table-bordered table-hover table-striped share-table tablesorter" summary="List of user">\n  <thead>\n    <tr>\n      <th scope="col" abbr="username">Username</th>\n      <th scope="col" abbr="password">Password</th>\n      <th scope="col" abbr="confirm_password">Confirm Password</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><input type="text" id="username" name="username"/></td>\n      <td><input type="password" id="password" name="password"/></td>\n      <td><input type="password" id="password_confirmation" name="password_confirmation"/></td>\n    </tr>\n  </tbody>\n</table>\n\n<button id="save-new-user" type="submit" class="btn btn-primary">Save</button>\n<button id="cancel-new-user" type="submit" class="btn btn-default">Cancel</button>\n\n\n');
window.JST['setup_setup'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<!-- page heading -->\n<div class="row">\n  <div class="col-md-8">\n\n    <div class="row">\n      <div class="col-md-12">\n\n        <div id="current-page">\n          \n          <div class="row">\n            <div class="col-md-12">\n              <div id="current-page-inner">\n              </div>\n            </div>\n          </div>\n\n          <div class="row">\n            <div class="col-md-12">\n              <button id="next-page" class="btn btn-primary wizard-btn">Next</button>\n              <button id="prev-page" class="btn wizard-btn">Back</button>\n            </div>\n          </div>\n\n        </div> <!-- current-page -->\n      </div>\n    </div>\n\n\n  </div> <!-- col-md-6 -->\n</div> <!-- row -->\n\n');
window.JST['setup_system'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<!-- Header -->\n<div class="row">\n  <div class="col-md-12">\n    <div class="module-header">\n      <div class="title"><span class="h3">Set Hostname</span></div>\n    </div>\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <label class="control-label"></label>\n    <div class="form-box"> \n      <form name="set-hostname-form" id="set-hostname-form">\n        <div class="messages"></div>\n        <div class="form-group">\n          <label class="control-label" for="hostname">Appliance Hostname<span class="required"> *</span></label>\n          <div class="controls">\n            <input type="text" name="hostname" id="hostname" value="RockStor">\n          </div>\n        </div>\n      </form>\n    </div>\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n<br>\n<br>\n\n\n');
window.JST['setup_update_certificate'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n<div class="row">\n  <div class="col-md-8">\n    <div class="panel panel-default">\n    <div class="panel-heading">Update SSL Certificate</div>\n    <div class="panel-body">\n      <form id="update-certificate-form" name="update-certificate-form" class="form-horizontal" >\n        <div class="messages"></div>\n        <div class="form-group">\n	  <label class="control-label col-sm-4" for="certificatename">Certificate Name\n	    <span class="required"> *</span>\n       	  </label>\n	    <div class="col-sm-4">\n       	      <input type="text" class="form-control valid" id="certificatename" name="certificatename" title="Name of the certificate.">\n	    </div>\n        </div>\n        <div class="form-group">\n	  <label class="control-label col-sm-4" for="certificate">Certificate\n          <span class="required"> *</span>\n       	 </label>\n	    <div class="col-sm-8">\n            <textarea class="form-control valid" id="certificate" name="certificate" rows="15" cols="50"\n            placeholder="-----BEGIN CERTIFICATE-----\nMIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3DQEBBQUAMEU\nBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnR\n.... .... .... .... .... .... .... .... .... .... ....\n-----END CERTIFICATE-----"\n		      title="Content of the certificate starting with \'-----BEGIN CERTIFICATE-----\' and ending with  \'-----END CERTIFICATE-----\' ."></textarea>\n	    </div>\n        </div>\n        <div class="form-group">\n	  <label class="control-label col-sm-4" for="privatekey">Private Key\n          <span class="required"> *</span>\n       	 </label>\n	    <div class="col-sm-8">\n              <textarea class="form-control valid" id="privatekey" name="privatekey" rows="15" cols="50"\n            placeholder="-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIS2qgprFqPxECAggA\n9g73NQbtqZwI+9X5OhpSg/2ALxlCCjbqvzgSu8gfFZ4yo+Xd8VucZDmDSpzZGDod\nA .... .... ..... .... .... .... .... .... .... .... .... ....\nGEs=\n-----END ENCRYPTED PRIVATE KEY-----" title="Content of the private key starting with \'-----BEGIN ENCRYPTED PRIVATE KEY-----\' and ending with  \'-----END ENCRYPTED PRIVATE KEY-----\'."></textarea>\n	    </div>\n        </div>\n        <div class="form-group">\n	     <div class="col-sm-offset-4 col-sm-8">\n              <button id="cancel" class="btn btn-default">Cancel</button>\n              <button type="Submit" id="save-certificate" class="btn btn-primary">Submit</button>\n	    </div>\n        </div>\n      </form>\n    </div><!--panel-body-->\n  </div><!--panel-default-->\n</div><!--col-md-8-->\n</div><!--row-->\n');
window.JST['sftp_add_sftp_share'] = Handlebars.compile('<div class="row">\n<div class="col-md-8">\n<div class="panel panel-default">\n<div class="panel-heading">Add SFTP Share</div>\n<div class="panel-body">\n      <form id="add-sftp-share-form" name="aform" class="form-horizontal">\n        <div class="messages"></div>\n\n        <!-- Shares -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="shares">Shares to export<span class="required">*</span></label>\n	      <div class="col-sm-4">\n              <select class="form-control" name="shares" id="shares" size="10" data-placeholder="Select shares" multiple="multiple">\n        		{{#each shares}}\n        		      <option value="{{this.name}}">{{this.name}}</option>\n        		{{/each}}\n              </select>\n	      </div>\n        </div>\n\n        <!-- Read only -->\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="read_only">Access type</label>\n	      <div class="col-sm-8">\n              <label class="radio-inline">\n		<input type="radio" name="read_only" value="false" checked="checked"> Writable\n              </label>\n              <label class="radio-inline">\n		<input type="radio" name="read_only" value="true"> Read only\n              </label>\n          </div>\n        </div>\n\n        <!-- Submit -->\n        <div class="form-group">\n          <div class="controls">\n	    <div class="col-sm-offset-4 col-sm-8">\n              <a id="cancel" class="btn btn-default">Cancel</a>\n              <input type="Submit" id="create-sftp-share" class="btn btn-primary" value="Submit"></input>\n	    </div>\n          </div>\n        </div>\n\n      </form>\n  </div><!-- panel-body-->\n    </div><!--panel-default-->\n  </div> <!-- col-md-8 -->\n</div>  <!-- row -->\n');
window.JST['sftp_sftp'] = Handlebars.compile('<div class="row">\n  <div class="col-md-12">\n    <div id="details-header">\n      <table>\n        <tr>\n          <td><span class="h3">SFTP Service&nbsp;&nbsp;&nbsp;</span></td>\n          <td>\n            <input type="checkbox" name="sftp-service-checkbox" data-size="mini">\n          </td>\n        </tr>\n      </table>\n    </div>\n    <div id="sftp-warning" class="alert alert-warning" style="display:none">\n    	<strong>Warning! SFTP Service is not running</strong>. Clients won\'t be able to mount unless SFTP is running.\n    </div>\n    <div class="messages"></div>\n    {{#if collectionNotEmpty}}\n      <table id="sftp-shares-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of sftp shares">\n        <thead>\n          <tr>\n            <th scope="col" abbr="Host String">Share</th>\n            <th scope="col" abbr="Read only">Read only</th>\n            <th scope="col" abbr="Actions">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{#each sftpShare}}\n            <tr>\n                <td><a href="#shares/{{this.share_id}}">{{this.share}}</a></td>\n                <td>{{displaySftpPermission this.editable}}</td>\n                <td><a href="#" class="delete-sftp-share" data-id="{{this.id}}">\n                <i class="glyphicon glyphicon-trash"></i></a></td>\n            </tr>\n          {{/each}}\n        </tbody>\n      </table>\n      {{else}}\n      <table id="sftp-shares-table" class="table table-condensed table-bordered table-hover table-striped share-table tablesorter" summary="List of sftp shares">\n        <tbody>\n          <tr>\n            <td colspan="5">\n              <h4>No sftp shares have been created</h4>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      {{/if}}\n\n  </div>\n</div>\n\n<a id="add-sftp-share" class="btn btn-primary"\n    {{#if sharesNotEmpty}}\n        href="#add-sftp-share">\n    {{else}}\n        disabled="disabled" title="No shares available to export via SFTP">\n    {{/if}}\n<i class="glyphicon glyphicon-edit "></i> Add SFTP Share</a>\n\n');
window.JST['share_add_iscsi_target_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<tr id="new-row">\n  <td>\n    <input type="text" name="tname">\n  </td>\n  <td>\n    <input type="text" name="tid">\n  </td>\n  <td>\n    <button class="btn btn-primary" id="save-new">Save</button>\n    <a href="#" id="cancel-add">Cancel</a>\n  </td>\n</tr>\n\n');
window.JST['share_add_share_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n  <div class="row">\n  <div class="col-md-8">\n  <div class="panel panel-default">\n  <div class="panel-heading">Create Share</div>\n  <div class="panel-body">\n    <form class="form-horizontal" id="add-share-form">\n      <div class="messages"></div>\n      <div class="form-group">\n        <label for="share_name" class="col-sm-4 control-label">Name</label>\n        <div class="col-sm-6">\n          <input class="form-control" type="text" name="share_name" id="share_name" title="Follow characters are allowed: letter(a-z or A-Z), digit(0-9), hyphen(-), underscore(_) or a period(.).">\n        </div>\n      </div>\n      <div class="form-group">\n        <label for="pool_name" class="col-xs-4 control-label">Pool <span class="required">*</span></label>\n        <div class="col-sm-6">\n          <select class="form-control" id="pool_name" name="pool_name" title="Select pool the share should belong to">\n          {{print_pool_names}}\n          </select>\n        </div>\n      </div>\n      <div class="form-group">\n        <label class="col-xs-4 control-label" for="compression">Compression</label>\n        <div class="col-sm-6">\n          <select class="form-control" id="compression" name="compression">\n            <option value="no">Inherit from pool wide configuration</option>\n            <option value="zlib">zlib</option>\n            <option value="lzo">lzo</option>\n          </select>\n        </div>\n      </div>\n      <div class="form-group">\n        <label class="col-xs-4 control-label" for="share_size">Size<span class="required"> *</span></label>\n        <div class="col-xs-8">\n          <div id="slider" class="control-label" style="width: 400px;"></div>\n          <input type="text" style="margin-top: 16px;" class="col-md-3" name="share_size" id="share_size" title="Enter share size in GB or TB">\n        </div>\n      </div>\n      <div class="form-group">\n        <div class="col-xs-8 col-xs-offset-4">\n          <div style="width: 15px; height: 15px; float: left" class="slider-legend-free"></div> <div>&nbsp;<span id="legend-free-num"></span>&nbsp;Space that is completely free and unprovisioned</div>\n          <br>\n          <div style="width: 15px; height: 15px; float: left" class="slider-legend-reclaimable"></div> <div>&nbsp;<span id="legend-reclaimable-num"></span>Space that is provisioned for other shares, but currently free</div>\n          <br>\n          <div style="width: 15px; height: 15px; float: left" class="slider-legend-used"> </div><div>&nbsp;<span id="legend-used-num"></span>Space that is provisioned for other shares and is in use</div>\n        </div>\n      </div>\n      <div class="form-group">\n        <div class="col-xs-6 col-xs-offset-4">\n          <a id="js-cancel" class="btn btn-default">Cancel</a>\n          <input type="Submit" id="create_share" class="btn btn-primary" value="Submit"></input>\n        </div>\n      </div>\n</div><!--panel-body-->\n    </form>\n  </div> <!-- panel closing -->\n</div>\n</div>\n');
window.JST['share_compression_info'] = Handlebars.compile('<table>\n  <tr>\n    <td>Compression algorithm: </td>\n    <td>\n    {{#if shareCompressionNull}}\n      <strong>None</strong>\n    {{else}}\n      <strong>{{shareCompression}}</strong>\n    {{/if}}\n    </td>\n  </tr>\n</table>\n<a id="js-edit-compression" class="btn btn-primary" href="#">Edit</a>\n');
window.JST['share_compression_info_edit'] = Handlebars.compile('<form name="add-share-form" id="add-share-form" >\n  <div class="row">\n  <div class="form-group col-md-3">\n    <label class="control-label" for="compression">Compression algorithm</label>\n      <select id="compression" name="compression" class="form-control">\n        {{display_share_compressOptions}}\n      </select>\n    </div>\n  </div>\n  <div class="form-group">\n  <a id="js-submit-compression" class="btn btn-primary" href="#">Submit</a>\n    &nbsp;\n  <a id="js-edit-compression-cancel" class="btn btn-default" href="#">Cancel</a>\n  </div>\n</form>\n');
window.JST['share_create_clone'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="row">\n  <div class="col-md-8">\n<div class="panel panel-default">\n<div class="panel-heading">Create clone from \n{{#if sourceTypeIsShare}}\n  share <strong>{{shareName}}\n{{else}}\n  snapshot <strong>{{snapName}}</strong> of share <strong>{{shareName}}\n{{/if}}\n</strong></div>\n\n    <div class="panel-body">\n      <form class="form-horizontal" name="create-clone-form" id="create-clone-form">\n        <div class="messages"></div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="name">Clone Name<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input type="text" class="form-control" name="name" id="name" title="Desired name of the Clone">\n          </div>\n        </div>\n        <div class="form-group">\n          <div class="col-sm-8 col-sm-offset-4">\n            <a id="js-cancel" class="btn btn-default">Cancel</a>\n            <input type="Submit" id="create-clone" class="btn btn-primary" value="Submit"></input>\n          </div>\n        </div>\n      </form>\n    </div><!--panel-body-->\n  </div><!--panel-default-->\n</div><!--col-md-8-->\n</div><!--row-->\n');
window.JST['share_iscsi_target_empty_row_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<tr> <td colspan="6"> <h4>No iSCSI target created. </h4> </td> </tr>\n');
window.JST['share_rollback'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<h3>Select a snapshot to rollback the share ({{shareName}}) to</h3>\n\n<form name="rollback-form" id="rollback-form">\n  <div id="ph-snapshot-list"></div>\n  <div class="form-group">\n    <div class="controls">\n      <a id="js-cancel" class="btn btn-default">Cancel</a>\n      <input type="Submit" id="rollback-share" class="btn btn-primary" value="Submit"></input>\n    </div>\n  </div>\n</form>\n\n<div id="confirm-rollback" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n        <h3 id="myModalLabel">Confirm share rollback</h3>\n      </div>\n      <div class="modal-body">\n        <div class="messages"></div>\n        <h4>Share ({{shareName}}) will be rolled back to snapshot (<span id="confirm-snap-name"></span>). Are you sure?</h4>\n      </div>\n      <div class="modal-footer">\n        <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">Cancel</button>\n        <button id="js-confirm-rollback-submit" class="btn btn-primary">Confirm</button>\n      </div><!--end modal-fooetr-->\n    </div><!--end modal-content-->\n  </div><!--end modal-dialog-->\n</div>\n');
window.JST['share_rollback_snapshot_list'] = Handlebars.compile('{{#if collectionNotEmpty}}\n  <table id="snapshots-table" class="table table-condensed table-bordered table-hover table-striped share-table tablesorter" summary="List of snapshots">\n    <thead>\n      <tr>\n        <th>Select</th>\n        <th>Name</th>\n        <th>Created on</th>\n        <th>Size</th>\n      </tr>\n    </thead>\n    <tbody>\n    {{#each rollbackSnaps}}\n        {{#if this.writable}}\n        <tr>\n            <td><input type="radio" name="snapshot" value="{{this.name}}"></td>\n            <td><i class="glyphicon glyphicon-camera"></i> {{this.name}}</td>\n            <td>{{getDate this.toc}}</td>\n            <td>{{humanReadableSize this.size}}</td>\n        </tr>\n        {{/if}}\n    {{/each}}\n    </tbody>\n  </table>\n  <div>{{pagination}}</div>\n{{/if}}');
window.JST['share_share_acl'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<div class="messages"></div>\n<div>\n  <a class="btn btn-primary" href="#" id="js-acl-edit"><i class="glyphicon glyphicon-edit "></i> Edit</a>\n</div>\n<br><br>\n<table class="table table-bordered table-condensed">\n  <tr>\n    <td>Owner</td>\n    <td>{{shareOwner}}</td>\n  </tr>\n  <tr>\n    <td>Group</td>\n    <td>{{shareGroup}}</td>\n  </tr>\n  <tr>\n    <td>\n      Permissions<br>\n      (<span id="permStrEdit">{{sharePerms}}</span>)\n    </td>\n    <td>\n      <table class="noborder table-condensed">\n        <tr>\n          <td>&nbsp;</td>\n          <td>Owner</td>\n          <td>Group</td>\n          <td>Other</td>\n        </tr>\n        <tr>\n          <td>Read</td>\n          {{view_read_permissions}}\n        </tr>\n        <tr>\n          <td>Write</td>\n          {{view_write_permissions}}\n        </tr>\n        <tr>\n          <td>Execute</td>\n          {{view_execute_permissions}}\n        </tr>\n\n      </table>\n    </td>\n  </tr>\n</table>\n');
window.JST['share_share_acl_edit'] = Handlebars.compile('\n<table class="table table-bordered table-condensed">\n  <tr>\n    <td>Owner</td>\n    <td>\n    <div class="col-md-3">\n      <select id="share-owner" class="form-control">\n        {{#each users}}\n             <option value="{{this.username}}" {{showOwnerOption this.username ../share.owner}}>{{this.username}}</option> \n        {{/each}}\n      </select>\n      </div>\n    </td>\n  </tr>\n  <tr>\n    <td>Group</td>\n    <td>\n    <div class="col-md-3">\n      <select id="share-group" class="form-control">\n      {{#each groups}}\n             <option value="{{this.groupname}}" {{showGroupOption this.groupname ../share.group}}>{{this.groupname}}</option> \n        {{/each}}\n      </select>\n      </div>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Permissions<br>\n      (<span id="permStrEdit">{{sharePerms}}</span>)\n    </td>\n    <td>\n      <table class="noborder table-condensed">\n        <tr>\n          <td>&nbsp;</td>\n          <td>Owner</td>\n          <td>Group</td>\n          <td>Other</td>\n        </tr>\n        <tr>\n          <td>Read</td>\n          {{edit_read_permissions}}\n        </tr>\n        <tr>\n          <td>Write</td>\n          {{edit_write_permissions}}\n        </tr>\n        <tr>\n          <td>Execute</td>\n          {{edit_execute_permissions}}\n        </tr>\n      </table>\n    </td>\n  </tr>\n</table>\n<a class="btn btn-default" href="#" id="js-acl-cancel"> Cancel</a>\n<a class="btn btn-primary" href="#" id="js-acl-save"> Save</a>\n');
window.JST['share_share_details_layout'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2017 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<div class="messages"></div>\n<div class="pull-right">\n  <span id="rollback-btn-ph"></span>\n    <a id="js-clone" class="btn btn-primary" href="#shares/{{shareId}}/create-clone"><i class="glyphicon glyphicon-book "></i> Clone</a>\n	{{#unless isSystemShare}}\n        <button id="js-delete" class="btn btn-danger" type="button" type="button"><i class="glyphicon glyphicon-trash "></i> Delete </button>\n	{{/unless}}\n</div>\n<span class="h2">{{shareName}}</span>\n<div class="alert alert-warning">\n  <p>\n    Share size enforcement is temporarily disabled due to incomplete support in\n    BTRFS. Until this status changes, the effective size of a Share is equal to the\n    size of the Pool it belongs to.\n	{{#if isSystemShare}}\n	<br/><b>This is a System Share created at installation time on OS Pool and cannot be deleted.</b>\n	{{/if}}\n  </p>\n</div>\n\n<!-- Modal for delete share -->\n\n<div id="delete-share-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n        <h3 id="myModalLabel">Delete {{shareName}} ?</h3>\n      </div>\n      <div class="modal-body">\n        <div class="messages"></div>\n\n        <p>By deleting <strong><em>{{shareName}}</em></strong>, all it\'s data (<strong>{{shareUsage}}</strong>) will be lost. Are you sure?</p>\n\n      <label><input type="checkbox" id="force-delete" name="force-delete"> Force Delete &nbsp;<i class="fa fa-info-circle fa-lg"\n    title="Forces the deletion of undetected Snapshots and then deletes the Share. Useful to forcefully delete the Rock-on root share, for example." rel="tooltip"></i></label>\n      </div>\n      <div class="modal-footer">\n        <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">No</button>\n        <button id="js-confirm-share-delete" class="btn btn-primary">Yes</button>\n      </div><!--end modal-footer-->\n    </div><!--end modal-content-->\n  </div><!--end modal-dialog-->\n</div>\n\n<!-- End delete share Modal -->\n\n\n<ul class="nav nav-tabs">\n  <li class="active"><a href="#usage" data-toggle="tab">Usage</a></li>\n  <li><a href="#access-control" data-toggle="tab">Access control</a></li>\n  <li><a href="#snapshots" data-toggle="tab">Snapshots</a></li>\n</ul>\n\n<div class="css-panes">\n  <div id="usage">\n    <div class="tab-section">\n      <div class="row">\n        <div class="col-md-12">\n          <div id="ph-share-usage"></div>\n	</div>\n      </div>\n    </div>\n    <div class="row">\n      <div class="col-md-12">\n        <div class="tab-section">\n	  <div id="ph-compression-info"></div>\n	</div>\n      </div>\n    </div>\n  </div>\n  <div id="access-control">\n    <div id="ph-access-control"></div>\n  </div>\n  <div id="snapshots">\n    <div id="ph-snapshots"></div>\n  </div>\n</div>\n');
window.JST['share_share_details_rollback_btn'] = Handlebars.compile('<a id="js-rollback" class="btn btn-primary"\n    {{#if rollbackBtnDisabler}}\n        disabled="disabled" title="At least one writable snapshot must exist to rollback to.">\n    {{else}}\n        href="#shares/{{shareId}}/rollback">\n    {{/if}}\n<i class="glyphicon glyphicon-repeat "></i> Rollback</a>\n');
window.JST['share_share_usage_edit'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n\n<h4>Resize Share</h4>\n<div class="row">\n	<div class="col-md-8">\n		<div class="form-box">\n			<div class="messages"></div>\n				<label class="control-label" for="new-size">New Size</label>\n			<form class="form-inline">\n				<div class="form-group">\n					<input class="smallinput form-control" type="text" name="new-size" id="new-size"\n						value="{{newSizeVal}}">\n				</div>\n				<div class="form-group">\n					<select class="smallinput form-control" id="size_format" name="size_format">\n					{{display_shareResize_units}}\n					</select>\n				</div>\n			</form><br />\n			<div class="form-group">\n				<a class="btn btn-default" href="#" id="js-resize-cancel">\n					Cancel</a> <a class="btn btn-primary" href="#" id="js-resize-save">\n					Save</a>\n			</div>\n		</div>\n	</div>\n</div>\n\n\n');
window.JST['share_share_usage_module'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div id="ph-share-info">\n  Created on: <strong>{{shareCreatedDate}}</strong><br>\n  Pool (Active mount options / Status): <a href="#pools/{{pid}}">{{poolName}}</a>\n  {{#if pool_is_mounted}}\n    ({{pool_mount_status}})\n  {{else}}\n    (<strong><span style="color:red">{{pool_mount_status}}</span></strong>)\n  {{/if}}\n  <br>\n  Pool Quotas:&nbsp;\n  {{#if pool_quotas_enabled}}\n    Enabled\n  {{else}}\n    <strong><span style="color:red">Disabled</span></strong>\n  {{/if}}\n  <br>\n  Active mount options / Status:\n  <strong>\n  {{#if share_is_mounted}}\n    {{share_mount_status}}\n  {{else}}\n    <span style="color:red">{{share_mount_status}}</span>\n  {{/if}}\n  </strong>\n</div>\n<br><br>\n<div id="chart"></div>\n<a class="btn btn-primary" href="#" id="js-resize"><i class="glyphicon glyphicon-edit "></i> Resize</a>\n\n\n');
window.JST['share_shares'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <!-- Content -->\n    <div class="messages"></div>\n    <div id="shares-table-ph">\n    </div>\n    <!-- End Content -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row --> \n\n\n\n');
window.JST['share_shares_table'] = Handlebars.compile('<div class="alert alert-warning">\n  <p>\n    Share size enforcement is temporarily disabled due to incomplete support in\n    BTRFS. Until this status changes, the effective size of a Share is equal to the\n    size of the Pool it belongs to.\n  </p>\n</div>\n\n{{#if collectionNotEmpty}}\n  <table id="shares-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of shares">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Size</th>\n        <th>Usage <i class="fa fa-info-circle" title="Share content - uses Quotas" /></th>\n        <th>Btrfs Usage <i class="fa fa-info-circle" title="Share content inc snapshots - uses Quotas" /></th>\n        <th>Active mount options / Status</th>\n        <th>Pool (Active mount options / Status) Quotas</th>\n        <th>Compression <i class="fa fa-info-circle" title="Inherits pool setting if not specified on share" /></th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n    {{#each shares}}\n    <tr>\n        <td><a href="#shares/{{this.id}}"><i class="glyphicon glyphicon-folder-open"></i>&nbsp;&nbsp;{{this.name}}</a></td>\n        <td>{{humanize_size this.size}}</td>\n        <td>{{humanize_size this.rusage}}</td>\n        <td>{{humanize_size this.pqgroup_rusage}} {{checkUsage this.size this.pqgroup_rusage}}</td>\n        <td>\n            {{#if this.is_mounted}}\n                {{this.mount_status}}\n            {{else}}\n                <strong><span style="color:red">{{this.mount_status}}</span></strong>\n            {{/if}}\n        </td>\n        <td><a href="#pools/{{this.pool.id}}">{{this.pool.name}}</a>\n            {{#if this.pool.is_mounted}}\n                ({{this.pool.mount_status}})\n            {{else}}\n                (<strong><span style="color:red">{{this.pool.mount_status}}</span></strong>)\n            {{/if}}\n            {{# if this.pool.quotas_enabled}}\n                Enabled\n            {{else}}\n                <strong><span style="color:red">Disabled</span></strong>\n            {{/if}}\n        </td>\n        <td>\n        {{displayCompressionAlgo this.compression_algo this.id}}\n        </td>\n        <td>{{#if (isSystemShare this.id this.pool.role)}}\n                N/A\n            {{else}}\n                <a id="delete_share_{{this.name}}" data-id="{{this.id}}" data-name="{{this.name}}" data-action="delete"\n                data-pool="{{this.pool.name}}" data-size="{{humanize_size this.size}}" data-usage="{{humanize_size this.eusage}}" rel="tooltip" title="Delete share"><i class="glyphicon glyphicon-trash"></i></a>\n            {{/if}}\n		</td>\n    </tr>\n    {{/each}}\n    </tbody>\n  </table>\n  <a href="#add_share" id="add_share" class="btn btn-primary"><i class="glyphicon glyphicon-edit "></i> Create Share</a>\n{{ else }}\n      <h4>No shares have been created</h4>\n      <a href="#add_share" id="add_share" class="btn btn-primary"><i class="glyphicon glyphicon-edit "></i> Create Share</a>\n{{/if}}\n\n{{! Todo: maintain a common file and function for all modals? }}\n<div id="delete-share-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header modal-header-danger">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n        <h3 class="modal-title">Delete <span class="pass-share-name"></span> ?</h3>\n      </div>\n      <div class="modal-body">\n        <div class="messages"></div>\n        <p>Deleting <strong><em><span class="pass-share-name"></span></em></strong> will destroy all of it\'s data (<strong><span id="pass-share-usage"></span></strong>). Are you sure?</p>\n	<label><input type="checkbox" id="force-delete" name="force-delete"> Force Delete &nbsp;<i class="fa fa-info-circle fa-lg"\n	title="Forces the deletion of undetected Snapshots and then deletes the Share. Useful to forcefully delete the Rock-on root share, for example." rel="tooltip"></i></label>\n      </div>\n      <div class="modal-footer">\n        <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">No</button>\n        <button id="js-confirm-share-delete" class="btn btn-primary">Yes</button>\n      </div><!--end modal-fooetr-->\n    </div><!--end modal-content-->\n  </div><!--end modal-dialog-->\n</div>\n');
window.JST['share_shares_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n\n<div class="row">\n  <div class="col-md-12">\n    <div id="ph-shares-table"></div>\n  </div>\n</div>\n\n');
window.JST['share_smb_shares_table_empty_body_template'] = Handlebars.compile('\n<tr> <td colspan="6"> <h4>No smb share added. </h4> </td> </tr>\n');
window.JST['share_snapshot_add'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<h4>Create Snapshot</h4>\n\n<div class="row">\n    <div class="col-md-8">\n        <label class="control-label"></label>\n        <div class="form-box">\n            <form name="add-snapshot-form" id="add-snapshot-form" class="form-horizontal">\n                <div class="messages"></div>\n\n                <div class="form-group">\n                    <label class="col-sm-4 control-label" for="snapshot-name">Name<span class="required"> *</span></label>\n                    <div class="controls">\n                        <div class="col-sm-8">\n                            <input class="form-control shorten-input" type="text" name="snapshot-name" id="snapshot-name" title="Following characters are allowed: letter(a-z or A-Z), digit(0-9), hyphen(-), underscore(_) or a period(.).">\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <label class="col-sm-4 control-label" for="writable">Writable<span class="required"> *</span></label>\n                    <div class="controls">\n                        <div class="col-sm-8">\n                            <input type="checkbox" name="writable" id="snapshot-writable" title="Snapshots can be made writable by selecting this checkbox">\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class="form-group">\n                    <label class="col-sm-4 control-label" for="snapshot-visible"> </label>\n                    <div class="controls">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <input type="checkbox" name="uvisible" id="snapshot-visible" title="Snapshots can be visible or hidden to the end user of the Share"> Visible to user?\n                        </div>\n                    </div>\n                </div>\n\n                <div class="form-group">\n                    <div class="controls">\n                        <div class="col-sm-offset-4 col-sm-8">\n                            <a class="btn btn-default" href="#" id="js-snapshot-cancel"> Cancel</a>\n                            <input type="Submit" class="btn btn-primary" value="Submit" id="js-snapshot-save"></input>\n                        </div>\n                    </div>\n                </div>\n\n            </form>\n        </div>\n    </div>\n</div>\n');
window.JST['share_snapshot_add_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n    <div class="row">\n    <div class="col-md-8">\n    <div class="panel panel-default">\n    <div class="panel-heading">Create Snapshot</div>\n    <div class="panel-body">\n      <form class="form-horizontal" name="add-snapshot-form" id="add-snapshot-form" >\n        <div class="messages"></div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="snapshot_name">Name<span class="required"> *</span></label>\n          <div class="col-sm-4">\n            <input type="text" class="form-control" name="snapshot_name" id="snapshot_name" title="Name of the Snapshot must start with a letter(a-z) and can be followed by any of the following characters: letter(a-z), digits(0-9), hyphen(-), underscore(_) or a period(.).">\n          </div>\n        </div>\n\n        <!-- Select Shares -->\n        <div class="form-group">\n         <label class="col-xs-4 control-label" for="shares">Share<span class="required"> *</span></label>\n         <div class="col-sm-4">\n         <select name="shares" class="form-control" id="shares" size="10" data-placeholder="Select share" title="Select the Share to snapshot">\n          {{show_shares_dropdown}}\n         </select>\n         </div>\n        </div>\n\n        <div class="form-group">\n          <label class="col-xs-4 control-label" for="snapshot-writable"> </label>\n          <div class="col-sm-4">\n            <input type="checkbox" name="writable" id="snapshot-writable" title="Snapshots can be made writable by selecting this checkbox"> Writable?\n           </div>\n        </div>\n\n       <div class="form-group">\n          <label class="col-xs-4 control-label" for="snapshot-visible"> </label>\n          <div class="col-sm-4">\n            <input type="checkbox" name="uvisible" id="snapshot-visible" title="Snapshots can be visible or hidden to the end user of the Share"> Visible to user?\n          </div>\n        </div>\n\n        <div class="form-group">\n          <div class="col-xs-8 col-xs-offset-4">\n            <a class="btn btn-default" href="#" id="js-snapshot-cancel"> Cancel</a>\n            <input type="Submit" class="btn btn-primary" value="Submit" id="js-snapshot-save"></input>\n          </div>\n        </div>\n\n      </form>\n    </div>\n</div>\n</div>\n</div>\n');
window.JST['share_snapshots'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n    * This file is part of RockStor.\n    *\n    * RockStor is free software; you can redistribute it and/or modify\n    * it under the terms of the GNU General Public License as published\n    * by the Free Software Foundation; either version 2 of the License,\n    * or (at your option) any later version.\n    *\n    * RockStor is distributed in the hope that it will be useful, but\n    * WITHOUT ANY WARRANTY; without even the implied warranty of\n    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    * General Public License for more details.\n    *\n    * You should have received a copy of the GNU General Public License\n    * along with this program. If not, see <http://www.gnu.org/licenses/>.\n    *\n    */\n</script>\n<div class="messages"></div>\n<div class="pull-left">\n  {{#if snapshotsNotEmpty}}\n  <a class="btn btn-danger" href="#" id="js-snapshot-delete-multiple" style="visibility:hidden;"><i class="glyphicon glyphicon-trash "></i> Delete selected</a>\n  {{/if}}\n</div>\n<div class="pull-right">\n  <a class="btn btn-primary" href="#" id="js-snapshot-add"><i class="glyphicon glyphicon-edit "></i> Create</a>\n  <a class="btn btn-primary" href="#scheduled-tasks" ><i class="glyphicon glyphicon-tasks "></i> Schedule </a>\n</div>\n</br>\n</br>\n\n{{#if snapshotsNotEmpty}}\n\n<table id="snapshots-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of snapshots">\n  <thead>\n    <tr>\n      <th>\n        <input class="js-snapshot-select-all inline" type="checkbox" name="snapshot-select-all" ></input>\n      </th>\n      <th>Snapshot Name</th>\n      <th>Total Size</th>\n      <th>Exclusive Size</th>\n      <th>Created on</th>\n      <th>Share (Active mount options / Status)</th>\n      <th>Visibility</th>\n      <th>Writable</th>\n    </tr>\n  </thead>\n  <tbody>\n  {{#each snapshots}}\n          <tr>\n              <td><input class="js-snapshot-select inline" type="checkbox" name="snapshot-select" \n              data-name="{{this.name}}" data-id=\'{{this.id}}\' {{checkboxValue this.name}}></input>\n              </td>\n              <td><i class="glyphicon glyphicon-camera"></i>&nbsp;{{this.name}}\n               {{#if this.writable}}\n                    <a class="js-snapshot-clone" href="#" data-name="{{this.name}}" data-share-name="{{this.share_name}}" data-share-id="{{this.share}}">\n                    <i rel="tooltip" title="Clone snapshot" class="glyphicon glyphicon-book"></i></a>\n               {{/if}}\n                <a href="#" class="js-snapshot-delete" id="delete_snapshot_{{this.name}}" data-name="{{this.name}}" data-size="{{getSize this.eusage}}" \n                data-share-name="{{this.share_name}}" data-share-id="{{this.share}}" data-action="delete" title="Delete snapshot">\n                <i rel="tooltip" title="Delete snapshot" class="glyphicon glyphicon-trash"></i></a>\n              </td>\n              <td>{{getSize this.rusage}}</td>\n              <td>{{getSize this.eusage}}</td>\n              <td>{{getToc this.toc}}</td>\n              <td><a href="#shares/{{this.share}}">{{this.share_name}}</a>\n                  {{#if this.share_is_mounted}}\n                    ({{this.share_mount_status}})\n                  {{else}}\n                    (<strong><span style="color:red">{{this.share_mount_status}}</span></strong>)\n                  {{/if}}\n              </td>\n               <td>\n               {{#if this.uvisible}}\n                    Visible\n               {{else}}\n                    Hidden\n               {{/if}}\n               </td>\n               <td>\n               {{#if this.writable}}\n                    Yes\n               {{else}}\n                    No\n               {{/if}}\n               </td>\n          </tr>\n  {{/each}}\n  </tbody> \n  </table>\n  {{else}}\n  <div class="alert alert-warning"><h4>There are no snapshots to display</h4></div>\n  {{/if}}\n \n  \n  \n  \n  \n');
window.JST['share_snapshots_table_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n<div class="messages"></div>\n<div class="pull-left custom-padding">\n  {{#if collectionNotEmpty}}\n    <a class="btn btn-primary" href="#" id="js-snapshot-add"><i class="glyphicon glyphicon-edit "></i> Create</a>\n  <a class="btn btn-danger" href="#" id="js-snapshot-delete-multiple" style="visibility:hidden;"><i class="glyphicon glyphicon-trash "></i> Delete selected</a>\n  {{/if}}\n</div>\n{{#if collectionNotEmpty}}\n  <table id="snapshots-table" class="table table-condensed table-bordered table-hover table-striped share-table tablesorter" summary="List of snapshots">\n    <thead>\n      <tr>\n        <th>\n          <input class="js-snapshot-select-all inline" type="checkbox" name="snapshot-select-all" ></input>\n        </th>\n        <th>Name</th>\n        <th>Created on</th>\n        <th>Visibility to user</th>\n        <th>Writable</th>\n        <th>Total Size</th>\n	    <th>Exclusive Size</th>\n      </tr>\n    </thead>\n    <tbody>\n      {{#each snapshots}}\n          <tr>\n              <td>{{printCheckboxes this.name this.id}}</td>\n              <td><i class="glyphicon glyphicon-camera"></i> {{this.name}} &nbsp;&nbsp;&nbsp;&nbsp;\n              {{#if this.writable}}\n                <a class="js-snapshot-clone" href="#" data-name="{{this.name}}"><i rel="tooltip" title="Clone snapshot" class="glyphicon glyphicon-book"></i></a>&nbsp;\n              {{/if}}\n              <a href="#" class="js-snapshot-delete" id="delete_snapshot_{{this.name}}" data-name="{{this.name}}" data-size="{{getSize this.eusage}}" \n              data-share-name="{{this.share.name}}" data-action="delete" title="Delete snapshot"><i rel="tooltip" title="Delete snapshot" class="glyphicon glyphicon-trash"></i></a>\n              </td>\n              <td>{{getToc this.toc}}</td>\n               <td>\n               {{#if this.uvisible}}\n                    Visible\n               {{else}}\n                    Hidden\n               {{/if}}\n               </td>\n               <td>\n               {{#if this.writable}}\n                    Yes\n               {{else}}\n                    No\n               {{/if}}\n               </td>\n               <td>{{getSize this.rusage}}</td>\n               <td>{{getSize this.eusage}}</td>\n          </tr>\n      {{/each}}\n    </tbody>\n  </table>\n<div>{{pagination}}</div>\n{{else}}\n  <div class="share-snapWarning"><p>There are no snapshots. <a href="#" id="js-snapshot-add">click here </a>to create</p></div>\n{{/if}}');
window.JST['shell_shell'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n<div class="row" name="shell-container" style="display: none;">\n  <div class="col-md-12">\n    <div id="details-header">\n      <table>\n        <tr>\n          <td><span class="h3">Shell In a Box Service&nbsp;&nbsp;&nbsp;</span></td>\n          <td>\n          <input type="checkbox" name="shell-export-checkbox" data-size="mini">\n          </td>\n        </tr>\n      </table>\n    </div>\n    <div id="shell-warning" class="alert alert-warning" style="display: none;">\n    	<strong>Warning! Shell In A Box Service is not running</strong>. Shell access not available\n    </div>\n  </div>\n</div>\n<iframe id="rockstor-shell" style="display: none;"></iframe>\n<button type="button" id="fullscreen" class="btn btn-secondary btn-sm" style="position: absolute; top: 25px; right: 25px; opacity: 0.7; display: none;"><i class="fa fa-arrows-alt" aria-hidden="true"></i></button>');
window.JST['support_add_support_case_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div class="row">\n  <div class="col-md-12">\n    <div class="pageheading">\n      <div id="title" class="title"><span class="h1">Create Support Case</span></div>\n    </div>\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<div class="row">\n  <div class="col-md-12">\n    <div class="module">\n      <div class="row">\n        <div class="col-md-12">\n          <!-- Content -->\n          <div class="module-content">\n            <form name="add-support-case-form" id="add-support-case-form">\n              Support Case Notes: \n              \n              <br/>\n              <input type="textarea" name="support_notes" id="support_notes">\n              <br/>\n              <input type="Submit" id="create_support_case" class="btn btn-primary" value="Submit" title="Created the support case on submission"></input>\n            </form>\n          </div> <!-- module-content -->\n        </div> <!-- col-md-12 -->\n      </div> <!-- row -->\n\n    </div> <!-- module -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n');
window.JST['support_support_template'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n\n<div class="row">\n  <div class="col-md-12">\n    <div id="ph-support-table"></div>\n  </div>\n</div>\n\n');
window.JST['update_version_info'] = Handlebars.compile('<script>\n$(document).ready(function(){\n  $("#subscription-table tr td:first-child").css( "color", "#eb6841" );\n});\n</script>\n\n<div class="row">\n  <div class="col-md-8 col-md-offset-2">\n\n    {{#is_sub_active defaultSub}}\n    <div class="alert alert-danger">\n      <p>\n	Testing updates are activated. These are cutting edge updates that should\n	be applied only after careful consideration. When an update is released,\n	read the changelog and proceed with caution.\n      </p>\n      <p>\n	Alternatively, Stable updates are generally recommended as shown below.\n      </p>\n    </div>\n    {{/is_sub_active}}\n\n    {{#no_sub_active}}\n    <div class="alert alert-success">\n      <p>\n	You can receive software updates from one of the two update channels as\n	shown in the below table. Please activate a channel that is appropriate\n	for your needs. Stable updates are generally recommended, unless you want\n	to actively test Rockstor. If you have questions, email\n	support@rockstor.com\n      </p>\n    </div>\n    {{/no_sub_active}}\n\n    {{#is_sub_active stableSub}}\n    {{else}}\n    <table class="table table-hover" id="subscription-table">\n      <thead>\n	<tr class="active">\n          <th>Feature</th>\n          <th>Stable Updates</th>\n          <th>Testing Updates</th>\n	</tr>\n      </thead>\n      <tbody>\n	<tr>\n          <td>Update Frequency</td>\n          <td>3-4 Weeks</td>\n          <td>2-3 days</td>\n	</tr>\n	<tr>\n          <td>Priority of bug fixes</td>\n          <td>Highest</td>\n          <td>Varies</td>\n	</tr>\n	<tr>\n          <td>Automated functional testing</td>\n          <td><i class="fa fa-check"></i></td>\n          <td><i class="fa fa-check"></i></td>\n	</tr>\n	<tr>\n          <td>Tested in development environment</td>\n          <td><i class="fa fa-check"></i></td>\n          <td><i class="fa fa-check"></i></td>\n	</tr>\n	<tr>\n          <td>Low risk of regressions</td>\n          <td><i class="fa fa-check"></i></td>\n          <td><i class="fa fa-times"></i></td>\n	</tr>\n	<tr>\n          <td>Tested in production environment</td>\n          <td><i class="fa fa-check"></i></td>\n          <td><i class="fa fa-times"></i></td>\n	</tr>\n	<tr>\n          <td>Tested by community</td>\n          <td><i class="fa fa-check"></i></td>\n          <td><i class="fa fa-times"></i></td>\n	</tr>\n	<tr>\n          <td></td>\n          <td><a id="stable-modal" class="btn btn-success" title="Activate Stable subscription">Activate</a></td>\n	  {{#is_sub_active defaultSub}}\n          <td><a id="testing-modal" class="btn btn-danger" title="Activate Testing subscription" disabled>Currently Active</a></td>\n	  {{else}}\n          <td><a id="testing-modal" class="btn btn-danger" title="Activate Testing subscription">Activate</a></td>\n	  {{/is_sub_active}}\n	</tr>\n      </tbody>\n    </table>\n    {{/is_sub_active}}\n  </div><!-- col-md-8 -->\n</div><!-- row-->\n\n\n{{#update_available}}\n<br>\n<div class="col-sm-offset-3 col-sm-6 col-sm-offset-3">\n  <div id="updateInfo">\n    <h3><strong>Rockstor {{mostRecentVersion}}</strong> update is available! </h3>\n  </div>\n</div>&nbsp;&nbsp;&nbsp;&nbsp;\n<br><br>\n<div class="col-sm-offset-2 col-sm-8 col-sm-offset-2">\n  <div id="changeSection">\n    <p>List of changes in this update</p>\n    <ul>\n      {{#each changeMap}}\n      <li><p>{{this}}</p></li>\n      {{/each}}\n    </ul>\n    {{#is_sub_active defaultSub}}\n    <p>\n      You should review the\n      changelog <a href="https://github.com/rockstor/rockstor-core/commits/master"\n		   target="_blank">here</a> before proceeding with the update.\n    </p>\n    {{/is_sub_active}}\n  </div>\n</div>\n\n<div class="col-md-offset-2 col-md-8 col-md-offset-2" id="supportBox">\n  {{#is_sub_active defaultSub}}\n  <div class="alert alert-success" id="contrib-alert">\n    <h4>We are happy to make this update available to you. Please support us by\n      <a id="donateYes" href="#version"> Donating</a> or making a <a href="http://shop.rockstor.com" target="_blank"> Purchase</a></h4>\n  </div>\n  {{/is_sub_active}}\n  <a id="update" class="btn btn-primary" title="start update">Start Update</a>\n</div>\n\n{{else}}\n<div class="col-md-offset-3 col-md-6 col-md-offset-3">\n  <div id="updateInfo">\n    <h3>System is running the latest Rockstor version: {{currentVersion}}</h3>\n    <p>If you\'ve updated recently, reload the browser<b>(Ctrl+Shift+R)</b> for latest UI changes.</p><br>\n\n    {{#if autoUpdateEnabled}}\n    <a id="autoUpdateSwitch" class="btn btn-primary" title="Rockstor is configured to check for available system updates and automatically upgrade all packages on a daily basis. This will keep your entire system up to date. While it\'s not recommended, you can disable this feature and only update when you want to.">Disable auto update</a>\n    {{else}}\n    <a id="autoUpdateSwitch" class="btn btn-primary" title="Rockstor can be configured to check for available system updates and automatically upgrade all packages on a daily basis. We recommend you enable this feature to keep your entire system up to date without delay.">Enable auto update</a>\n    {{/if}}\n  </div>\n</div>\n{{/update_available}}\n\n<div class="col-md-offset-3 col-md-6 col-md-offset-3">\n  {{#is_sub_active stableSub}}\n  <div id="updateInfo" class="alert alert-success">\n    <p></p>\n    <p>\n      Stable updates are activated. While it\'s not recommended, if you are\n      absolutely sure, Testing updates can be activated by clicking <a id="testing-modal"> here.</a>\n    </p>\n  </div>\n  {{/is_sub_active}}\n</div>\n\n<div id="update-modal" class="modal fade" role="dialog" aria-hidden="true">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n	<h4>Rockstor is being updated to the latest version. Please wait... &nbsp;&nbsp; </h4>\n      </div>\n      <div class="modal-body">\n	<div style="text-align: center">\n	  <img src="/static/storageadmin/img/ajax-loader-big.gif">\n	  <div id="time-left"></div>\n	</div>\n	<div id="user-msg" style="display: none">The Rockstor update is still going on. if the page does not automatically refresh after a few minutes, please try manually refreshing after some time.</div>\n      </div>\n    </div><!-- /.modal-content -->\n  </div><!-- /.modal-dialog -->\n</div><!-- /.modal -->\n\n<form id="contrib-form" action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_blank"i style="display:none">\n  <input type="hidden" name="cmd" value="_xclick" />\n  <input type="hidden" name="business" value="WUDA5UNJXDCZ8" />\n  <input type="hidden" name="currency_code" value="USD" />\n  <input type="hidden" name="item_name" value="Support Rockstor development" />\n  <input type="hidden" name="amount" value="10" />\n  <input type="hidden" name="cn" value="Note to Rockstor developers" />\n  <input type="hidden" name="no_shipping" value="1" />\n</form>\n\n<div id="activate-stable" class="modal fade">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n        <h3 class="modal-title">Activate Stable updates.</h3>\n      </div>\n      <div style="font-size: 13px" class="modal-body">\n	<p>\n	  Please follow these steps to activate Stable updates.\n	</p>\n	<ol>\n	  <li>Purchase the Activation code by clicking <a href="http://shop.rockstor.com/products/stable-release-channel-subscription#applianceid={{applianceId}}" target="_blank">here.</a>\n	  <li>The Activation code will be sent to you via e-mail.</li>\n	  <li>Come back to this screen and enter the Activation code.</li>\n	  <li>Enjoy Stable updates. Thanks for supporting Rockstor!</li>\n	</ol>\n	<form id="activate-stable-form" name="aform" class="form-horizontal">\n	  <div class="form-group">\n	    <label class="col-sm-4 control-label" for="activation-code">Activation Code <span class="required">*</span></label>\n	    <div class="col-sm-4">\n	      {{#if stableSub}}\n	      <input class="form-control" type="text" id="activation-code" value="{{stableSub.password}}"name="activation-code">\n	      {{else}}\n	      <input class="form-control" type="text" id="activation-code" name="activation-code">\n	      {{/if}}\n	    </div>\n	  </div>\n	  <p style="color:\'#eb6841\'">UUID for reference: {{applianceId}}</p>\n	  <div class="modal-footer">\n  	    <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">Cancel</button>\n  	    <a id="activateStable" class="btn btn-primary" title="Activate">Activate</a>\n	  </div>\n	</form>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n\n<div id="activate-testing" class="modal fade">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n        <h4 class="modal-title">Activate Testing updates</h4>\n      </div>\n      <div class="modal-body">\n	<p>\n	  Testing updates are high frequency updates that are released just\n	  after testing in development environment as opposed to Stable updates\n	  that are released only after significant testing and qualification\n	  process. Because of this, Testing updates are cutting edge that are\n	  generally not recommended.\n	</p>\n	<p>\n	  Whenever an update is released, read the changelog and decide to\n	  update or not after careful consideration.\n	</p>\n      	<p>Are you sure?</p>\n      </div>\n      <div class="modal-footer">\n      <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">Cancel</button>\n      <a id="activateTesting" class="btn btn-primary" title="Activate">Activate</a>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div id="auto-update-modal" class="modal fade">\n  <div class="modal-dialog">\n    <div class="modal-content">\n      <div class="modal-header">\n	{{#if autoUpdateEnabled}}\n        <h4 class="modal-title">Disable auto updates</h4>\n	{{else}}\n	<h4 class="modal-title">Enable auto updates</h4>\n	{{/if}}\n      </div>\n      <div class="modal-body">\n	{{#if autoUpdateEnabled}}\n	<p>\n	  Currently Rockstor is configured to check for available system updates\n	  and automatically upgrade all packages on a daily basis. This will keep\n	  your entire system up to date. Disabling auto updates is only\n	  recommended when you have Testing updates activated.\n	</p>\n	{{else}}\n	{{#is_sub_active defaultSub}}\n	<div class="alert alert-danger">\n	  <p>\n	    Testing updates are activated on this system. Enabling auto updates\n	    is strongly discouraged while this is the case.\n	  </p>\n	</div>\n	{{/is_sub_active}}\n	<p>\n	  By enabling auto updates, Rockstor will check for available system\n	  updates and automatically upgrade all packages on a daily\n	  basis. Enabling this feature is recommended except when Testing\n	  updates are active.\n	</p>\n	{{/if}}\n      	<p>Are you sure?</p>\n	<div class="modal-footer">\n	  <button class="btn btn-default" data-dismiss="modal" aria-hidden="true">Cancel</button>\n	  {{#if autoUpdateEnabled}}\n	  <a id="disableAuto" class="btn btn-primary" title="Activate">Disable auto updates</a>\n	  {{else}}\n	  <a id="enableAuto" class="btn btn-primary" title="Activate">Enable auto updates</a>\n	  {{/if}}\n	</div>\n      </div>\n    </div>\n  </div>\n</div>\n');
window.JST['users_add_group'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n<div class="row">\n  <div class="col-md-8">\n    <div class="panel panel-default">\n      {{#if groupname}}\n      <div class="panel-heading">Create a new group</div>\n      {{else}}\n      <div class="panel-heading">Edit Group</div>\n      {{/if}}\n\n    <div class="panel-body">\n      <form class="form-horizontal" id="group-create-form" name="aform">\n        <div class="messages"></div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label" for="groupname">Groupname\n	    {{#unless groupname}}\n            <span class="required"> *</span>\n	    {{/unless}}\n          </label>\n	  {{#if groupname}}\n          <label class="col-sm-4 control-label" style="text-align:left">{{groupname}}</label>\n	  <div class="col-sm-4">\n            <input class="form-control" type="hidden" id="groupname" name="groupname" value="{{groupname}}">\n	  </div>\n	  {{else}}\n	  <div class="col-sm-4">\n            <input class="form-control" type="text" id="groupname" name="groupname" placeholder="Groupname" title="Enter Group Name">\n	  </div>\n	  {{/if}}\n        </div>\n	<div class="form-group">\n	  <div class="col-sm-offset-4 col-sm-8">\n            <div class="checkbox">\n              <label>\n		{{#if group.admin}}\n		<input type="checkbox" id="admin" name="admin" placeholder="Admin" checked="true">\n		{{else}}\n		<input type="checkbox" id="admin" name="admin" placeholder="Admin">\n		{{/if}}\n		Put this group under Rockstor management?\n              </label>\n            </div>\n	  </div>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label">GID</label>\n	    <div class="col-sm-4">\n	      <input class="form-control" type="text" id="gid" name="gid" placeholder="Autogenerate" title="Enter a custom gid here or one will be autogenerated">\n	    </div>\n	</div>\n        <div class="form-group">\n	  <div class="col-sm-offset-4 col-sm-8">\n            <button id="cancel" class="btn btn-default">Cancel</button>\n            <button type="Submit" id="create-group" class="btn btn-primary">Submit</button>\n	  </div>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['users_add_user'] = Handlebars.compile('<script>\n  /*\n  * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n  * This file is part of RockStor.\n  *\n  * RockStor is free software; you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published\n  * by the Free Software Foundation; either version 2 of the License,\n  * or (at your option) any later version.\n  *\n  * RockStor is distributed in the hope that it will be useful, but\n  * WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n</script>\n<div class="row">\n  <div class="col-md-8">\n    <div class="panel panel-default">\n      {{#unless username}}\n      <div class="panel-heading">Create a new user</div>\n      {{else}}\n      <div class="panel-heading">Edit User</div>\n      {{/unless}}\n\n    <div class="panel-body">\n      <form class="form-horizontal" id="user-create-form" name="aform" class="form-horizontal">\n\n        <div class="messages"></div>\n        <div class="form-group">\n	  {{#if username}}\n          <label class="col-sm-4 control-label" for="username">Username (UID)</label>\n	  {{else}}\n	  <label class="col-sm-4 control-label" for="username">Username<span class="required"> *</span></label>\n	  {{/if}}\n\n	  {{#if username}}\n	  <div class="col-sm-4"> <!-- Inline styling since this is the first instance of this case -->\n	    <input type="text" class="form-control" disabled value="{{username}} ({{user.uid}})" />\n	  </div>\n	  <div class="col-sm-offset-4 col-sm-8">\n            <input class="form-control" type="hidden" id="username" name="username" value="{{username}}">\n	  </div>\n	  {{else}}\n	  <div class="col-sm-4">\n            <input class="form-control" type="text" id="username" name="username" placeholder="Username" title="Username must start with a letter and can contain letters, numbers, - and _ characters. It cannot exceed 30 characters in length.">\n	  </div>\n	  {{/if}}\n        </div>\n        <div class="form-group">\n	  <div class="col-sm-offset-4 col-sm-8">\n            <div class="checkbox">\n              <label>\n		{{#if user.user}}\n                <input class="checkbox-inline" type="checkbox" id="admin" name="admin" placeholder="Admin" checked="true">\n		{{else}}\n                <input class="checkbox-inline" type="checkbox" id="admin" name="admin" placeholder="Admin">\n		{{/if}}\n		Allow this user to login to RockStor Web UI?\n              </label>\n            </div>\n	  </div>\n        </div>\n        <div class="form-group">\n	  {{#unless username}}\n          <label class="col-sm-4 control-label">Password<span class="required"> *</span></label>\n	  {{else}}\n	  <label class="col-sm-4 control-label">Password<span class="required"></span></label>\n	  {{/unless}}\n	  <div class="col-sm-4">\n	    <input class="form-control" type="password" id="password" name="password" placeholder="Password">\n	  </div>\n        </div>\n        <div class="form-group">\n	  {{#unless username}}\n          <label class="col-sm-4 control-label">Confirm Password<span class="required"> *</span></label>\n	  {{else}}\n	  <label class="col-sm-4 control-label">Confirm Password<span class="required"></span></label>\n	  {{/unless}}\n\n	  <div class="col-sm-4">\n            <input class="form-control" type="password" id="password_confirmation" name="password_confirmation" placeholder="Password">\n          </div>\n        </div>\n        <div class="form-group">\n          <label class="col-sm-4 control-label">Public key</label>\n          <div class="col-sm-8">\n	    {{#if user.public_key}}\n            <textarea class="form-control" rows="2" cols="50" id="public_key" name="public_key"> {{user.public_key}} </textarea>\n	    {{else}}\n            <textarea class="form-control" rows="2" cols="50" id="public_key" name="public_key" />\n	    {{/if}}\n          </div>\n        </div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label" for="shell">Login shell<span class="required"></span></label>\n	  <div class="col-sm-4">\n	    <select class="form-control" id="shell" name="shell">\n	      {{#each shells}}\n              <option value="{{this}}">{{this}} </option>\n	      {{/each}}\n	    </select>\n	  </div>\n	</div>\n	{{#unless username}}\n	<div class="form-group">\n	  <label class="col-sm-4 control-label">UID</label>\n	  <div class="col-sm-4">\n	    <input class="form-control" type="text" id="uid" name="uid" placeholder="Create a new one" title="Enter a custom uid here or one will be autogenerated">\n	  </div>\n	</div>\n	<div class="form-group">\n	  <label class="col-sm-4 control-label">Group</label>\n	  <div class="col-sm-4">\n	    <select class="form-control" name="group" id="group" title="Select a primary group from the list of one will be autogenerated" data-placeholder="Autogenerate">\n	      <option value="Autogenerate" selected="selected">Choose a group</option>\n	      {{#each groups}}\n              <option value="{{this.groupname}}">{{this.groupname}}</option>\n	      {{/each}}\n	    </select>\n	  </div>\n	</div>\n	{{/unless}}\n	<div class="form-group">\n	  <label class="col-sm-4 control-label">Email</label>\n	  <div class="col-sm-4">\n	    {{#unless username}}\n	    <input class="form-control" type="text" id="email" name="email" title="Enter an email address to associate with the user">\n	    {{else}}\n	    <input class="form-control" type="text" id="email" name="email" title="Enter an email address to associate with the user" value="{{user.email}}">\n	    {{/unless}}\n	  </div>\n	</div>\n	<div class="form-group">\n	  <div class="col-sm-offset-4 col-sm-8">\n	    <button id="cancel" class="btn btn-default">Cancel</button>\n	    <button type="Submit" id="create-user" class="btn btn-primary">Submit</button>\n	  </div>\n	</div>\n      </form>\n    </div>\n  </div>\n</div>\n');
window.JST['users_groups'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <div class="messages"></div>\n    <!-- Content -->\n    <h3> Rockstor managed groups </h3>\n    <table id="users-table" class="table table-bordered table-striped share-table data-table" width="100%" summary="List of user">\n      <thead>\n        <tr>\n          <th scope="col" abbr="Name">Groupname</th>\n          <th scope="col" abbr="GID">GID</th>\n          <th scope="col" abbr="Actions">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n      {{display_groups_table true}}\n      </tbody>\n    </table>\n    <a href="#add-group" id="add-group" class="btn btn-primary">Add Group</a>\n\n    <h3> Other system groups </h3>\n    <table id="groups-table" class="table table-bordered table-striped share-table data-table" summary="List of groups">\n      <thead>\n        <tr>\n          <th scope="col" abbr="Name">Groupname</th>\n          <th scope="col" abbr="GID">GID</th>\n	  <th scope="col" abbr="Actions">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n       {{display_groups_table false}}\n      </tbody>\n      </table>\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n');
window.JST['users_users'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <div class="messages"></div>\n    <!-- Content -->\n    <h3> Rockstor Admin users </h3>\n    <table id="users-table" class="table table-bordered table-striped share-table data-table" summary="List of user">\n      <thead>\n        <tr>\n          <th scope="col" abbr="Name">Username</th>\n          <th scope="col" abbr="UID">UID</th>\n          <th scope="col" abbr="Group">Group</th>\n	  <th scope="col" abbr="GID">GID</th>\n	  <th scope="col" abbr="Shell">Shell</th>\n          <th scope="col" abbr="Actions">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {{display_users_table true}}\n      </tbody>\n    </table>\n    <a href="#add-user" id="add-user" class="btn btn-primary">Add User</a>\n\n    <h3> Other system users </h3>\n    <table id="users-table" class="table table-bordered table-striped share-table data-table" summary="List of user">\n      <thead>\n        <tr>\n          <th scope="col" abbr="Name">Username</th>\n          <th scope="col" abbr="UID">UID</th>\n	  <th scope="col" abbr="Group">Group</th>\n          <th scope="col" abbr="GID">GID</th>\n	  <th scope="col" abbr="Shell">Shell</th>\n          <th scope="col" abbr="Actions">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n      {{display_users_table false}}\n      </tbody>\n      </table>\n</div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<!-- Preload Rockcost Pincard background image-->\n<img style="visibility: hidden; display: none;" id="canvas_background" src="static/storageadmin/img/rockstor-sticker.png">\n\n<div id="pincard-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">\n  <div class="modal-dialog" style="width: 350px;">\n    <div class="modal-content">\n      <div class="modal-header">\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n        <h4 id="myModalLabel">Pincard Generator</h4>\n      </div>\n      <div class="modal-body">\n        <div class="messages"></div>\n        <p style="text-align: center;">\n		<canvas id="Pincard_canvas" width="324" height="204"></canvas>\n		</p>\n		<p style="text-align: justify; font-size: small;">\n		This is your pincard for user <span id="pincard_user" style="font-style: italic; font-weight: bold;"></span>, right click on it and save as png image.<br/>\n		Generated pincard is in <a href="https://en.wikipedia.org/wiki/ISO/IEC_7810"\n		target="_blank">ISO/IEC 7810 ID-1</a> format (mm 85.60x53.98 over a 96 dpi monitor) and \n		can be printed or applied over an ID-1 size card.\n		</p>\n		<p style="text-align: justify; font-size: small; font-weight: bold;" id="pins_list"></p>\n      </div>\n    </div>\n  </div>\n</div>\n');
window.JST['wizard_wizard'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2013 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n *\n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n *\n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n</script>\n\n<div class="row">\n  <div class="col-md-12">\n    <div id="ph-wizard-header">\n      <h3>{{title}}</h3>\n    </div>\n    <div id="ph-wizard-contents">\n    </div>\n    <div id="ph-wizard-buttons" class="col-md-12">\n      <button id="next-page" class="btn btn-primary wizard-btn">Next</button>\n      <button id="prev-page" class="btn wizard-btn">Back</button>\n    </div>\n  </div>\n</div>\n');
window.JST['dashboard_widgets_cpuusage'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="widget-header">\n            <div class="title">\n                <span class="h4">{{ displayName }}</span>\n            </div>\n            <div class="gear">\n                <a class="resize-widget" href="#"><i class="glyphicon glyphicon-resize-full"></i></a>\n                <a class="close-widget" href="#"><i class="glyphicon glyphicon-remove"></i></a>\n            </div>\n        </div>\n    </div> \n</div> \n\n\n<!-- Widget Body -->\n<!-- Content -->\n<div class="widget-content">\n    <canvas id="cpuusage-avg-chart" width="250" height="125" style="padding: 0px; margin: 0px 0px 10px;"></canvas>\n    <canvas id="cpuusage-all-chart" width="250" height="125" style="padding: 0px; margin: 0px;"></canvas>\n</div>\n<!-- End Content -->\n<!-- end Widget body -->\n');
window.JST['dashboard_widgets_disk_util_select'] = Handlebars.compile('    <div id="disk-select-ph">\n        <span class="h4">Disk activity</span> for disk\n        <select name="disk-select" id="disk-select" class="inline">\n            {{#each disks}}\n            <option value="{{this.name}}">{{this.name}}</option>\n            {{/each}}\n        </select>\n    </div>\n    <div style="width: 500px; height: 180px;">\n        <canvas id="single-disk-chart"></canvas>\n    </div>\n');
window.JST['dashboard_widgets_disk_utilization'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div class="widget-header">\n    <div class="title"><span class="h4">{{ displayName }}</span></div>\n    <div class="gear">\n        <a class="resize-widget" href="#"><i class="glyphicon glyphicon-resize-full"></i></a>\n        <a class="close-widget" href="#"><i class="glyphicon glyphicon-remove"></i></a>\n    </div>\n</div>\n\n<!-- Content -->\n<div class="widget-content">\n    <div id="top-disks-container" style="width: 70%; margin: 0 auto;">\n        <canvas id="top-disks-chart"></canvas>\n    </div>\n    <div id="disk-sort">\n        <span class="h4">Top disks</span> sort by:\n        <select name="attr-select" id="attr-select" class="inline">\n            {{genAttrSelect}}\n        </select>\n    </div>\n    <br>\n    <div id="disk-details-ph"></div>\n</div>\n<!-- End Content -->\n\n\n');
window.JST['dashboard_widgets_memory_utilization'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="widget-header">\n            <div class="title">\n                <span class="h4">{{ displayName }}</span>\n            </div>\n            <div class="gear">\n                <a class="resize-widget" href="#"><i class="glyphicon glyphicon-resize-full"></i></a>\n                <a class="close-widget" href="#"><i class="glyphicon glyphicon-remove"></i></a>\n            </div>\n        </div>\n    </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<!-- Module Body -->\n<!-- Content -->\n<div class="widget-content">\n    <canvas id="memory-chart" width="250" height="150" style="padding: 0px; margin: 0px 0px 0px;"></canvas>\n    <canvas id="swap-chart" width="250" height="100" style="padding: 0px; margin: 0px 0px 10px;"></canvas>\n</div>\n<!-- End Content -->\n<!-- end module body -->\n\n\n\n');
window.JST['dashboard_widgets_network_util_values'] = Handlebars.compile('<table>\n  <tr>\n    <td>Data rec: <span id="data-rec"></span></td>\n    <td>Packets rec: <span id="packets-rec"></span></td>\n    <td>Errors rec: <span id="errors-rec"></span></td>\n    <td>Drop rec: <span id="drop-rec"></span></td>\n  </tr>\n  <tr>\n    <td>Data sent: <span id="data-sent"></span></td>\n    <td>Packets sent: <span id="packets-sent"></span></td>\n    <td>Errors sent: <span id="errors-sent"></span></td>\n    <td>Drop sent: <span id="drop-sent"></span></td>\n  </tr>\n</table> \n\n');
window.JST['dashboard_widgets_network_utilization'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="widget-header">\n            <div class="title"><span class="h4">{{ displayName }}</span></div>\n            <div class="gear">\n                <a class="resize-widget" href="#"><i class="glyphicon glyphicon-resize-full"></i></a>\n                <a class="close-widget" href="#"><i class="glyphicon glyphicon-remove"></i></a>\n            </div>\n        </div>\n    </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<!-- Module Body -->\n<!-- Content -->\n<div class="widget-content">\n    <canvas id="network-chart" width="250" height="125" style="padding: 0px; margin: 0px 0px 10px;"></canvas>\n    <div class="clear"></div>\n    <div id="network-util-legend" style="float: left;"></div>\n    <div id="interface-select-div" style="float: left; margin-left: 2px; font-size: smaller;">\n    Interface:<br>\n    <select id="interface-select" name="interface-select" style="font-size: smaller; line-height: 1em; width: 50px; height: 22px;">\n    </select>\n    </div>\n    <div class="clear"></div>\n    <div id="network-util-values-ph" style="float: left;"></div>\n</div>\n<!-- End Content -->\n<!-- end module body -->\n\n\n\n\n');
window.JST['dashboard_widgets_pool_usage'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="widget-header">\n            <div class="title"><span class="h4">{{ displayName }}</span></div>\n            <div class="gear">\n                <a class="resize-widget" href="#"><i class="glyphicon glyphicon-resize-full"></i></a>\n                <a class="close-widget" href="#"><i class="glyphicon glyphicon-remove"></i></a>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="widget-content">\n    <div id="pool-usage-title" style="font-size: 12px; margin-bottom: 5px;">\n    Relative and absolute usage of system pools\n    </div>\n    <div id="pool-usage-graph"></div>\n</div>\n');
window.JST['dashboard_widgets_sample'] = Handlebars.compile('<!-- Header -->\n<div class="row">\n  <div class="col-md-12">\n    <div class="widget-header">\n      <div class="title"><span class="h3">{{ displayName }}</span></div>\n      <div class="gear">\n        <a class="resize-widget" href="#"><i class=" glyphicon glyphicon-resize-full"></i></a>\n        <a class="close-widget" href="#"><i class=" glyphicon glyphicon-remove"></i></a>\n      </div>\n    </div>\n  </div> <!-- col-md-12 -->\n</div> <!-- row -->\n\n<!-- Module Body -->\n<div class="row">\n  <div class="col-md-12">\n    <!-- Content -->\n    <div class="widget-content">\n      <div class="row">\n        <div class="col-md-12">\n          Coming soon!\n        </div>\n      </div>\n    </div>\n    <!-- End Content -->\n  </div> <!-- col-md-12 -->\n</div> <!-- row --> \n<!-- end module body -->\n\n');
window.JST['dashboard_widgets_storage_metrics'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n\n<div class="row">\n    <div class="col-md-12">\n        <div class="widget-header">\n            <div class="title"><span class="h4">{{ displayName }}</span></div>\n            <div class="gear">\n                <a class="resize-widget" href="#"><i class="glyphicon glyphicon-resize-full"></i></a>\n                <a class="close-widget" href="#"><i class="glyphicon glyphicon-remove"></i></a>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="widget-content">\n    <canvas id="metrics-chart" width="270" height="220" style="padding: 0px; margin: 0px 0px 10px;"></canvas>\n    <div id="metrics-legend" style="width: 100%"></div>\n</div>\n');
window.JST['dashboard_widgets_storage_metrics_legend'] = Handlebars.compile('<table style="font-size: 10px;">\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n</table> \n\n');
window.JST['dashboard_widgets_top_shares'] = Handlebars.compile('<script>\n/*\n * Copyright (c) 2012-2016 RockStor, Inc. <http://rockstor.com>\n * This file is part of RockStor.\n * \n * RockStor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published\n * by the Free Software Foundation; either version 2 of the License,\n * or (at your option) any later version.\n * \n * RockStor is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * \n */\n</script>\n<div class="row">\n    <div class="col-md-12">\n        <div class="widget-header">\n            <div class="title"><span class="h4">{{ displayName }}</span></div>\n            <div class="gear">\n                <a class="resize-widget" href="#"><i class="glyphicon glyphicon-resize-full"></i></a>\n                <a class="close-widget" href="#"><i class="glyphicon glyphicon-remove"></i></a>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class="widget-content">\n    <div id="top-shares-title" style="font-size: 12px; margin-bottom: 5px;"></div>\n    <div id="top-shares-graph"></div>\n</div>\n');
window.JST['pool_resize_add_disks'] = Handlebars.compile('<div id="breadcrumb">\n  <div>Select</div>\n  <div>Change RAID level?</div>\n  <div>Select disks to add</div>\n</div>\n<br>\n<form id="add-disks-form">\n    {{#if model.raidChange}}\n    <div class="row">\n    <div class="form-group col-md-4">\n        <label for="raid-level">Select a new raid level<br>raid5 & raid6 are not production-ready</label>\n        <select id="raid-level" name="raid-level" class="form-control">\n            <option value="">Select a new raid level</option>\n            {{display_raid_levels}}\n        </select>\n    </div>\n    </div>\n    {{/if}}\n    <h4>Select disks to add</h4>\n    <div class="poolDiskTableScroll">\n        <div id="ph-disks-table"></div>\n    </div>\n</form>\n\n');
window.JST['pool_resize_add_disks_raid'] = Handlebars.compile('<div id="breadcrumb">\n  <div>Select</div>\n  <div>Change RAID level?</div>\n</div>\n<br>\n<h4>Current RAID level of {{display_poolName_raidLevel}}</h4>\n<h4>Would you like to change RAID level of this pool also?</h4>\n<form class="form" id="raid-change-form">\n  <div class="form-group">\n    <div class="">\n      <label class="radio-inline">\n        <input type="radio" name="raidChange" value="no" checked="checked">No\n      </label>\n      <label class="radio-inline">\n        <input type="radio" name="raidChange" value="yes">Yes\n      </label>\n    </div>\n  </div>\n</form>\n');
window.JST['pool_resize_choice'] = Handlebars.compile('\n<div id="breadcrumb">\n  <div>Select</div>\n</div>\n<br>\n<h4>Select an operation to perform on {{display_poolName}}</h4>\n<ol>\n  <li><h4><a href="#" id="change-raid">Modify RAID level only</a></h4></li>\n  <li><h4><a href="#" id="add-disks">Add disks (optional RAID change)</a></h4></li>\n  <li><h4><a href="#" id="remove-disks">Remove disks</a></h4></li>\n  <li><h4>Replace existing disk (planned option)</h4></li>\n</ol> \n\n');
window.JST['pool_resize_raid_change'] = Handlebars.compile('<div id="breadcrumb">\n  <div>Select</div>\n  <div>Select RAID level and add disks</div>\n</div>\n<br>\n<h4>Current raid level: {{raidLevel}}</h4>\n\n<form id="raid-change-form">\n  <div class="row">\n  <div class="form-group col-md-4">\n     <label for="raid-level">Select a new raid level<br>raid5 & raid6 are not production-ready</label>\n    <select id="raid-level" name="raid-level" class="form-control">\n      <option value="">Select a new raid level</option>\n      {{display_raid_levels}}\n    </select>\n    </div>\n  </div>\n</form>\n');
window.JST['pool_resize_remove_disks'] = Handlebars.compile('<div id="breadcrumb">\n  <div>Select</div>\n  <div>Select disks to remove</div>\n</div>\n<br>\n<h4>Select disks to remove</h4>\n<div class="poolDiskTableScroll">\n    <div id="ph-disks-table"></div>\n</div>\n');
window.JST['pool_resize_remove_disks_complete'] = Handlebars.compile('<div id="breadcrumb">\n  <div>Select</div>\n  {{display_breadCrumbs}}\n  <div>Summary</div>\n  <div>Complete</div>\n</div>\n<br>\n<div class="alert alert-success">\n  <h4>Resize initiated - disk addition or raid change entails a subsequent Rockstor visible balance which may take several hours. Check status in the Balances tab. Disk delete progress is currently unmonitored.</h4>\n</div>\n\n');
window.JST['pool_resize_summary'] = Handlebars.compile('<div id="breadcrumb">\n  <div>Select</div>\n  {{display_breadCrumbs}}\n  <div>Summary</div>\n</div>\n<br>\n<h4>The following changes will be applied to pool {{poolName}}</h4>\n<table class="table table-bordered">\n  <tr>\n    <th></th>\n    <th>Right now</th>\n    <th>After resize</th>\n  </tr>\n  <tr>\n    <td>RAID Level</td>\n    <td>{{raidLevel}}</td>\n    <td><strong>{{newRaidLevel}}</strong></td>\n  </tr>\n  <tr>\n    <td>Disk set</td>\n    <td>{{display_diskSet}}</td>\n    <td><strong>{{newDisks}}</strong></td>\n  </tr>\n</table>\n');
